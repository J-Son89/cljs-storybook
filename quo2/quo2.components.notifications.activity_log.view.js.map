{"version":3,"sources":["quo2/components/notifications/activity_log/view.cljs"],"mappings":"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","names":["p__19229","map__19230","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","p1__19228#","quo2.components.notifications.activity-log.view/activity-reply-text-input","on-update-reply","max-reply-length","valid-reply?","reply-input","react-native.core/view","quo2.components.markdown.text/text","quo2.foundations.colors/neutral-40","utils.i18n/label","cljs.core/deref","quo2.foundations.colors/danger-60","cljs.core/count","quo.core/text-input","cljs.core/reset!","quo2.components.notifications.activity-log.view/activity-icon","icon","quo2.components.notifications.activity-log.style/icon","quo2.components.icon/icon","quo2.foundations.colors/white","quo2.components.notifications.activity-log.view/activity-context","context","replying?","first-line-offset","gap-between-lines","cljs.core/into","cljs.core/assoc","quo2.components.notifications.activity-log.style/context-container","cljs.core/mapcat","detail","cljs.core/map","s","clojure.string/split","p__19244","map__19245","quo2.components.notifications.activity-log.view/activity-message","title","body","title-number-of-lines","body-number-of-lines","quo2.components.notifications.activity-log.style/message-container","quo2.components.notifications.activity-log.style/message-title","quo2.components.notifications.activity-log.style/message-body","quo2.components.notifications.activity-log.view/activity-title","quo2.components.notifications.activity-log.style/title","quo2.components.notifications.activity-log.view/activity-timestamp","timestamp","quo2.components.notifications.activity-log.style/timestamp","quo2.components.notifications.activity-log.view/activity-unread-dot","quo2.components.notifications.activity-log.style/unread-dot-container","quo2.components.notifications.activity-log.style/unread-dot","js/quo2","js/quo2.components","js/quo2.components.notifications","js/quo2.components.notifications.activity-log","js/quo2.components.notifications.activity-log.view","js/quo2.components.notifications.activity-log.view.footer-item-view","method-table__4619__auto__","cljs.core/atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core/MultiFn","cljs.core/symbol","quo2.components.notifications.activity-log.view/footer-item-view","item","_","cljs.core/-add-method","p__19247","map__19248","label","subtype","disable-when","button","size","common-style","quo2.components.buttons.button/button","and__4115__auto__","cljs.core/update","cljs.core/merge","p__19250","map__19251","blur?","quo2.components.tags.status-tags/status-tag","quo2.components.notifications.activity-log.view/footer","reagent.core/atom","p__19253","map__19254","items","props","quo2.components.notifications.activity-log.style/footer-container","iter__4529__auto__","s__19257","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__19259","cljs.core/chunk-buffer","i__19258","map__19260","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__19256","cljs.core/chunk-rest","map__19263","cljs.core/first","cljs.core/cons","cljs.core/rest","key","p__19270","map__19272","quo2.components.notifications.activity-log.view/view","message","unread?","quo2.components.notifications.activity-log.style/container","quo2.components.notifications.activity-log.style/top-section-container","quo2.components.notifications.activity-log.style/title-container","cljs.core/not","cljs.core/chunk-first"],"sourcesContent":["(ns quo2.components.notifications.activity-log.view\n  (:require [clojure.string :as string]\n            [quo.core :as quo]\n            [quo2.components.buttons.button :as button]\n            [quo2.components.icon :as icon]\n            [quo2.components.markdown.text :as text]\n            [quo2.components.notifications.activity-log.style :as style]\n            [quo2.components.tags.status-tags :as status-tags]\n            [quo2.foundations.colors :as colors]\n            [react-native.core :as rn]\n            [reagent.core :as reagent]\n            [utils.i18n :as i18n]))\n\n(defn- activity-reply-text-input\n  [{:keys [on-update-reply max-reply-length valid-reply?]} reply-input]\n  [rn/view\n   [rn/view\n    {:style {:margin-top     16\n             :margin-bottom  8\n             :flex-direction :row}}\n    [text/text\n     {:weight :medium\n      :style  {:flex-grow 1\n               :color     colors/neutral-40}}\n     (i18n/label :t/your-answer)]\n    [text/text\n     {:style {:flex-shrink 1\n              :color       (if (valid-reply? @reply-input)\n                             colors/neutral-40\n                             colors/danger-60)}}\n     (str (count @reply-input) \"/\" max-reply-length)]]\n   [rn/view\n    ;; TODO(@ilmotta): Replace with quo2 component when available.\n    ;; https://github.com/status-im/status-mobile/issues/14364\n    [quo/text-input\n     {:on-change-text      #(do (reset! reply-input %)\n                                (when on-update-reply\n                                  (on-update-reply %)))\n      :auto-capitalize     :none\n      :auto-focus          false\n      :accessibility-label :identity-verification-reply-text-input\n      :placeholder         (i18n/label :t/type-something)\n      :return-key-type     :none\n      :multiline           false\n      :auto-correct        false}]]])\n\n(defn- activity-icon\n  [icon]\n  [rn/view {:style style/icon}\n   [icon/icon icon {:color colors/white}]])\n\n(defn- activity-context\n  [context replying?]\n  (let [first-line-offset (if replying? 4 0)\n        gap-between-lines 4]\n    (into [rn/view {:style (assoc style/context-container :margin-top first-line-offset)}]\n          (mapcat\n           (fn [detail]\n             ^{:key (hash detail)}\n             (if (string? detail)\n               (map (fn [s]\n                      [rn/view\n                       {:style {:margin-right 4\n                                :margin-top   0}}\n                       [text/text\n                        {:size  :paragraph-2\n                         :style {:color colors/white}}\n                        s]])\n                    (string/split detail #\"\\s+\"))\n               [[rn/view\n                 {:margin-right 4\n                  :margin-top   gap-between-lines}\n                 detail]]))\n           context))))\n\n(defn- activity-message\n  [{:keys [title body title-number-of-lines body-number-of-lines]}]\n  [rn/view {:style style/message-container}\n   (when title\n     [text/text\n      {:size                :paragraph-2\n       :accessibility-label :activity-message-title\n       :style               style/message-title\n       :number-of-lines     title-number-of-lines}\n      title])\n   (if (string? body)\n     [text/text\n      {:style               style/message-body\n       :accessibility-label :activity-message-body\n       :size                :paragraph-1\n       :number-of-lines     body-number-of-lines}\n      body]\n     body)])\n\n(defn- activity-title\n  [title replying?]\n  [text/text\n   {:weight              :semi-bold\n    :accessibility-label :activity-title\n    :style               (style/title)\n    :size                (if replying? :heading-2 :paragraph-1)}\n   title])\n\n(defn- activity-timestamp\n  [timestamp]\n  [text/text\n   {:size                :label\n    :accessibility-label :activity-timestamp\n    :style               style/timestamp}\n   timestamp])\n\n(defn- activity-unread-dot\n  []\n  [rn/view\n   {:accessibility-label :activity-unread-indicator\n    :style               style/unread-dot-container}\n   [rn/view {:style style/unread-dot}]])\n\n(defmulti footer-item-view (fn [item _ _] (:type item)))\n\n(defmethod footer-item-view :button\n  [{:keys [label subtype disable-when] :as button} replying? reply-input]\n  (let [size         (if replying? 40 24)\n        common-style (when replying?\n                       {:padding-vertical 9\n                        :flex-grow        1\n                        :flex-basis       0})]\n    [button/button\n     (-> button\n         (assoc :size size)\n         (assoc :type subtype)\n         (assoc :disabled (and replying? disable-when (disable-when @reply-input)))\n         (update :style merge common-style {:margin-right 8}))\n     label]))\n\n(defmethod footer-item-view :status\n  [{:keys [label subtype blur?]} _ _]\n  [status-tags/status-tag\n   {:size   :small\n    :label  label\n    :status {:type subtype}\n    :blur?  blur?}])\n\n(defn- footer\n  [_]\n  (let [reply-input (reagent/atom \"\")]\n    (fn [{:keys [replying? items] :as props}]\n      [:<>\n       (when replying?\n         [activity-reply-text-input props reply-input])\n       (when items\n         [rn/view style/footer-container\n          (for [{:keys [key] :as item} items]\n            ^{:key key}\n            [footer-item-view item replying? reply-input])])])))\n\n(defn view\n  [{:keys [icon\n           message\n           context\n           timestamp\n           title\n           replying?\n           unread?]\n    :as   props}]\n  [rn/view\n   {:accessibility-label :activity\n    :style               style/container\n    :on-layout           (:on-layout props)}\n   (when-not replying?\n     [activity-icon icon])\n   [rn/view\n    {:style {:padding-left (when-not replying? 8)\n             :flex         1}}\n    [rn/view\n     [rn/view {:style style/top-section-container}\n      [rn/view {:style style/title-container}\n       [activity-title title replying?]\n       (when-not replying?\n         [activity-timestamp timestamp])]\n      (when (and unread? (not replying?))\n        [activity-unread-dot])]\n     (when context\n       [activity-context context replying?])]\n    (when message\n      [activity-message message])\n    [footer props]]])\n"]}