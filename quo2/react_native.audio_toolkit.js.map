{"version":3,"sources":["react_native/audio_toolkit.cljs"],"mappings":"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","names":["react-native.audio-toolkit/PLAYING","js/shadow.js.shim.module$$react_native_community$audio_toolkit.MediaStates","react-native.audio-toolkit/PAUSED","react-native.audio-toolkit/RECORDING","react-native.audio-toolkit/PREPARED","react-native.audio-toolkit/IDLE","react-native.audio-toolkit/ERROR","react-native.audio-toolkit/DESTROYED","react-native.audio-toolkit/SEEKING","react-native.audio-toolkit/PLAYBACK","js/shadow.js.shim.module$$react_native_community$audio_toolkit.PlaybackCategories","react-native.audio-toolkit/default-recorder-options","react-native.audio-toolkit/get-state","player-recorder","react-native.audio-toolkit/new-recorder","options","on-meter","on-ended","recorder","js/shadow.js.shim.module$$react_native_community$audio_toolkit.Recorder","cljs.core/clj->js","react-native.audio-toolkit/new-player","audio","player","js/shadow.js.shim.module$$react_native_community$audio_toolkit.Player","react-native.audio-toolkit/prepare-player","on-prepared","on-error","and__4115__auto__","err","react-native.audio-toolkit/prepare-recorder","react-native.audio-toolkit/start-recording","on-start","or__4126__auto__","react-native.audio-toolkit/stop-recording","on-stop","react-native.audio-toolkit/pause-recording","on-pause","react-native.audio-toolkit/start-playing","react-native.audio-toolkit/stop-playing","react-native.audio-toolkit/get-recorder-file-path","react-native.audio-toolkit/get-player-duration","react-native.audio-toolkit/get-player-current-time","react-native.audio-toolkit/set-player-wake-lock","wake-lock?","react-native.audio-toolkit/toggle-playpause-player","on-play","error","pause?","react-native.audio-toolkit/seek-player","value","on-seek","react-native.audio-toolkit/can-play?","react-native.audio-toolkit/destroy-recorder","cljs.core/not=","react-native.audio-toolkit/destroy-player"],"sourcesContent":["(ns react-native.audio-toolkit\n  (:require [\"@react-native-community/audio-toolkit\" :refer\n             (Player Recorder MediaStates PlaybackCategories)]))\n\n;; get mediastates from react module\n(def PLAYING (.-PLAYING ^js MediaStates))\n(def PAUSED (.-PAUSED ^js MediaStates))\n(def RECORDING (.-RECORDING ^js MediaStates))\n(def PREPARED (.-PREPARED ^js MediaStates))\n(def IDLE (.-IDLE ^js MediaStates))\n(def ERROR (.-ERROR ^js MediaStates))\n(def DESTROYED (.-DESTROYED ^js MediaStates))\n(def SEEKING (.-SEEKING ^js MediaStates))\n\n;; get PlaybackCategories from react module\n(def PLAYBACK (.-Playback ^js PlaybackCategories))\n\n(def default-recorder-options\n  {:filename         \"recording.aac\"\n   :bitrate          32000\n   :channels         1\n   :sampleRate       22050\n   :quality          \"medium\" ; ios only\n   :meteringInterval 50\n   :category         PLAYBACK})\n\n(defn get-state\n  [player-recorder]\n  (when player-recorder\n    (.-state ^js player-recorder)))\n\n(defn new-recorder\n  [options on-meter on-ended]\n  (let [recorder (new ^js Recorder\n                      (:filename options)\n                      (clj->js options))]\n    (when on-meter\n      (.on ^js recorder \"meter\" on-meter))\n    (when on-ended\n      (.on ^js recorder \"ended\" on-ended))))\n\n(defn new-player\n  [audio options on-ended]\n  (let [player (new ^js Player\n                    audio\n                    (clj->js options))]\n    (when on-ended\n      (.on ^js player \"ended\" on-ended))))\n\n(defn prepare-player\n  [player on-prepared on-error]\n  (when (and player (.-canPrepare ^js player))\n    (.prepare ^js player\n              (fn [^js err]\n                (if err\n                  (on-error {:error (.-err err) :message (.-message err)})\n                  (on-prepared))))))\n\n(defn prepare-recorder\n  [recorder on-prepared on-error]\n  (when (and recorder (.-canPrepare ^js recorder))\n    (.prepare ^js recorder\n              (fn [^js err]\n                (if err\n                  (on-error {:error (.-err err) :message (.-message err)})\n                  (on-prepared))))))\n\n(defn start-recording\n  [recorder on-start on-error]\n  (when (and recorder\n             (or\n              (.-canRecord ^js recorder)\n              (.-canPrepare ^js recorder)))\n    (.record ^js recorder\n             (fn [^js err]\n               (if err\n                 (on-error {:error (.-err err) :message (.-message err)})\n                 (on-start))))))\n\n(defn stop-recording\n  [recorder on-stop on-error]\n  (if (and recorder (#{RECORDING PAUSED} (get-state recorder)))\n    (.stop ^js recorder\n           (fn [^js err]\n             (if err\n               (on-error {:error (.-err err) :message (.-message err)})\n               (on-stop))))\n    (on-stop)))\n\n(defn pause-recording\n  [recorder on-pause on-error]\n  (when (and recorder (.-isRecording ^js recorder))\n    (.pause ^js recorder\n            (fn [^js err]\n              (if err\n                (on-error {:error (.-err err) :message (.-message err)})\n                (on-pause))))))\n\n(defn start-playing\n  [player on-start on-error]\n  (when (and player (.-canPlay ^js player))\n    (.play ^js player\n           (fn [^js err]\n             (if err\n               (on-error {:error (.-err err) :message (.-message err)})\n               (on-start))))))\n\n(defn stop-playing\n  [player on-stop on-error]\n  (if (and player (.-isPlaying ^js player))\n    (.stop ^js player\n           (fn [^js err]\n             (if err\n               (on-error {:error (.-err err) :message (.-message err)})\n               (on-stop))))\n    (on-stop)))\n\n(defn get-recorder-file-path\n  [recorder]\n  (when recorder\n    (.-fsPath ^js recorder)))\n\n(defn get-player-duration\n  [player]\n  (when (and player (.-canPlay ^js player))\n    (.-duration ^js player)))\n\n(defn get-player-current-time\n  [player]\n  (when (and player (.-canPlay ^js player))\n    (.-currentTime ^js player)))\n\n(defn set-player-wake-lock\n  [player wake-lock?]\n  (when player\n    (set! (.-wakeLock player) wake-lock?)))\n\n(defn toggle-playpause-player\n  [player on-play on-pause on-error]\n  (when (and player (.-canPlay ^js player))\n    (.playPause ^js player\n                (fn [^js error pause?]\n                  (if error\n                    (on-error {:error (.-err error) :message (.-message error)})\n                    (if pause?\n                      (on-pause)\n                      (on-play)))))))\n\n(defn seek-player\n  [player value on-seek on-error]\n  (when (and player (.-canPlay ^js player))\n    (.seek ^js player\n           value\n           (fn [^js err]\n             (if err\n               (on-error {:error (.-err err) :message (.-message err)})\n               (on-seek))))))\n\n(defn can-play?\n  [player]\n  (and player (.-canPlay ^js player)))\n\n(defn destroy-recorder\n  [recorder]\n  (stop-recording recorder\n                  #(when (and recorder (not= (get-state recorder) DESTROYED))\n                     (.destroy ^js recorder))\n                  #()))\n\n(defn destroy-player\n  [player]\n  (stop-playing player\n                #(when (and player (not= (get-state player) IDLE))\n                   (.destroy ^js player))\n                #()))\n"]}