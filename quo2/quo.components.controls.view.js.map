{"version":3,"sources":["quo/components/controls/view.cljs"],"mappings":"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","names":["quo.components.controls.view/control-builder","component","props","map__18960","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","value","onChange","disabled","cljs-bean.core/bean","state","quo.animated/use-value","tap-state","quo.gesture-handler/states","tap-handler","quo.animated/on-gesture","hold","quo.react/use-memo","quo.animated/with-timing-transition","quo.animated/eq","transition","quo.animated/with-spring-transition","quo.animated/springs","press-end","cljs.core/not","quo.animated/code!","quo.animated/cond*","quo.animated/set","quo.animated/not*","quo.animated/call*","reagent.core/as-element","quo.gesture-handler/tap-gesture-handler","cljs.core/merge","cljs.core/boolean","and__4115__auto__","quo.animated/view","p__18968","map__18969","quo.components.controls.view/switch-view","quo.components.controls.styles/switch-style","quo.components.controls.styles/switch-bullet-style","p__18979","map__18980","quo.components.controls.view/radio-view","quo.components.controls.styles/radio-style","quo.components.controls.styles/radio-bullet-style","quo.components.controls.view/checkbox-view","map__18987","quo.react-native/touchable-without-feedback","quo.react-native/view","quo.components.controls.styles/checkbox-style","quo.components.controls.styles/check-icon-style","status-im.ui.components.icons.icons/tiny-icon","quo.design-system.colors/white","p__18995","map__18999","quo.components.controls.view/animated-checkbox-view","quo.components.controls.styles/animated-checkbox-style","quo.components.controls.styles/animated-check-icon-style","quo.components.controls.view/switch","reagent.core/adapt-react-class","quo.react/memo","quo.components.controls.view/radio","quo.components.controls.view/animated-checkbox","quo.components.controls.view/checkbox"],"sourcesContent":["(ns quo.components.controls.view\n  (:require [cljs-bean.core :as bean]\n            [quo.animated :as animated]\n            [quo.components.controls.styles :as styles]\n            [quo.design-system.colors :as colors]\n            [quo.gesture-handler :as gh]\n            [quo.react :as react]\n            [quo.react-native :as rn]\n            [reagent.core :as reagent]\n            [status-im.ui.components.icons.icons :as icons]))\n\n(defn control-builder\n  [component]\n  (fn [props]\n    (let [{:keys [value onChange disabled]}\n          (bean/bean props)\n          state (animated/use-value 0)\n          tap-state (animated/use-value (:undetermined gh/states))\n          tap-handler (animated/on-gesture {:state tap-state})\n          hold (react/use-memo\n                (fn []\n                  (animated/with-timing-transition\n                   (animated/eq tap-state (:began gh/states))\n                   {}))\n                [])\n          transition (react/use-memo\n                      (fn []\n                        (animated/with-spring-transition state\n                                                         (:lazy\n                                                          animated/springs)))\n                      [])\n          press-end (fn []\n                      (when (and (not disabled) onChange)\n                        (onChange (not value))))]\n      (animated/code!\n       (fn []\n         (animated/cond* (animated/eq tap-state (:end gh/states))\n                         [(animated/set state (animated/not* state))\n                          (animated/set tap-state (:undetermined gh/states))\n                          (animated/call* [] press-end)]))\n       [press-end])\n      (animated/code!\n       (fn []\n         (animated/set state (if (true? value) 1 0)))\n       [value])\n      (reagent/as-element\n       [gh/tap-gesture-handler\n        (merge tap-handler\n               {:shouldCancelWhenOutside true\n                :enabled                 (boolean (and onChange (not disabled)))})\n        [animated/view\n         [component\n          {:transition transition\n           :hold       hold\n           :disabled   disabled}]]]))))\n\n(defn switch-view\n  [{:keys [transition hold disabled value]}]\n  [animated/view\n   {:style               (styles/switch-style transition disabled)\n    :accessibility-label (str \"switch-\" (if value \"on\" \"off\"))\n    :accessibility-role  :switch}\n   [animated/view {:style (styles/switch-bullet-style transition hold)}]])\n\n(defn radio-view\n  [{:keys [transition hold disabled value]}]\n  [animated/view\n   {:style               (styles/radio-style transition disabled)\n    :accessibility-label (str \"radio-\" (if value \"on\" \"off\"))\n    :accessibility-role  :radio}\n   [animated/view {:style (styles/radio-bullet-style transition hold)}]])\n\n(defn checkbox-view\n  [props]\n  (let [{:keys [value onChange disabled]} (bean/bean props)]\n    (reagent/as-element\n     [rn/touchable-without-feedback\n      {:on-press (when (and onChange (not disabled)) onChange)}\n      [rn/view\n       {:style               (styles/checkbox-style value disabled)\n        :accessibility-label (str \"checkbox-\" (if value \"on\" \"off\"))\n        :accessibility-role  :checkbox}\n       [rn/view {:style (styles/check-icon-style value)}\n        [icons/tiny-icon :tiny-icons/tiny-check {:color colors/white}]]]])))\n\n(defn animated-checkbox-view\n  [{:keys [transition hold disabled value]}]\n  [animated/view\n   {:style               (styles/animated-checkbox-style transition disabled)\n    :accessibility-label (str \"checkbox-\" (if value \"on\" \"off\"))\n    :accessibility-role  :checkbox}\n   [animated/view {:style (styles/animated-check-icon-style transition hold)}\n    [icons/tiny-icon :tiny-icons/tiny-check {:color colors/white}]]])\n\n(def switch (reagent/adapt-react-class (react/memo (control-builder switch-view))))\n(def radio (reagent/adapt-react-class (react/memo (control-builder radio-view))))\n(def animated-checkbox\n  (reagent/adapt-react-class (react/memo (control-builder animated-checkbox-view))))\n(def checkbox (reagent/adapt-react-class (react/memo checkbox-view)))\n"]}