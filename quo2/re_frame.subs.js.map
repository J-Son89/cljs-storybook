{"version":3,"sources":["re_frame/subs.cljc"],"mappings":"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","names":["re-frame.subs/kind","js/Error","re-frame.registrar/kinds","re-frame.subs/query->reaction","cljs.core/atom","re-frame.subs/clear-subscription-cache!","seq__18149","cljs.core/seq","cljs.core/deref","chunk__18150","count__18151","i__18152","vec__18178","cljs.core/-nth","cljs.core/nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__18189","cljs.core/first","cljs.core/next","k","rxn","re-frame.interop/dispose!","cljs.core/not-empty","re-frame.loggers/console","re-frame.subs/clear-all-handlers!","re-frame.registrar/clear-handlers","re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","re-frame.interop/add-on-dispose!","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__18196","re-frame.trace/*current-trace*","*current-trace*-temp-val__18197","re-frame.trace/start-trace","end__18061__auto__","re-frame.interop/now","duration__18062__auto__","cljs.core/swap!","re-frame.trace/traces","cljs.core/conj","cljs.core/assoc","re-frame.trace/run-tracing-callbacks!","re-frame.utils/first-in-vector","re-frame.interop/reagent-id","query-cache","cljs.core/contains?","cljs.core/get","cljs.core/dissoc","re-frame.interop/debug-enabled?","new-trace__18063__auto__","cljs.core/merge","cljs.core/update","var_args","G__18206","re-frame.subs/cache-lookup","dyn-v","re-frame.subs/warn-when-not-reactive","re-frame.interop/reactive?","G__18210","re-frame.subs/subscribe","query","*current-trace*-orig-val__18211","*current-trace*-temp-val__18212","temp__5733__auto__","cached","query-id","handler-fn","re-frame.registrar/get-handler","re-frame.db/app-db","*current-trace*-orig-val__18218","*current-trace*-temp-val__18219","not-reactive","cljs.core/remove","re-frame.interop/ratom?","dyn-vals","re-frame.interop/make-reaction","cljs.core/mapv","sub","re-frame.subs/map-vals","f","m","cljs.core/into","cljs.core/empty","cljs.core/map","p__18237","vec__18239","v","re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core/map?","re-frame.interop/deref?","re-frame.subs/to-seq","x","cljs.core/List","re-frame.subs/deref-input-signals","dereffed-signals","cljs.core/doall","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frame.subs/reg-sub","seq18256","G__18257","self__4723__auto__","args","vec__18260","err-header","input-args","computation-fn","vec__18263","op","comp-f","cljs.core/take-last","cljs.core/=","cljs.core/fn?","cljs.core/vector?","cljs.core/butlast","cljs.core/last","cljs.core/drop-last","G__18272","cljs.core/Keyword","db","_","p__18285","vec__18286","seq__18287","first__18288","qs","cljs.core/apply","inputs-fn","G__18290","vec__18291","marker","vec","pairs","cljs.core/partition","markers","vecs","cljs.core/second","cljs.core/every?","re-frame.registrar/register-handler","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__18296","*current-trace*-temp-val__18297","subscription","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__18300","*current-trace*-temp-val__18301"],"sourcesContent":["(ns re-frame.subs\n (:require\n   [re-frame.db        :refer [app-db]]\n   [re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id reactive?]]\n   [re-frame.loggers   :refer [console]]\n   [re-frame.utils     :refer [first-in-vector]]\n   [re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n   [re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (re-frame.registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"calls `on-dispose` for each cached item, \n   which will cause the value to be removed from the cache\" \n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"re-frame: The subscription cache isn't empty after being cleared\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn warn-when-not-reactive\n  []\n  (when (and debug-enabled? (not (reactive?)))\n    (console :warn\n             \"re-frame: Subscribe was called outside of a reactive context.\\n\"\n             \"See: https://day8.github.io/re-frame/FAQs/UseASubscriptionInAJsEvent/\\n\"\n             \"https://day8.github.io/re-frame/FAQs/UseASubscriptionInAnEventHandler/\")))\n\n(defn subscribe\n  ([query]\n   (warn-when-not-reactive)\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (warn-when-not-reactive)\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n(defn reg-sub\n  [query-id & args]\n  (let [err-header       (str \"re-frame: reg-sub for \" query-id \", \")\n        [input-args      ;; may be empty, or one signal fn, or pairs of  :<- / vector\n         computation-fn] (let [[op f :as comp-f] (take-last 2 args)]\n                           (if (or (= 1 (count comp-f))\n                                   (fn? op)\n                                   (vector? op))\n                             [(butlast args) (last args)]\n                             (let [args (drop-last 2 args)]\n                               (case op\n                                 ;; return a function that calls the computation fn\n                                 ;;  on the input signal, removing the query vector\n                                 :->\n                                 [args (fn [db _]\n                                         (f db))]\n                                 ;; return a function that calls the computation fn\n                                 ;;  on the input signal and the data in the query vector\n                                 ;;  that is not the query-id\n                                 :=>\n                                 [args (fn [db [_ & qs]]\n                                         (apply f db qs))]\n                                 ;; an incorrect keyword was passed\n                                 (console :error err-header \"expected :-> or :=> as second to last argument, got:\" op)))))\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map second pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec nil)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n"]}