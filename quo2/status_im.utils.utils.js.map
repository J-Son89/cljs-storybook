{"version":3,"sources":["status_im/utils/utils.cljs"],"mappings":"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","names":["var_args","G__18687","status-im.utils.utils/show-popup","js/Error","title","content","on-dismiss","js/shadow.js.shim.module$react_native","cljs.core/clj->js","cljs.core/PersistentVector","cljs.core/merge","p__18695","map__18696","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","status-im.utils.utils/show-confirmation","confirm-button-text","on-accept","on-cancel","cancel-button-text","extra-options","cljs.core/concat","or__4126__auto__","utils.i18n/label","G__18707","status-im.utils.utils/show-question","status-im.utils.utils/set-timeout","cb","ms","js/shadow.js.shim.module$react_native_background_timer.default","status-im.utils.utils/clear-timeout","id","status-im.utils.utils/set-interval","status-im.utils.utils/clear-interval","re-frame.core/reg-fx","params","seq__18715","cljs.core/seq","chunk__18716","count__18717","i__18718","map__18742","cljs.core/-nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__18755","cljs.core/first","cljs.core/next","dispatch","and__4115__auto__","re-frame.core/dispatch","ids","seq__18762","chunk__18763","count__18764","i__18765","status-im.utils.utils/get-shortened-address","address","cljs.core/subs","status-im.utils.utils/get-shortened-checksum-address","status-im.ethereum.eip55/address->checksum","status-im.ethereum.core/normalized-hex","status-im.utils.utils/format-decimals","amount","places","decimal-part","clojure.string/split","goog.string/format","status-im.utils.utils/safe-trim","s","clojure.string/trim","status-im.utils.utils/safe-replace","m","r","clojure.string/replace","status-im.utils.utils/safe-nth","coll","index","cljs.core/nth","status-im.utils.utils/svg?","some-string","clojure.string/ends-with?","status-im.utils.utils/exclude-svg-resources","lst","cljs.core/remove"],"sourcesContent":["(ns status-im.utils.utils\n  (:require [\"react-native\" :as react-native]\n            [\"react-native-background-timer\" :default background-timer]\n            [clojure.string :as string]\n            [goog.string :as gstring]\n            [re-frame.core :as re-frame]\n            [status-im.ethereum.core :as ethereum]\n            [status-im.ethereum.eip55 :as eip55]\n            [utils.i18n :as i18n]))\n\n;;TODO (14/11/22 flexsurfer) .-Alert usage code has been moved to the status-im2 namespace, we keep this\n;;only for old (status 1.0) code,\n;; can be removed with old code later\n(defn show-popup\n  ([title content]\n   (show-popup title content nil))\n  ([title content on-dismiss]\n   (.alert (.-Alert react-native)\n           title\n           content\n           (clj->js\n            (vector (merge {:text                \"OK\"\n                            :style               \"cancel\"\n                            :accessibility-label :cancel-button}\n                           (when on-dismiss {:onPress on-dismiss}))))\n           (when on-dismiss\n             (clj->js {:cancelable false})))))\n\n(defn show-confirmation\n  [{:keys [title content confirm-button-text on-accept on-cancel cancel-button-text\n           extra-options]}]\n  (.alert (.-Alert react-native)\n          title\n          content\n          ;; Styles are only relevant on iOS. On Android first button is 'neutral' and second is\n          ;; 'positive'\n          (clj->js\n           (concat\n            (vector (merge {:text                (or cancel-button-text (i18n/label :t/cancel))\n                            :style               \"cancel\"\n                            :accessibility-label :cancel-button}\n                           (when on-cancel {:onPress on-cancel}))\n                    {:text                (or confirm-button-text (i18n/label :t/ok))\n                     :onPress             on-accept\n                     :style               \"default\"\n                     :accessibility-label :confirm-button})\n            (or extra-options nil)))\n          #js {:cancelable false}))\n\n(defn show-question\n  ([title content on-accept]\n   (show-question title content on-accept nil))\n  ([title content on-accept on-cancel]\n   (.alert (.-Alert react-native)\n           title\n           content\n           (clj->js\n            (vector (merge {:text                (i18n/label :t/no)\n                            :accessibility-label :no-button}\n                           (when on-cancel {:onPress on-cancel}))\n                    {:text                (i18n/label :t/yes)\n                     :onPress             on-accept\n                     :accessibility-label :yes-button})))))\n\n;;TODO (14/11/22 flexsurfer) background-timer usage code has been moved to the status-im2 namespace, we\n;;keep this only for old (status 1.0) code,\n;; can be removed with old code later\n\n(defn set-timeout\n  [cb ms]\n  (.setTimeout background-timer cb ms))\n\n(defn clear-timeout\n  [id]\n  (.clearTimeout background-timer id))\n\n(defn set-interval\n  [cb ms]\n  (.setInterval background-timer cb ms))\n\n(defn clear-interval\n  [id]\n  (.clearInterval background-timer id))\n\n(re-frame/reg-fx\n :utils/dispatch-later\n (fn [params]\n   (doseq [{:keys [ms dispatch]} params]\n     (when (and ms dispatch)\n       (set-timeout #(re-frame/dispatch dispatch) ms)))))\n\n(re-frame/reg-fx\n ::clear-timeouts\n (fn [ids]\n   (doseq [id ids]\n     (when id\n       (clear-timeout id)))))\n\n(defn get-shortened-address\n  \"Takes first and last 4 digits from address including leading 0x\n  and adds unicode ellipsis in between\"\n  [address]\n  (when address\n    (str (subs address 0 6) \"\\u2026\" (subs address (- (count address) 3) (count address)))))\n\n(defn get-shortened-checksum-address\n  [address]\n  (when address\n    (get-shortened-address (eip55/address->checksum (ethereum/normalized-hex address)))))\n\n;;TODO (14/11/22 flexsurfer) haven't moved yet\n(defn format-decimals\n  [amount places]\n  (let [decimal-part (get (string/split (str amount) \".\") 1)]\n    (if (> (count decimal-part) places)\n      (gstring/format (str \"%.\" places \"f\") amount)\n      (or (str amount) 0))))\n\n(defn safe-trim\n  [s]\n  (when (string? s)\n    (string/trim s)))\n\n(defn safe-replace\n  [s m r]\n  (when (string? s)\n    (string/replace s m r)))\n\n(defn safe-nth\n  [coll index]\n  (when (number? index)\n    (nth coll index)))\n\n(defn svg?\n  [some-string]\n  (string/ends-with? some-string \".svg\"))\n\n(defn exclude-svg-resources\n  [lst]\n  (remove svg? lst))\n"]}