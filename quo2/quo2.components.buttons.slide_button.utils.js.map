{"version":3,"sources":["quo2/components/buttons/slide_button/utils.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAAA,AAAMA,AAGHC,AAAUC;AAHb,AAIE,AAAA,AAAA,AAAA,AAAMC,AAAsB,AAAA,AAAA,AAACC,AAA6BF,AAC9B,AAAA,AAAA,AAAA,AAAA,AAACE,AAA6BF;AAD1D,AAEE,AAACD,AAAUE;;AAEf,AAAA,AAAME,AACHC,AAAMC,AAAUC;AADnB,AAEE,AACE,AAAGF,AAAMC;AAAWA;;AADtB,AAEE,AAAGD,AAAME;AAAWA;;AAFtB,AAGsBF;;;;;AAExB;;;;AAAA,AAAMG,AAGHC,AAAYC;AAHf,AAIE,AAAMC,AAAe,AAAA,AAAGC;AAAxB,AACE,AAAA,AAAGH,AAAYE,AAAeD;;AAElC,AAAA,AAAMG,AACHJ,AAAYK,AAAKC;AADpB,AAEE,AAAMC,AAAmB,AAAAC,AAAMH;AAANG,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACSE;;;AADT;AAESC;;;;AACPA;;;;AAH3B,AAIMJ,AACA,AAAA,AAAA,AAACK,AAAqB,AAACb,AACAC,AACA,AAAA,AAAQO,AAC/B,AAACM,AAAIP","names":["quo2.components.buttons.slide-button.utils/slider-color","color-key","customization-color","colors-by-key","quo2.foundations.colors/custom-color-by-theme","quo2.components.buttons.slide-button.utils/clamp-value","value","min-value","max-value","quo2.components.buttons.slide-button.utils/calc-usable-track","track-width","thumb-size","double-padding","quo2.components.buttons.slide-button.constants/track-padding","quo2.components.buttons.slide-button.utils/get-dimensions","size","dimension-key","default-dimensions","G__16686","cljs.core/Keyword","quo2.components.buttons.slide-button.constants/small-dimensions","quo2.components.buttons.slide-button.constants/large-dimensions","cljs.core/merge","cljs.core/get"],"sourcesContent":["(ns quo2.components.buttons.slide-button.utils\n  (:require\n    [quo2.components.buttons.slide-button.constants :as constants]\n    [quo2.foundations.colors :as colors]))\n\n(defn slider-color\n  \"- `color-key`               `:main`/`:track`\n   - `customization-color` Customization color\"\n  [color-key customization-color]\n  (let [colors-by-key {:main  (colors/custom-color-by-theme customization-color 50 60)\n                       :track (colors/custom-color-by-theme customization-color 50 60 10 10)}]\n    (color-key colors-by-key)))\n\n(defn clamp-value\n  [value min-value max-value]\n  (cond\n    (< value min-value) min-value\n    (> value max-value) max-value\n    :else               value))\n\n(defn calc-usable-track\n  \"Calculate the track section in which the\n  thumb can move in. Mostly used for interpolations.\"\n  [track-width thumb-size]\n  (let [double-padding (* constants/track-padding 2)]\n    (- track-width double-padding thumb-size)))\n\n(defn get-dimensions\n  [track-width size dimension-key]\n  (let [default-dimensions (case size\n                             :small constants/small-dimensions\n                             :large constants/large-dimensions\n                             constants/large-dimensions)]\n    (-> default-dimensions\n        (merge {:usable-track (calc-usable-track\n                               track-width\n                               (:thumb default-dimensions))})\n        (get dimension-key))))\n"]}