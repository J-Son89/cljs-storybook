{"version":3,"sources":["quo2/components/messages/gap.cljs"],"mappings":"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","names":["quo2.components.messages.gap/themes","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-50","quo2.foundations.colors/neutral-5","quo2.foundations.colors/neutral-60","quo2.foundations.colors/neutral-95","quo2.components.messages.gap/get-color","key","cljs.core/get-in","quo2.theme/get-theme","quo2.components.messages.gap/ui-images","js/require","quo2.components.messages.gap/get-image","p__17200","map__17201","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.messages.gap/hborder","type","style","react-native.core/image","cljs.core/merge","cljs.core/=","quo2.components.messages.gap/vborder","body-height","cljs.core/deref","height","img","and__4115__auto__","quo2.components.messages.gap/circle","react-native.core/view","quo2.components.messages.gap/timestamp","str","quo2.components.markdown.text/text","quo2.components.messages.gap/info-button","on-press","react-native.core/touchable-without-feedback","quo2.components.icon/icon","quo2.components.messages.gap/timeline","quo2.components.messages.gap/body","timestamp-far","timestamp-near","on-info-button-pressed","warning-label","p__17227","map__17228","quo2.components.messages.gap/gap","reagent.core/atom","p1__17223#","cljs.core/reset!","target-obj-17239","*runtime-state*-orig-val__17244","oops.state/*runtime-state*","*runtime-state*-temp-val__17245","oops.state/prepare-state","js/Error","next-obj-17241","oops.core/validate-object-access-dynamically","next-obj-17242","next-obj-17243"],"sourcesContent":["(ns quo2.components.messages.gap\n  (:require [oops.core :refer [oget]]\n            [quo2.components.icon :as icon]\n            [quo2.components.markdown.text :as text]\n            [quo2.foundations.colors :as colors]\n            [quo2.theme :as theme]\n            [react-native.core :as rn]\n            [reagent.core :as reagent]))\n\n;;; helpers\n(def themes\n  {:light {:icon       colors/neutral-40\n           :time       colors/neutral-50\n           :background colors/neutral-5}\n   :dark  {:icon       colors/neutral-60\n           :time       colors/neutral-40\n           :background colors/neutral-95}})\n\n(defn get-color\n  [key]\n  (get-in themes [(theme/get-theme) key]))\n\n(def ui-images\n  {:light {:horizontal (js/require \"../resources/images/ui/message-gap-hborder-light.png\")\n           :vertical   (js/require \"../resources/images/ui/message-gap-vborder-light.png\")\n           :circles    (js/require \"../resources/images/ui/message-gap-circle-bg-light.png\")}\n   :dark  {:horizontal (js/require \"../resources/images/ui/message-gap-hborder-dark.png\")\n           :circles    (js/require \"../resources/images/ui/message-gap-circle-bg-dark.png\")}})\n\n(defn get-image\n  [key]\n  (get-in ui-images [(theme/get-theme) key]))\n\n;;; components\n;;;; borders\n(defn hborder\n  [{:keys [type style]}]\n  [rn/image\n   {:source      (get-image :horizontal)\n    :resize-mode :repeat\n    :style       (merge {:position           :absolute\n                         :left               0\n                         :padding-horizontal 4\n                         :overflow           :hidden\n                         :width              \"110%\"\n                         :height             8\n                         :margin-left        -4}\n                        (if (= type :top)\n                          {:top 0}\n                          {:transform [{:rotateZ \"180deg\"}]\n                           :bottom    0})\n                        style)}])\n\n(defn vborder\n  [type body-height]\n  (let [height @body-height\n        img    (get-image :vertical)]\n    (when (and img height)\n      [rn/image\n       {:source      img\n        :resize-mode :repeat\n        :style       (merge\n                      {:position :absolute\n                       :top      4\n                       :height   (- height 8)\n                       :width    4}\n                      (if (= type :left)\n                        {:left 0}\n                        {:transform [{:rotate \"180deg\"}]\n                         :right     0}))}])))\n\n;;;; others\n(defn circle\n  []\n  [rn/view\n   {:width         9\n    :height        9\n    :border-width  1\n    :margin        4\n    :flex          0\n    :border-color  (get-color :icon)\n    :border-radius 50}])\n\n(defn timestamp\n  [str]\n  [text/text\n   {:size  :label\n    :style {:text-transform :none\n            :color          (get-color :time)}} str])\n\n(defn info-button\n  [on-press]\n  [rn/touchable-without-feedback\n   {:on-press on-press}\n   [icon/icon \"message-gap-info\" {:size 12 :no-color true :container-style {:padding 4}}]])\n\n;;;; timeline/body\n(defn timeline\n  []\n  [rn/view\n   {:flex            0\n    :margin-right    20\n    :align-items     :center\n    :width           9\n    :justify-content :space-between}\n   [circle]\n   [rn/image {:style {:flex 1} :source (get-image :circles) :resize-mode :repeat}]\n   [circle]])\n\n(defn body\n  [timestamp-far timestamp-near on-info-button-pressed on-press warning-label]\n  [rn/view {:flex 1}\n   [rn/view\n    {:flex-direction  :row\n     :align-items     :center\n     :justify-content :space-between\n     :margin-right    2}\n    [timestamp timestamp-far]\n    (when on-info-button-pressed [info-button on-info-button-pressed])]\n\n   [rn/touchable-without-feedback\n    {:style    {:flex 1 :margin-top 16 :margin-bottom 20}\n     :on-press #(when on-press (on-press))}\n    [text/text warning-label]]\n\n   [timestamp timestamp-near]])\n\n;;; main\n(defn gap\n  \"if `gap-ids` and `chat-id` are provided, press the main text area to fetch messages\n  if `on-info-button-pressed` fn is provided, the info button will show up and is pressable\"\n  [{:keys [timestamp-far\n           timestamp-near\n           on-info-button-pressed\n           style\n           on-press\n           warning-label]}]\n  (let [body-height (reagent/atom nil)]\n    (fn []\n      [rn/view\n       {:on-layout #(reset! body-height (oget % \"nativeEvent.layout.height\"))\n        :overflow  :hidden\n        :flex      1}\n       [hborder {:type :top}]\n       [hborder {:type :bottom}]\n       [rn/view\n        (merge {:width            \"100%\"\n                :background-color (get-color :background)\n                :flex-direction   :row\n                :padding          20\n                :padding-left     31\n                :margin-vertical  4}\n               style)\n\n        [timeline]\n        [body timestamp-far timestamp-near on-info-button-pressed on-press warning-label]]\n       [vborder :left body-height]\n       [vborder :right body-height]])))\n"]}