{"version":3,"sources":["quo2/components/inputs/search_input/view.cljs"],"mappings":"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","names":["quo2.components.inputs.search-input.view/tag-separator","react-native.core/view","quo2.components.inputs.search-input.style/tag-separator","quo2.components.inputs.search-input.view/inner-tags","tags-coll","cljs.core/into","quo2.components.inputs.search-input.style/tag-container","cljs.core/interpose","p__17094","map__17096","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.inputs.search-input.view/clear-button","on-press","blur?","override-theme","react-native.core/touchable-opacity","quo2.components.inputs.search-input.style/clear-icon-container","quo2.components.icon/icon","quo2.components.inputs.search-input.style/clear-icon","quo2.components.inputs.search-input.view/handle-backspace","event","scroll-view-ref","cljs.core/=","target-obj-17125","*runtime-state*-orig-val__17128","oops.state/*runtime-state*","*runtime-state*-temp-val__17129","oops.state/prepare-state","js/Error","next-obj-17126","oops.core/validate-object-access-dynamically","next-obj-17127","quo2.components.inputs.search-input.view/props-to-remove","quo2.components.inputs.search-input.view/add-children","text-input","children","cljs.core/seq","p__17137","map__17138","quo2.components.inputs.search-input.view/search-input","value","state","reagent.core/atom","set-active","cljs.core/reset!","set-default","cljs.core/atom","use-value?","cljs.core/boolean","p__17141","map__17142","tags","disabled?","on-change-text","customization-color","on-clear","on-focus","on-blur","props","p1__17134#","clean-props","cljs.core/dissoc","quo2.components.inputs.search-input.style/container","react-native.core/scroll-view","quo2.components.inputs.search-input.style/scroll-container","quo2.components.inputs.search-input.style/scroll-content","react-native.core/text-input","G__17146","p1__17135#","quo2.components.inputs.search-input.style/input-text","quo2.components.inputs.search-input.style/cursor","cljs.core/deref","quo2.components.inputs.search-input.style/placeholder-color","cljs.core/not","quo2.foundations.colors/theme-colors","new-text","reagent.core/flush","cljs.core/assoc","cljs.core/merge"],"sourcesContent":["(ns quo2.components.inputs.search-input.view\n  (:require [oops.core :as oops]\n            [quo2.components.icon :as icon]\n            [quo2.components.inputs.search-input.style :as style]\n            [react-native.core :as rn]\n            [reagent.core :as reagent]\n            [quo2.foundations.colors :as colors]))\n\n(def ^:private tag-separator [rn/view {:style style/tag-separator}])\n\n(defn- inner-tags\n  [tags-coll]\n  (into [rn/view {:style style/tag-container}]\n        (interpose tag-separator)\n        tags-coll))\n\n(defn- clear-button\n  [{:keys [on-press blur? override-theme]}]\n  [rn/touchable-opacity\n   {:style    style/clear-icon-container\n    :on-press on-press}\n   [icon/icon :i/clear\n    {:color (style/clear-icon blur? override-theme)\n     :size  20}]])\n\n(defn- handle-backspace\n  [event ^js/Object scroll-view-ref]\n  (when (and (= (oops/oget event \"nativeEvent.key\") \"Backspace\")\n             scroll-view-ref)\n    (.scrollToEnd scroll-view-ref #js {:animated false})))\n\n(def ^:private props-to-remove\n  [:cursor-color :placeholder-text-color :editable :on-change-text :on-focus\n   :on-blur :on-clear :value :tags :disabled? :blur? :customization-color :override-theme])\n\n(defn- add-children\n  [text-input children]\n  (if (seq children)\n    (into text-input children)\n    text-input))\n\n(defn search-input\n  [{:keys [value]}]\n  (let [state           (reagent/atom :default)\n        set-active      #(reset! state :active)\n        set-default     #(reset! state :default)\n        scroll-view-ref (atom nil)\n        use-value?      (boolean value)]\n    (fn [{:keys [value tags disabled? blur? on-change-text customization-color\n                 on-clear on-focus on-blur override-theme]\n          :or   {customization-color :blue}\n          :as   props}\n         & children]\n      (let [clean-props (apply dissoc props props-to-remove)]\n        [rn/view {:style style/container}\n         [rn/scroll-view\n          {:ref                               #(reset! scroll-view-ref %)\n           :style                             style/scroll-container\n           :content-container-style           style/scroll-content\n           :horizontal                        true\n           :shows-horizontal-scroll-indicator false}\n          (when (seq tags)\n            [inner-tags tags])\n\n          (add-children\n           [rn/text-input\n            (cond-> {:style                  (style/input-text disabled?)\n                     :cursor-color           (style/cursor customization-color override-theme)\n                     :placeholder-text-color (style/placeholder-color @state blur? override-theme)\n                     :editable               (not disabled?)\n                     :on-key-press           #(handle-backspace % @scroll-view-ref)\n                     :keyboard-appearance    (colors/theme-colors :light :dark override-theme)\n                     :on-change-text         (fn [new-text]\n                                               (when on-change-text\n                                                 (on-change-text new-text))\n                                               (reagent/flush))\n                     :on-focus               (fn []\n                                               (set-active)\n                                               (when on-focus (on-focus)))\n                     :on-blur                (fn []\n                                               (set-default)\n                                               (when on-blur (on-blur)))}\n              use-value?        (assoc :value value)\n              (seq clean-props) (merge clean-props))]\n           (when-not use-value? children))]\n\n         (when (or (seq value) (seq children))\n           [clear-button\n            {:on-press       on-clear\n             :blur?          blur?\n             :override-theme override-theme}])]))))\n"]}