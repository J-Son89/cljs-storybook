{"version":3,"sources":["quo2/components/inputs/input/style.cljs"],"mappings":"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","names":["quo2.components.inputs.input.style/variants-colors","blur?","override-theme","quo2.foundations.colors/theme-colors","quo2.foundations.colors/neutral-80-opa-40","quo2.foundations.colors/white-opa-40","quo2.foundations.colors/neutral-80-opa-70","quo2.foundations.colors/white-opa-70","quo2.foundations.colors/neutral-80-opa-30","quo2.foundations.colors/white-opa-10","quo2.foundations.colors/neutral-100","quo2.foundations.colors/custom-color","quo2.foundations.colors/white","quo2.foundations.colors/neutral-50","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-30","quo2.foundations.colors/neutral-70","quo2.foundations.colors/neutral-60","quo2.components.inputs.input.style/status-colors","status","G__17025","cljs.core/Keyword","quo2.foundations.colors/neutral-80-opa-20","quo2.foundations.colors/white-opa-20","quo2.foundations.colors/danger-opa-40","quo2.foundations.colors/neutral-80-opa-10","G__17033","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-80","quo2.components.inputs.input.style/input-container","colors-by-status","small?","disabled?","quo2.components.inputs.input.style/left-icon-container","quo2.components.inputs.input.style/icon","colors-by-variant","quo2.components.inputs.input.style/input","multiple-lines?","base-props","cljs.core/assoc","quo2.components.markdown.text/text-style","quo2.components.inputs.input.style/right-icon-touchable-area","quo2.components.inputs.input.style/password-icon","variant-colors","quo2.components.inputs.input.style/clear-icon","quo2.components.inputs.input.style/texts-container","quo2.components.inputs.input.style/label-container","quo2.components.inputs.input.style/label-color","quo2.components.inputs.input.style/counter-container","quo2.components.inputs.input.style/counter-color","current-chars","char-limit","quo2.foundations.colors/danger-60","quo2.components.inputs.input.style/button","quo2.components.inputs.input.style/button-text"],"sourcesContent":["(ns quo2.components.inputs.input.style\n  (:require [quo2.components.markdown.text :as text]\n            [quo2.foundations.colors :as colors]))\n\n(defn variants-colors\n  [blur? override-theme]\n  (if blur?\n    {:label         (colors/theme-colors colors/neutral-80-opa-40 colors/white-opa-40 override-theme)\n     :icon          (colors/theme-colors colors/neutral-80-opa-70 colors/white-opa-70 override-theme)\n     :button-border (colors/theme-colors colors/neutral-80-opa-30 colors/white-opa-10 override-theme)\n     :password-icon (colors/theme-colors colors/neutral-100 colors/white-opa-70 override-theme)\n     :clear-icon    (colors/theme-colors colors/neutral-80-opa-30 colors/white-opa-10 override-theme)\n     :cursor        (colors/theme-colors (colors/custom-color :blue 50)\n                                         colors/white\n                                         override-theme)}\n    {:label         (colors/theme-colors colors/neutral-50 colors/neutral-40 override-theme)\n     :icon          (colors/theme-colors colors/neutral-50 colors/neutral-40 override-theme)\n     :button-border (colors/theme-colors colors/neutral-30 colors/neutral-70 override-theme)\n     :clear-icon    (colors/theme-colors colors/neutral-40 colors/neutral-60 override-theme)\n     :password-icon (colors/theme-colors colors/neutral-50 colors/white override-theme)\n     :cursor        (colors/theme-colors (colors/custom-color :blue 50)\n                                         (colors/custom-color :blue 60)\n                                         override-theme)}))\n\n(defn status-colors\n  [status blur? override-theme]\n  (if blur?\n    (case status\n      :focus\n      {:border-color (colors/theme-colors colors/neutral-80-opa-20 colors/white-opa-40 override-theme)\n       :placeholder  (colors/theme-colors colors/neutral-80-opa-20 colors/white-opa-20 override-theme)\n       :text         (colors/theme-colors colors/neutral-100 colors/white override-theme)}\n      :error\n      {:border-color (colors/theme-colors colors/danger-opa-40 colors/danger-opa-40 override-theme)\n       :placeholder  (colors/theme-colors colors/neutral-80-opa-40 colors/white-opa-40 override-theme)\n       :text         (colors/theme-colors colors/neutral-100 colors/white override-theme)}\n      :disabled\n      {:border-color (colors/theme-colors colors/neutral-80-opa-10 colors/white-opa-10 override-theme)\n       :placeholder  (colors/theme-colors colors/neutral-80-opa-30 colors/white-opa-20 override-theme)\n       :text         (colors/theme-colors colors/neutral-80-opa-30 colors/white-opa-20 override-theme)}\n      ;; :default\n      {:border-color (colors/theme-colors colors/neutral-80-opa-10 colors/white-opa-10 override-theme)\n       :placeholder  (colors/theme-colors colors/neutral-80-opa-40 colors/white-opa-40 override-theme)\n       :text         (colors/theme-colors colors/neutral-100 colors/white override-theme)})\n    (case status\n      :focus\n      {:border-color (colors/theme-colors colors/neutral-40 colors/neutral-60 override-theme)\n       :placeholder  (colors/theme-colors colors/neutral-30 colors/neutral-60 override-theme)\n       :text         (colors/theme-colors colors/neutral-100 colors/white override-theme)}\n      :error\n      {:border-color (colors/theme-colors colors/danger-opa-40 colors/danger-opa-40 override-theme)\n       :placeholder  (colors/theme-colors colors/neutral-40 colors/white-opa-40 override-theme)\n       :text         (colors/theme-colors colors/neutral-100 colors/white override-theme)}\n      :disabled\n      {:border-color (colors/theme-colors colors/neutral-20 colors/neutral-80 override-theme)\n       :placeholder  (colors/theme-colors colors/neutral-40 colors/neutral-40 override-theme)\n       :text         (colors/theme-colors colors/neutral-40 colors/neutral-40 override-theme)}\n      ;; :default\n      {:border-color (colors/theme-colors colors/neutral-20 colors/neutral-80 override-theme)\n       :placeholder  (colors/theme-colors colors/neutral-40 colors/neutral-50 override-theme)\n       :text         (colors/theme-colors colors/neutral-100 colors/white override-theme)})))\n\n(defn input-container\n  [colors-by-status small? disabled?]\n  {:flex-direction     :row\n   :padding-horizontal 8\n   :border-width       1\n   :border-color       (:border-color colors-by-status)\n   :border-radius      (if small? 10 12)\n   :opacity            (if disabled? 0.3 1)})\n\n(defn left-icon-container\n  [small?]\n  {:margin-left (if small? 0 4)\n   :margin-top  (if small? 5 9)\n   :height      20\n   :width       20})\n\n(defn icon\n  [colors-by-variant]\n  {:color (:icon colors-by-variant)\n   :size  20})\n\n(defn input\n  [colors-by-status small? multiple-lines?]\n  (let [base-props (assoc (text/text-style {:size :paragraph-1 :weight :regular})\n                          :flex             1\n                          :padding-right    0\n                          :padding-left     (if small? 4 8)\n                          :padding-vertical (if small? 4 8)\n                          :color            (:text colors-by-status))]\n    (if multiple-lines?\n      (assoc base-props :text-align-vertical :top)\n      (assoc base-props :height (if small? 30 38) :line-height nil))))\n\n(defn right-icon-touchable-area\n  [small?]\n  {:margin-left   (if small? 4 8)\n   :padding-right (if small? 0 4)\n   :padding-top   (if small? 5 9)})\n\n(defn password-icon\n  [variant-colors]\n  {:size  20\n   :color (:password-icon variant-colors)})\n\n(defn clear-icon\n  [variant-colors]\n  {:size  20\n   :color (:clear-icon variant-colors)})\n\n(def texts-container\n  {:flex-direction :row\n   :height         18\n   :margin-bottom  8})\n\n(def label-container {:flex 1})\n\n(defn label-color\n  [variant-colors]\n  {:color (:label variant-colors)})\n\n(def counter-container\n  {:flex        1\n   :align-items :flex-end})\n\n(defn counter-color\n  [current-chars char-limit variant-colors]\n  {:color (if (> current-chars char-limit)\n            colors/danger-60\n            (:label variant-colors))})\n\n(defn button\n  [colors-by-variant small?]\n  {:justify-content    :center\n   :align-items        :center\n   :height             24\n   :border-width       1\n   :border-color       (:button-border colors-by-variant)\n   :border-radius      8\n   :margin-vertical    (if small? 3 7)\n   :margin-left        4\n   :margin-right       (if small? -4 0)\n   :padding-horizontal 7\n   :padding-top        1.5\n   :padding-bottom     2.5})\n\n(defn button-text\n  [colors-by-status]\n  {:color (:text colors-by-status)})\n"]}