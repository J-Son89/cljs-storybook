{"version":3,"sources":["taoensso/timbre.cljs"],"mappings":"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","names":["cljs.core/vector?","taoensso.encore/encore-version","taoensso.encore/assert-min-encore-version","var_args","G__15980","taoensso.timbre/default-output-fn","js/Error","data","opts","map__15983","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","map__15984","no-stacktrace?","stacktrace-fonts","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","or__4126__auto__","cljs.core/force","temp__5735__auto__","err","taoensso.timbre/stacktrace","taoensso.timbre/println-appender","taoensso.timbre.appenders.core/println-appender","taoensso.timbre/console-appender","taoensso.timbre.appenders.core/console-appender","taoensso.timbre/example-config","js/taoensso","js/taoensso.timbre","js/taoensso.timbre.*config*","taoensso.timbre/*config*","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","taoensso.timbre/swap-config!","seq16003","G__16004","cljs.core/first","cljs.core/next","self__4723__auto__","f","args","taoensso.timbre/set-config!","m","_old","taoensso.timbre/merge-config!","old","taoensso.encore/nested-merge","taoensso.timbre/set-level!","cljs.core/assoc","taoensso.timbre/-levels-vec","taoensso.timbre/-levels-set","cljs.core/set","taoensso.timbre/-levels-map","cljs.core/zipmap","cljs.core/range","taoensso.timbre/valid-level?","x","taoensso.timbre/valid-level","cljs.core/ex-info","taoensso.timbre/level>=","y","taoensso.timbre/-compile-ns-filter","taoensso.encore/memoize_","taoensso.encore/compile-ns-filter","taoensso.timbre/ns-filter","whitelist","blacklist","?ns","G__16010","taoensso.timbre/may-log?","?config","config","min-level","cljs.core/boolean","taoensso.timbre/str-join","xs","taoensso.encore/str-join","cljs.core/map","taoensso.encore/nil->str","cljs.core/record?","cljs.core/pr-str","js/taoensso.timbre.get-rate-limiter","taoensso.timbre/get-rate-limiter","appender-id","specs","taoensso.encore/limiter","taoensso.timbre/*context*","taoensso.timbre/vrest","v","cljs.core/count","cljs.core/subvec","taoensso.timbre/parse-vargs","msg-type","vargs","vec__16019","cljs.core/nth","auto-error?","taoensso.encore/kw-identical?","fmt-msg?","v0","and__4115__auto__","taoensso.encore/error?","?meta","?msg-fmt","vec__16024","cljs.core/map?","cljs.core/meta","cljs.core/dissoc","vec__16032","G__16041","taoensso.timbre/-log!","vargs_","?base-data","callsite-id","cljs.core/deref","vec__16045","instant","taoensso.encore/now-dt","context","cljs.core/conj","cljs.core/Delay","?data","cljs.core/reduce","acc","mf","result","cljs.core/reduced","map__16053","taoensso.encore/assoc-nx","G__16056","cljs.core/=","taoensso.encore/format*","cljs.core/hash","output-fn1","cljs.core/reduce-kv","_","id","appender","rate-limit-specs","rate-limit-okay?","cljs.core/empty?","rl-fn","cljs.core/not","map__16059","async?","apfn","output-fn","output_","temp__5733__auto__","mfn","G__16064","taoensso.timbre/console-?appender","taoensso.timbre/ordered-levels","taoensso.timbre/log?","taoensso.timbre/logging-enabled?","compile-time-ns","taoensso.timbre/str-println","seq16068","self__4724__auto__","cljs.core/seq"],"sourcesContent":["(ns taoensso.timbre\n  \"Simple, flexible logging for Clojure/Script. No XML.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                               \n                                    \n                                                      \n                                                       \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer [] :refer-macros [have have?]]\n   [taoensso.timbre.appenders.core :as core-appenders])\n\n        \n  (:require-macros\n   [taoensso.timbre :as timbre-macros :refer []]))\n\n(if (vector? taoensso.encore/encore-version)\n  (enc/assert-min-encore-version [2 87 0])\n  (enc/assert-min-encore-version  2.87))\n\n;;;; Config\n\n     \n                           \n                               \n                                           \n                                                    \n                                                                                 \n\n(declare stacktrace)\n(defn default-output-fn\n  \"Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.\"\n  ([     data] (default-output-fn nil data))\n  ([opts data] ; For partials\n   (let [{:keys [no-stacktrace? stacktrace-fonts]} opts\n         {:keys [level ?err #_vargs msg_ ?ns-str ?file hostname_\n                 timestamp_ ?line]} data]\n     (str\n                                         \n                                         \n       (str/upper-case (name level))  \" \"\n       \"[\" (or ?ns-str ?file \"?\") \":\" (or ?line \"?\") \"] - \"\n       (force msg_)\n       (when-not no-stacktrace?\n         (when-let [err ?err]\n           (str \"\\n\" (stacktrace err opts))))))))\n\n;;; Alias core appenders here for user convenience\n(declare default-err default-out)\n                                                             \n                                                          \n       (def println-appender core-appenders/println-appender)\n       (def console-appender core-appenders/console-appender)\n\n(def example-config\n  \"Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string (clj only)\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`.\"\n\n  {:level :debug  ; e/o #{:trace :debug :info :warn :error :fatal :report}\n\n   ;; TODO Consider switching to `:ns-pattern` to match Tufte?\n   ;; Control log filtering by namespaces/patterns. Useful for turning off\n   ;; logging in noisy libraries, etc.:\n   :ns-whitelist  [] #_[\"my-app.foo-ns\"]\n   :ns-blacklist  [] #_[\"taoensso.*\"]\n\n   :middleware [] ; (fns [data]) -> ?data, applied left->right\n\n                        \n                                ; {:pattern _ :locale _ :timezone _}\n\n   :output-fn default-output-fn ; (fn [data]) -> string\n\n   :appenders\n        \n                                               \n                                                         \n     \n\n         \n   {;; :println (println-appender {})\n    :console (console-appender {})}})\n\n(comment\n  (set-config! example-config)\n  (infof \"Hello %s\" \"world :-)\"))\n\n(enc/defonce ^:dynamic *config* \"See `example-config` for info.\" example-config)\n                                                                                  \n                                            \n                                                                   \n\n(defn swap-config! [f & args]\n         (set!                   *config* (apply f *config* args))\n                                                 )\n\n(defn   set-config! [m] (swap-config! (fn [_old] m)))\n(defn merge-config! [m] (swap-config! (fn [old] (enc/nested-merge old m))))\n\n(defn     set-level! [level] (swap-config! (fn [m] (assoc m :level level))))\n                                   \n                                                              \n\n(comment (set-level! :info) *config*)\n\n;;;; Levels\n;; Note that for historical reasons we don't make a distinction\n;; between form \"level\"s and config \"min-level\"s.\n\n(def ^:const -levels-vec [:trace :debug :info :warn :error :fatal :report])\n(def ^:const -levels-set (set    -levels-vec))\n(def ^:const -levels-map (zipmap -levels-vec (next (range))))\n\n(defn valid-level? [x] (if (-levels-set x) true false))\n(defn valid-level  [x]\n  (or (-levels-set x)\n      (throw (ex-info \"Invalid Timbre logging level\" {:given x}))))\n\n(defn level>= [x y]\n  (>= ^long (-levels-map (valid-level x))\n      ^long (-levels-map (valid-level y))))\n\n(comment (qb 1e6 (level>= :info :debug))) ; 81.25\n\n;;;; Namespace filtering\n\n(def ^:private -compile-ns-filter (enc/memoize_ enc/compile-ns-filter))\n(def ^:private          ns-filter\n  \"Returns true iff given ns passes white/black lists.\"\n  (enc/memoize_\n    (fn [whitelist blacklist ?ns]\n      ((-compile-ns-filter whitelist blacklist) ?ns))))\n\n(comment\n  (qb 1e6 (ns-filter [\"foo.*\"] [\"foo.baz\"] \"foo.bar\")) ; 238.33\n  (ns-filter nil nil \"\")\n  (ns-filter nil nil nil))\n\n;;;; Combo filtering\n\n     \n                         \n                                        \n                                             \n           \n\n     \n                                 \n                                                        \n                                                              \n                               \n                                                                    \n\n                               \n                                                           \n                            \n\n     \n                                     \n                                                             \n       \n                                 \n                                                                                \n\n                                      \n\n                         \n                                                                                      \n                                                                                       \n\n                                                   \n                                                                                 \n\n                                                   \n                                                                                 \n\n                                                 \n\n                                           \n                                      \n      \n        \n                      \n                                 \n                                                                        \n                                                \n\n                          \n                                                                     \n                                                \n\n(defn                       ^boolean may-log?\n  \"Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config\"\n  ([level                ] (may-log? level nil     nil))\n  ([level ?ns-str        ] (may-log? level ?ns-str nil))\n  ([level ?ns-str ?config]\n   (let [config    (or  ?config *config*)\n         min-level (get  config :level :report)]\n     (and\n       (level>= level min-level)\n       (boolean ; Resolves #206 (issue with slf4j-timbre)\n         (ns-filter\n           (get config :ns-whitelist)\n           (get config :ns-blacklist)\n           ?ns-str))\n       true))))\n\n(comment (qb 1e5 (may-log? :info))) ; 34.13\n\n;;;; Utils\n\n(declare get-hostname)\n\n(enc/compile-if (do enc/str-join true) ; Encore v2.29.1+ with transducers\n  (defn- str-join [xs]\n    (enc/str-join \" \"\n      (map\n        (fn [x]\n          (let [x (enc/nil->str x)] ; Undefined, nil -> \"nil\"\n            (cond\n              (record?          x) (pr-str x)\n              ;; (enc/lazy-seq? x) (pr-str x) ; Dubious?\n              :else x))))\n      xs))\n  (defn- str-join [xs] (str/join \" \"                 (filter identity xs))))\n\n(comment\n  (defrecord MyRec [x])\n  (str-join [\"foo\" (MyRec. \"foo\")]))\n\n     \n                                \n                                                                      \n\n(comment (get-agent :my-appender))\n\n(defonce ^:private get-rate-limiter\n  (enc/memoize_ (fn [appender-id specs] (enc/limiter specs))))\n\n(comment (def rf (get-rate-limiter :my-appender [[10 5000]])))\n\n;;;; Internal logging core\n\n(def ^:dynamic *context* \"General-purpose dynamic logging context\" nil)\n                       \n                                                                     \n                                                              \n\n               \n                                                                        \n                             \n\n                                                          \n\n(defn- vrest [v] (if (> (count v) 1) (subvec v 1) []))\n(defn- parse-vargs\n  \"vargs -> [?err ?meta ?msg-fmt api-vargs]\"\n  [?err msg-type vargs]\n  (let [auto-error? (enc/kw-identical? ?err :auto)\n        fmt-msg?    (enc/kw-identical? msg-type :f)\n        [v0] vargs]\n\n    (if (and auto-error? (enc/error? v0))\n      (let [?err     v0\n            ?meta    nil\n            vargs    (vrest vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs])\n\n      (let [?meta    (if (and (map? v0) (:meta (meta v0))) v0 nil)\n            ?err     (or (:err ?meta) (if auto-error? nil ?err))\n            ?meta    (dissoc ?meta :err)\n            vargs    (if ?meta (vrest vargs) vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs]))))\n\n(comment\n  (let [ex (Exception. \"ex\")]\n    (qb 10000\n      (parse-vargs :auto :f [\"fmt\" :a :b :c])\n      (parse-vargs :auto :p [ex    :a :b :c])\n      (parse-vargs :auto :p [^:meta {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [       {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [ex])\n      (parse-vargs :auto :p [^:meta {:err ex}   :a :b :c])))\n  ;; [2.79 2.51 6.13 1.65 1.94 6.2]\n  (infof                                 \"Hi %s\" \"steve\")\n  (infof ^:meta {:hash :bar}             \"Hi %s\" \"steve\")\n  (infof ^:meta {:err (Exception. \"ex\")} \"Hi %s\" \"steve\"))\n\n(defn -log! \"Core low-level log fn. Implementation detail!\"\n\n  ;; TODO Temp workaround for\n  ;; https://github.com/fzakaria/slf4j-timbre/issues/20 and similar AOT tools\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data]\n   ;; (throw (ex-info \"Invalid internal Timbre call. Please try run `lein clean` to clear out-of-date build artifacts.\" {}))\n   (-log! config level ?ns-str ?file ?line msg-type ?err vargs_\n     ?base-data nil))\n\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_\n    ?base-data callsite-id]\n\n  (when (may-log? level ?ns-str config)\n    (let [instant (enc/now-dt)\n          context *context*\n          vargs   @vargs_\n\n          [?err ?meta ?msg-fmt vargs]\n          (parse-vargs ?err msg-type vargs)\n\n          data ; Pre-middleware\n          (conj\n            (or ?base-data {})\n            {:instant instant\n             :level   level\n             :context context\n             :config  config ; Entire config!\n             :?ns-str ?ns-str\n             :?file   ?file\n             :?line   ?line\n                                                          \n             :error-level? (#{:error :fatal} level)\n             :?err     ?err\n             :?err_    (delay ?err) ; Deprecated\n             :?meta    ?meta        ; Undocumented\n             :?msg-fmt ?msg-fmt     ; Undocumented\n             :vargs    vargs})\n\n          ?data ; Post middleware\n          (reduce ; Apply middleware: data->?data\n            (fn [acc mf]\n              (let [result (mf acc)]\n                (if (nil? result)\n                  (reduced nil)\n                  result)))\n            data\n            (:middleware config))]\n\n      (when-let [data ?data] ; Not filtered by middleware\n        (let [{:keys [vargs]} data\n              data (assoc data :vargs_ (delay vargs)) ; Deprecated\n              data\n              (enc/assoc-nx data\n                :msg_\n                (delay\n                  (case msg-type\n                    nil \"\"\n                    :p  (str-join vargs)\n                    :f  #_(enc/format* (have string? ?msg-fmt) vargs)\n                    (do\n                      (when-not (string? ?msg-fmt)\n                        (throw\n                          (ex-info \"Timbre format-style logging call without a format pattern (string)\"\n                            #_data\n                            {:level    level\n                             :location (str (or ?ns-str ?file \"?\") \":\"\n                                            (or ?line         \"?\"))})))\n\n                      (enc/format* ?msg-fmt vargs))))\n\n                ;; Uniquely identifies a particular logging call for\n                ;; rate limiting, etc.\n                :hash_\n                (delay\n                  (hash\n                    ;; Nb excl. instant\n                    [callsite-id      ; Only useful for direct macro calls\n                     ?msg-fmt\n                     (get ?meta :hash ; Explicit hash provided\n                       vargs)])))\n\n              ;; Optimization: try maximize output+timestamp sharing\n              ;; between appenders\n              output-fn1 (enc/memoize_ (get config :output-fn default-output-fn))\n                                                                                                    \n                                   ; (fn [timestamp-opts]) -> Shared delay\n                   \n                           \n                         \n                       \n                                                               \n                            \n                                                 \n                                                                       \n                                         ]\n\n          (reduce-kv\n           (fn [_ id appender]\n             (when (and (:enabled? appender)\n                        (level>= level (or (:min-level appender) :trace)))\n\n               ;; Appender ns filter stacks with main config's ns filter:\n               (when (ns-filter (:ns-whitelist appender)\n                                (:ns-blacklist appender)\n                                ?ns-str)\n\n                 (let [rate-limit-specs (:rate-limit appender)\n                       rate-limit-okay?\n                       (or\n                        (empty? rate-limit-specs)\n                        (let [rl-fn (get-rate-limiter id rate-limit-specs)]\n                          (not (rl-fn (force (:hash_ data))))))]\n\n                   (when rate-limit-okay?\n                     (let [{:keys [async?] apfn :fn} appender\n\n                           output-fn\n                           (let [f (:output-fn appender)]\n                             (if (or (nil? f) (enc/kw-identical? f :inherit))\n                               output-fn1\n                               f))\n\n                                           \n                                \n                                                                 \n                                                                                   \n                                                                     \n                                                                             \n\n                           output_\n                           (delay\n                            (output-fn\n                                                                       \n                                    data))\n\n                           data\n                           (conj data\n                             {:appender-id id\n                              :appender    appender\n                              :output-fn   output-fn\n                              :output_     output_\n                                                                })\n\n                           ?data ; Final data prep before going to appender\n                           (if-let [mfn (:middleware-fn appender)]\n                             (mfn data) ; Deprecated, undocumented\n                             data)]\n\n                       (when-let [data ?data] ; Not filtered by middleware\n\n                         ;; NB Unless `async?`, we currently allow appenders\n                         ;; to throw since it's not particularly obvious\n                         ;; how/where we should report problems. Throwing\n                         ;; early seems preferable to just silently dropping\n                         ;; errors. In effect, we currently require appenders\n                         ;;  to take responsibility over appropriate trapping.\n\n                                (apfn data)\n                              \n                                   \n                                                                         \n                                       )))))))\n           nil\n           (:appenders config))))))\n  nil))\n\n(comment\n  (-log! *config* :info nil nil nil :p :auto\n    (delay [(do (println \"hi\") :x) :y]) nil \"callsite-id\"))\n\n                                                      \n\n                                              \n                                                     \n\n                                                     \n                                                \n                                                                             \n\n                                                            \n                                         \n                                \n                                                                   \n                                                        \n                                                \n                                     \n                                                       \n                                                    \n                                                            \n                                 \n                                             \n                                               \n\n                                                            \n\n                                                                            \n                                                                             \n                                     \n                       \n                                                                     \n                                                \n\n                                                                     \n                                                         \n\n(comment\n  (log! :info :p [\"foo\"])\n  (macroexpand '(log! :info :p [\"foo\"]))\n  (macroexpand '(log! :info :p [\"foo\"] {:?line 42})))\n\n;;;; Benchmarking\n\n(comment\n  (set-level! :debug)\n  (may-log? :trace)\n  (with-level :trace (log? :trace))\n  (qb 10000\n    (may-log? :trace)\n    (may-log? :trace \"foo\")\n    (tracef \"foo\")\n    (when false \"foo\"))\n  ;; [1.38 1.42 2.08 0.26]\n\n                                                \n                                                                            \n\n  (with-sole-appender {:enabled? true :fn (fn [data] nil)}\n    (qb 10000 (info \"foo\"))) ; ~74.58 ; Time to delays ready\n\n  (with-sole-appender {:enabled? true :fn (fn [data] (force (:output_ data)))}\n    (qb 10000 (info \"foo\"))) ; ~136.68 ; Time to output ready\n  )\n\n;;;; Main public API-level stuff\n;; TODO Have a bunch of cruft here trying to work around CLJ-865 to some extent\n\n;;; Log using print-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n;;; Log using format-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n(comment\n  (infof \"hello %s\" \"world\")\n  (infof (Exception.) \"hello %s\" \"world\")\n  (infof (Exception.)))\n\n                                    \n                               \n        \n                             \n                                               \n\n                                                \n                               \n        \n                             \n                                            \n                    \n\n                                                                              \n\n                                                                                           \n                                                                                           \n                                                                                           \n\n     \n                                     \n                                                    \n               \n               \n                   \n                                        \n                                                                \n                                   \n\n                                              \n                                            \n                                                                                  \n\n(comment\n  (log-errors             (/ 0))\n  (log-and-rethrow-errors (/ 0))\n  (logged-future          (/ 0))\n  (handle-uncaught-jvm-exceptions!))\n\n                                             \n                                  \n                         \n                             \n                                                            \n                                                                           \n\n                                 \n                 \n\n             \n                                                                             \n                                                                       \n                                                                                \n                                                                                \n                                                                                \n                                                                                 \n\n                                    \n(comment ((fn foo [x y] (get-env)) 5 10))\n\n     \n                  \n                 \n                                       \n                                                                        \n                                                                         \n                                            \n    \n                                       \n                                                                        \n                                                                         \n                                           \n\n                                          \n                                                    \n                                             \n\n;;;; Misc public utils\n\n     \n                            \n                                        \n                                                                   \n                                                                   \n                                                                   \n                                    \n                                                                 \n\n                                                                \n                                                                \n                                    \n                                                           \n\n     \n                    \n                                                               \n                                                           \n                                                      \n\n                                                                    \n                                                                             \n                                                                           \n                                                           \n                      \n                                                            \n         \n\n                                                     \n                                  \n                                                                     \n\n(comment (get-hostname))\n\n     \n                                       \n                                                          \n           \n\n(defn stacktrace\n  ([err     ] (stacktrace err nil))\n  ([err opts]\n          (str err) ; TODO Alternatives?\n        \n                                                       \n                                                  \n                                  \n                                \n                 \n                         \n                                     \n\n                                     \n                                        \n                                              \n                                               ))\n\n(comment (stacktrace (Exception. \"Boo\") {:stacktrace-fonts {}}))\n\n                                                     \n                      \n                                                                 \n                                               \n\n;;;; Deprecated\n\n(enc/deprecated\n         (def console-?appender core-appenders/console-appender)\n  (def ordered-levels -levels-vec)\n  (def log? may-log?)\n  (defn logging-enabled? [level compile-time-ns] (may-log? level (str compile-time-ns)))\n  (defn str-println      [& xs] (str-join xs))\n                                                                              \n                                                                              \n                                        \n                   \n                                           \n                                                  \n                                                          \n                                                                      )\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre.cljx\n"]}