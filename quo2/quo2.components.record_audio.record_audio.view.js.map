{"version":3,"sources":["quo2/components/record_audio/record_audio/view.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,AAAA,AAAeA;AACf,AAAA,AAAeC;AACf,AAAA,AAAeC;AACf,AAAA,AAAeC;AACf,AAAA,AAAeC;AAEf,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeC;AAMf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeC;AAMf,AAAA,AAAAC,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AACmBO;AADnB,AAAA,AAAA,AAEW,AAAA,AAAA,AAAA,AAAA,AAAA,AACED,AACAC;AAJb,AAAA,AAMW,AAAA,AAAA,AAAIA,AACJ,AAAA,AAAA,AAAA,AAAA,AAAA,AACED,AACAC;AATb,AAWW,AAAA,AAAA,AAAA,AAAA,AAAA,AACED,AACAC;;;AAGb,AAAA,AAAAC,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAR,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAAC,AAAAM,AAAAA;AAAA,AAAAL,AAAAK,AAAA,AACWH;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAAA,AAAA,AAAIA,AACJ,AAAA,AAAA,AAAIA;;AAIf,AAAA,AAAAK,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAX,AAAA,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAAV,AAAAC,AAAAS,AAAAA;AAAA,AAAAR,AAAAQ,AAAA,AACWN;AADX,AAAAF,AAAAQ,AAAA,AACmBL;AADnB,AAAA,AAAA,AAAA,AAEW,AAAA,AAAA,AAAIA,AACJ,AAAA,AAAA,AAAA,AAAA,AAAA,AACED,AACAC;AALb,AAAA,AAOW,AAAA,AAAA,AAAIA,AACJ,AAAA,AAAA,AAAA,AAAA,AAAA,AACED,AACAC;;;AAGb,AAAA,AAAAO,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAf,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAAd,AAAAC,AAAAa,AAAAA;AAAA,AAAAZ,AAAAY,AAAA,AACWG;AADX,AAAAf,AAAAY,AAAA,AACsBI;AADtB,AAAAhB,AAAAY,AAAA,AACiCK;AADjC,AAAAjB,AAAAY,AAAA,AAC+CM;AAD/C,AAAAlB,AAAAY,AAAA,AAC6DO;AAD7D,AAAAnB,AAAAY,AAAA,AAC2EQ;AAD3EP,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAc,AAAAA;AAAA,AAAAb,AAAAa,AAAA,AAEWQ;AAFX,AAAArB,AAAAa,AAAA,AAEiBS;AAFjB,AAAAtB,AAAAa,AAAA,AAEwBU;AAFxB,AAAAvB,AAAAa,AAAA,AAE0BW;AAF1B,AAGE,AAAMC,AAAM,AAAGF,AAAEF;AACXK,AAAM,AAAGF,AAAEF;AADjB,AAEE,AAAAK,AACC,AAAAA,AACC,AAAAC,AAAIT;AAAJ,AAAA,AAAAS;AAAAA;;AAAkB,AAAIb,AAAWQ;;;AADlC,AAAA,AAAAI;AAEC,AAAAC,AAAIR;AAAJ,AAAA,AAAAQ;AAAAA;;AAAkB,AAAIb,AAAWU;;;AAFlCE;;;AADD,AAAA,AAAAA;AAIC,AAAAA,AACC,AAAAC,AAAIX;AAAJ,AAAA,AAAAW;AAAAA;;AAAkB,AAAIZ,AAAWQ;;;AADlC,AAAA,AAAAG;AAEC,AAAAC,AAAIV;AAAJ,AAAA,AAAAU;AAAAA;;AAAkB,AAAIZ,AAAWU;;;AAFlCC;;;AAJDA;;;AAQJ,AAAA,AAAOE,AACJC,AAAoBC;AADvB,AAEE,AAAMC,AAAgB,AAAG,AAAA,AAAGF,AAAyB1C;AAArD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACG6C,AAAgB,AAACC,AAChBD,AAAgB,AAACE,AAAoBH,AAAgBD;;AAE3D,AAAA,AAAOK,AACJC,AAAWP,AAAoBC,AAAiB5B,AAAiBmC;AADpE,AAEE,AAAMC,AAAS,AAAA,AAACC,AAAK,AAAIH,AAAWP,AAAoBQ;AAClDG,AAAS,AAAA,AAACC,AAA2B,AAAA,AAACF,AAAKD,AAAM,AAAA,AAACI,AAAIJ;AAD5D,AAAA,AAAA,AAAA,AAAA,AAEGN,AAAgB,AAACW,AAAsBzC,AACvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAUA,AACP8B,AAAgB,AAACY,AACnBC,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAGA,AAAA,AAAA,AAAA,AAAA,AAAMhB,AACI,AAACiB,AACZP;;AAEN,AAAA,AAAOQ,AACJC,AAAeC,AAAWC,AAAcd,AAAsBe;AADjE,AAEE,AAAMC,AAAS;AAAA,AACE,AAAA,AAACC,AAAOL;;AACR,AAACK,AAAOH,AACN,AAACI,AACA;AAAA,AACE,AAAMC,AAAa,AAAA,AAAAC,AAACC,AAA+BR;AAC7CS,AAAa,AAAA,AAAAF,AAACG,AAAiBV;AAC/BW,AAAa,AAACC,AAAEH,AAAaI;AAFnC,AAGE,AAAM,AAAKF,AAAS,AAAA,AAAAJ,AAACO,AAAKZ,AAAgB,AAAA,AAAGI;AAA7C,AACE,AAACF,AAAOjB,AAAsBmB;;AADhC;;AALL;;AAQbS,AAAS;AAAA,AACE,AAAA,AAACX,AAAOL;;AACR,AAAA,AAAAQ,AAAON;AAAP,AACE,AAAA,AAAAM,AAACS,AAAkBf;;AACnB,AAAA,AAACG,AAAOH;;AAFV;;AAGA,AAAAgB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AACXC,AAAS;AAAA,AACE,AAAA,AAAAb,AAAA,AAAAc,AAACC,AACCtB,AACDG,AACAY;AAHD,AAIE,AAAAE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAE;AAAA,AAAA,AAAA;;;AAtBnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAuBGE,AACW,AAACC,AACDJ,AACVK,AACA,AAAA,AAAAlB,AAAA,AAAA,AAAKR,AACG,AAAC2B,AAAoBC,AAAmBC;;AAEtD,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApF,AAAA,AAAAoF,AAAA,AAAA,AAAA,AAAA,AAAAnF,AAAAC,AAAAkF,AAAAA;AAAA,AAAAjF,AAAAiF,AAAA,AACwDM;AADxD,AAAAvF,AAAAiF,AAAA,AACWE;AADX,AAAAnF,AAAAiF,AAAA,AAC8CK;AAD9C,AAAAtF,AAAAiF,AAAA,AAGWQ;AAHX,AAAAzF,AAAAiF,AAAA,AAEWO;AAFX,AAAAxF,AAAAiF,AAAA,AAIWU;AAJX,AAAA3F,AAAAiF,AAAA,AACsCI;AADtC,AAAArF,AAAAiF,AAAA,AAIsBW;AAJtB,AAAA5F,AAAAiF,AAAA,AAG8CS;AAH9C,AAAA1F,AAAAiF,AAAA,AACmBG;AADnB,AAAA,AAAA,AASG;AAAA,AACE,AAAM/C,AAAW,AAAA,AAACwD;AACZC,AAAQ,AAAA,AAACD;AACTE,AAAe,AAAA,AAACF;AAChBG,AAAe,AAAA,AAACH;AAChB9D,AAAiB,AAAA,AAAC8D;AAClB1F,AAAiB,AAAC0F,AAAa,AAAA,AAAA,AAAOF;AACtCzC,AAAe,AAAA,AAAC2C;AAChB/D,AAAoB,AAAA,AAAC+D;AACrBvD,AAAsB,AAAA,AAACuD;AACvBxC,AAAe,AAAA,AAACwC;AAChBI,AAAqB,AAACJ,AAAa,AAAA,AAAA,AAAOF;AAC1CO,AAAc,AAAA,AAACC;AACfC,AAAmC,AAAA,AAACD;AACpCE,AAA4B,AAAA,AAACF;AAC7BG,AAAM,AAAA,AAACH;AACPI,AAAa,AAAA,AAACJ;AACdhD,AAAW,AAAA,AAACgD;AACZK,AAAc,AAAA,AAACL;AACfM,AAAgB,AAAA,AAACN;AACjB/C,AAAc,AAAA,AAAC+C;AACfO,AAAY,AAACP,AAAKR;AAClBgB,AAAsB,AAAA,AAACR;AACvBS,AAAgB,AAAA,AAACT;AACjBU,AAAiB,AAAA,AAACV;AAClBW,AAAU,AAAA,AAACX;AACXY,AAAmB,AAAA,AAACZ;AACpBa,AACA,AAAA,AAAA,AAAA,AAACjE,AACAkE,AACmB,AAAK3H,AAAc,AAAM4H,AAAS3H,AAClCF;AACpB8H,AACA;AAAA,AACE,AAAA,AAAAzD,AAAC0D,AAAsBjE;;AACvB,AAAA,AAACI,AAAOJ;;AACVkE,AACA,AAAK1B;AAAL,AACE,AAAA,AAAAjC,AAAOP;AAAP,AACE,AAACgE;;AADH;;AAEA,AAAC5D,AAAOJ,AACN,AAACmE,AACA,AAAA1F,AAAI+D;AAAJ,AAAA,AAAA/D;AAAAA;;AAAe,AAAA,AAAWoF;;AAD3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAI+BO,AAC9B;AAAA,AACE,AAAA,AAAChE,AAAOL;;AACR,AAAA,AAAAQ,AAAON;AAAP,AACE,AAAA,AAAAM,AAACS,AAAkBf;;AACnB,AAAA,AAACG,AAAOH;;AACR,AAAA,AAACG,AAAOjB;;AACR,AAAA,AAACiB,AAAOF;;AAJV;;;;AAKL,AAAA,AAAAK,AAAA,AAAC+D,AACCtE;AADF,AAEE,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;AAFF,AAAAkD;AAAA,AAGE,AAAApD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAkD;AAAA,AAAA,AAAA;;;AACJE,AACA;AAAA,AACE,AAAA,AAAAhE,AAACiE,AAAwBpB;;AACzB,AAAA,AAAChD,AAAOgD;;AACVqB,AACA;AAAA,AACE,AAAA,AAAAlE,AAAO6C;AAAP,AACE,AAACmB;;AADH;;AAEA,AAACnE,AAAOgD,AAAa,AAAA,AAACsB,AACAb;AADD,AAEE,AAAA5C,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;AAFF;AAAA,AAGE,AAAAF,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;AACzBwD,AACA;AAAA,AACE,AAAA,AAACvE,AAAOlB;;AACR,AAAA,AAACkB,AAAOpD;;AACR,AAAA,AAACoD,AAAOuC;;AACR,AAAA,AAACvC,AAAOwC;;AACR,AAAA,AAACxC,AAAOyC;;AACR,AAAA,AAACzC,AAAOxB;;AACR,AAAA,AAACwB,AAAOjB;;AACR,AAAA,AAACiB,AAAOzB;;AACR,AAAA,AAACyB,AAAOF;;AACR,AAAA,AAACE,AAAOL;;AACR,AAAA,AAACK,AAAOiD;;AACR,AAAA,AAACjD,AAAOoD;;AACR,AAAA,AAACpD,AAAOmD;;AACR,AAAA,AAACnD,AAAO+C;;AACR,AAAA,AAAC/C,AAAO8C;;AACR,AAAA,AAAC9C,AAAO6C;;AACR,AAAA,AAAA1C,AAAOwC;AAAP,AACE,AAAA,AAAAxC,AAACqE,AAAiB7B;;AAClB,AAAA,AAAC3C,AAAO2C;;AAFV;;AAGA,AAAA,AAAAxC,AAAO+C;AAAP,AACE,AAAA,AAAA/C,AAACS,AAAkBsC;;AACnB,AAAA,AAAClD,AAAOkD;;AAFV;;AAGA,AAAA,AAAA/C,AAAON;AAAP,AACE,AAAA,AAAAM,AAACS,AAAkBf;;AACnB,AAAA,AAACG,AAAOH;;AAFV;;AAGA,AAACwE;;AACHI,AACA,AAASC;AAAT,AACE,AAAU,AAAArG,AAAA,AAAA8B,AAAKoC;AAAL,AAAA,AAAAlE;AAAAA;;AAAA,AAAAA,AAAA,AAAA8B,AAAc4C;AAAd,AAAA,AAAA1E;AAAAA;;AAAA,AAAAA,AAAoB,AAAA,AAAMqG;AAA1B,AAAA,AAAArG;AAAAA;;AAAA,AAAA8B,AAA8BoD;;;;;AAAxC;AAAA,AACE,AAAMoB,AAAuB,AAAA,AAAA,AAACpH,AACgB,AAAAqH,AAAWF;AAAX,AAAA,AAAAG,AAAAC;AAAAC,AAAA,AAAAC,AAAAJ,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAH,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAAC,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAQ,AAAA,AAAA,AAAAD,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAE;AAAA,AAAA,AAAAN,AAAAD;AADjB,AAEiB,AAAAQ,AAAWX;AAAX,AAAA,AAAAY,AAAAR;AAAAS,AAAA,AAAAP,AAAAK,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAAH,AAAAS;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAL,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAAN,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAX,AAAAQ;AAFjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOCnJ;AACxBuJ,AAAuB,AAAA,AAACpB,AACAb;AADD,AAEE,AAAA5C,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;AAFF;AAAA,AAGE,AAAAF,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AAX/B,AAYE,AAACf,AAAOqD,AAAgB,AAAAsC,AAAWjB;AAAX,AAAA,AAAAkB,AAAAd;AAAAe,AAAA,AAAAb,AAAAW,AAAA,AAAAV,AAAA;AAAA,AAAA,AAAAH,AAAAe;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAX,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAAZ,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAjB,AAAAc;;;AACxB,AAAC5F,AAAOsD,AAAiB,AAAA0C,AAAWtB;AAAX,AAAA,AAAAuB,AAAAnB;AAAAoB,AAAA,AAAAlB,AAAAgB,AAAA,AAAAf,AAAA;AAAA,AAAA,AAAAH,AAAAoB;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAhB,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAAjB,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAtB,AAAAmB;;;AACzB,AAAA,AAAA9F,AAAWvD;AAAX;AAAA,AACE,AAAIqF;AACF,AACE,AAAM,AAAA,AAAA9B,AAACO,AAAKqC;AAAZ,AACE,AAAC/C,AAAOlB,AAAW6F;;AADrB;;AAEA,AAAMA;AAAN,AACE,AAAA,AAAC3E,AAAOL;;AACR,AAAA,AAAAQ,AAAO+C;AAAP,AACE,AAAA,AAAA/C,AAACS,AAAkBsC;;AADrB;;AAEA,AAAA,AAAClD,AAAOmD;;AACR,AAACnD,AAAOgD,AAAa0C;;AACrB,AAACY,AACAZ,AACA;AAAA,AACE,AAAA,AAAC1F,AAAOjB;;AACR,AAACiB,AAAOkD,AACN,AAACjD,AACA;AAAA,AACE,AAAI,AAAA,AAAAE,AAAI5B,AAAoB1C;AAC1B,AAACmE,AAAOzB,AACN,AAAA,AAAA4B,AAAI5B,AAAoBzC;;AAC1B,AACE,AAACkE,AAAOoD,AAAsB,AAAA,AAAAjD,AAACO,AAAK6B;;AACpC,AAAA,AAACvC,AAAOpD;;AACR,AAAA,AAACoD,AAAO+C;;AACR,AAAA,AAAC/C,AAAOuC;;AACR,AAAA,AAACvC,AAAOlB;;AACR,AAAA,AAACkB,AAAOyC;;AACR,AAAA,AAACzC,AAAOwC;;AACR,AAAA,AAACxC,AAAOxB;;AACR,AAACgI,AACAd,AACA;AAAA,AACE,AAAC1F,AAAOmD,AAAY,AAACsD,AACAf;;AACrB,AAAA,AAAC5B;;AACD,AAAAjD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;AANH,AAAAwF;AAAA,AAOE,AAAA1F,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAwF;AAAA,AAAA,AAAA;;;AACF,AAAA,AAACG;AAAD,AAAgB,AAAA,AAAC1G,AAAO+C;AAAxB;;AACA,AAAA,AAAA5C,AAACS,AAAkBsC;;AACnB,AAAA,AAAClD,AAAOzB;;AACR,AAAMyD;AAAN,AACE,AAACA,AAAmB,AAACyE,AACAf;;AAFvB;;;AAGN5J;;AACH,AAAA+E,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;AAlCH,AAAAsF;AAAA,AAmCE,AAAAxF,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAsF;AAAA,AAAA,AAAA;;;AACF,AAAMxE;AAAN,AACE,AAACA;;AADH;;AA1CF;;AA4CF,AAAMK;AAAN,AACE,AAACA;;AADH;;;;AAEJ,AAAMD;AAAN,AACE,AAAA,AAACjC,AAAOiD;;AADV;;;AAEJ,AAAK,AAAA,AAAA9C,AAACO,AAAKqC,AAAO,AAAA,AAAA5C,AAACO,AAAK6C;;AAC1BoD,AACA,AAASjC;AAAT,AACE,AAAA,AAAAvE,AAAWoC;AAAX;;AAAA,AACE,AAAM/E,AAAwB,AAAAoJ,AAAWlC;AAAX,AAAA,AAAAmC,AAAA/B;AAAAgC,AAAA,AAAA9B,AAAA4B,AAAA,AAAA3B,AAAA;AAAA,AAAA,AAAAH,AAAAgC;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA5B,AAAAyB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA7B,AAAA4B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAlC,AAAA+B;;AACxBpJ,AAAwB,AAAAwJ,AAAWvC;AAAX,AAAA,AAAAwC,AAAApC;AAAAqC,AAAA,AAAAnC,AAAAiC,AAAA,AAAAhC,AAAA;AAAA,AAAA,AAAAH,AAAAqC;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAjC,AAAA8B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAAlC,AAAAiC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAvC,AAAAoC;;AACxBI,AAAwB,AAAAC,AAAW7C;AAAX,AAAA,AAAA8C,AAAA1C;AAAA2C,AAAA,AAAAzC,AAAAuC,AAAA,AAAAtC,AAAA;AAAA,AAAA,AAAAH,AAAA2C;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAvC,AAAAoC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAAxC,AAAAuC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAA7C,AAAA0C;;AACxBI,AAAwB,AAAAC,AAAWnD;AAAX,AAAA,AAAAoD,AAAAhD;AAAAiD,AAAA,AAAA/C,AAAA6C,AAAA,AAAA5C,AAAA;AAAA,AAAA,AAAAH,AAAAiD;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA7C,AAAA0C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA9C,AAAA6C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAnD,AAAAgD;;AACxBI,AAAwB,AAAAC,AAAWzD;AAAX,AAAA,AAAA0D,AAAAtD;AAAAuD,AAAA,AAAArD,AAAAmD,AAAA,AAAAlD,AAAA;AAAA,AAAA,AAAAH,AAAAuD;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAnD,AAAAgD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAApD,AAAAmD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAzD,AAAAsD;;AACxBI,AAAwB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACjL,AACgBC,AACAC,AAKhB,AAAA,AAAA,AAAA,AAAA0C,AAAA,AAAA,AAACjD,AACoBsF;AAE9CiG,AAAwB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAClL,AACgBC,AACAC,AAKhB,AAAA,AAAA,AAAA,AAAA0C,AAAA,AAAA,AAACzD,AACoB8B;AAE9CkK,AAAwB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACnL,AACgBC,AACAC,AAKhB,AAAA,AAAA,AAAA,AAAA0C,AAACpD,AAA4B0F;AACtDkG,AAAwB,AAAAvK,AACC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACb,AACgBC,AACAC,AAKhBvB;AARF,AAAA,AAAAkC;AAAA,AASC,AAACwK,AAAKpL,AAAW8J,AACjB,AAACsB,AAAKnL,AAAWmK;;AAVlBxJ;;;AAjC9B,AA4CE,AAAM,AAAA,AAAA+B,AAACK,AAAE0H,AAAY5E;AAArB,AACE,AACE,AAAAlF,AACC,AAAAC,AACC,AAAAD,AAAKuK;AAAL,AAAA,AAAAvK;AAAA,AAAA+B,AAA8BsC;;AAA9BrE;;;AADD,AAAA,AAAAC;AAAAA;;AAEC,AAAK,AAAA,AAAA8B,AAACO,AAAK6B;AAAX,AAAAnE,AAAoBsK;AAApB,AAAA,AAAAtK;AAAA,AAAA+B,AAA2C0C;;AAA3CzE;;;AAAA;;;;AAHF,AAAA,AAAAA;AAAA,AAIC,AAAA,AAAA+B,AAACO,AAAKlC;AAJP,AAKC,AAAA,AAAA2B,AAACO,AAAK8B;AALP,AAAArC,AAMErB;;AANF;;;AAAA;;;AAAAV;;;AAOA,AAAC4B,AAAOyC,AAAeiG;;AARzB,AASE,AAAAtK,AACC,AAAAC,AACC,AAAAD,AAAKuK;AAAL,AAAA,AAAAvK;AAAA,AAAA+B,AAA8B3B;;AAA9BJ;;;AADD,AAAA,AAAAC;AAAAA;;AAEC,AAAAD,AAAKqK;AAAL,AAAA,AAAArK;AAAA,AAAA+B,AAA8B0C;;AAA9BzE;;;;AAHF,AAAA,AAAAA;AAAA,AAIC,AAAA,AAAA+B,AAACO,AAAK+B;AAJP,AAKC,AAAA,AAAAtC,AAACO,AAAK8B;AALP,AAAArC,AAMErB;;AANF;;;AAAA;;;AAAAV;;;AAOA,AAAC4B,AAAOxB,AAAiBiK;;AAhB3B,AAiBE,AAAArK,AACC,AAAAC,AACC,AAAAD,AAAKuK;AAAL,AAAA,AAAAvK;AAAA,AAAA+B,AAA8BqC;;AAA9BpE;;;AADD,AAAA,AAAAC;AAAAA;;AAEC,AAAAD,AAAKoK;AAAL,AAAA,AAAApK;AAAA,AAAA+B,AAA4B0C;;AAA5BzE;;;;AAHF,AAAA,AAAAA;AAAA,AAIC,AAAA,AAAA+B,AAACO,AAAK+B;AAJP,AAKC,AAAA,AAAAtC,AAACO,AAAKlC;AALP,AAAA2B,AAMErB;;AANF;;;AAAA;;;AAAAV;;;AAOA,AAAC4B,AAAOwC,AAAegG;;AAxBzB;;;;;AADF;;;;AA0BNK,AACA,AAASnE;AAAT,AACE,AAAM,AACC,AAAA,AAAAvE,AAACO,AAAKqC,AACN,AAAA,AAAA5C,AAACO,AAAK0C;AAFb,AAGE,AAAA,AAAA,AAAM0F,AAAwC,AAAAC,AAAWrE;AAAX,AAAA,AAAAsE,AAAAlE;AAAAmE,AAAA,AAAAjE,AAAA+D,AAAA,AAAA9D,AAAA;AAAA,AAAA,AAAAH,AAAAmE;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA/D,AAAA4D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAAhE,AAAA+D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAArE,AAAAkE;AAA9C,AAC8C,AAAAI,AAAW1E;AAAX,AAAA,AAAA2E,AAAAvE;AAAAwE,AAAA,AAAAtE,AAAAoE,AAAA,AAAAnE,AAAA;AAAA,AAAA,AAAAH,AAAAwE;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAApE,AAAAiE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAArE,AAAAoE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAA1E,AAAAuE;AAD9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAMMI,AAAwB,AAAClM,AACAuL,AACA5M;AACzBwN,AAAwB,AAACnM,AACAuL,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC5L;AAG1ByM,AAAwB,AAACpM,AACAuL,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpM;AAG1BkN,AAAwB,AAAAC,AAAWnF;AAAX,AAAA,AAAAoF,AAAAhF;AAAAiF,AAAA,AAAA/E,AAAA6E,AAAA,AAAA5E,AAAA;AAAA,AAAA,AAAAH,AAAAiF;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA7E,AAAA0E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA9E,AAAA6E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAnF,AAAAgF;;AACxBI,AAAwB,AAAA,AAAA/J,AAAGyJ,AAAyBvG;AApB1D,AAAAlD,AAqBMgK,AAAyB5L;AArB/B,AAsBE,AACE,AAAAH,AAAA,AAAA+B,AAAMvD;AAAN,AAAA,AAAAwB;AAAuBsL;;AAAvBtL;;;AACA,AACE,AAAA,AAAC4B,AAAOpD;;AACR,AAAA,AAACoD,AAAOjB;;AACR,AAAA,AAACiB,AAAO0C;;AACR,AAAMZ;AAAN,AACE,AAAA,AAAA,AAAA,AAAA3B,AAAA,AAAC2B,AAAqBqB,AACD,AAAA,AAAK,AAAA,AAAAhD,AAACiK,AAA2BxK;;AAFxD;;AAGA,AAAA,AAAAO,AAAOP;AAAP,AACE,AAAA,AAAAO,AAACmK,AACC1K,AACD;AAAA,AACE,AAACgE;;AACD,AAAA/C,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;AAJH,AAAAsJ;AAAA,AAKE,AAAAxJ,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAsJ;AAAA,AAAA,AAAA;;;AANJ;;AATJ,AAgBE,AAAAjM,AAAA,AAAA+B,AAAMvD;AAAN,AAAA,AAAAwB;AAAuBuL;;AAAvBvL;;;AACA,AACE,AAAA,AAAC4B,AAAOpD;;AACR,AAAA,AAACoD,AAAOjB;;AACR,AAAA,AAACiB,AAAO0C;;AACR,AAACkB;;AACD,AAAM7B;AAAN,AACE,AAACA;;AADH;;AAtBJ,AAwBE,AAAA3D,AAAA,AAAA+B,AAAMsC;AAAN,AAAA,AAAArE;AAAqB,AAAA,AAAA+B,AAACO,AAAKoC;;AAA3B1E;;;AACA,AACE,AAAA,AAAC4B,AAAOuC;;AACR,AAAA,AAACvC,AAAOyC;;AACR,AAAMJ;AAAN,AACE,AAACA;;AADH;;AA5BJ,AA8BE,AAAK,AAAA,AAAAlC,AAACO,AAAK9D,AACN,AAAAyB,AAAIoL;AAAJ,AAAA,AAAApL;AAAAA;;AACI,AAAK,AAAA,AAAA8B,AAACO,AAAKlC,AACN,AAAA,AAAA2B,AAACO,AAAK+B,AACN,AAAA,AAAAtC,AAACO,AAAK8B;;AAJpB;AAKA,AACE,AAACxC,AAAOuD,AAAU,AAAI2G,AAAqBjO;;AAC3C,AAACyK,AACA;AAAA,AACE,AAAI,AAAA,AAAAvG,AAAK5B,AAAoB3C;AAC3B,AAAI,AAAA,AAACoE,AAAOpD;;AACR,AAAA,AAACoD,AAAO+C;;AACR,AAAMf;AAAN,AACE,AAACA,AAAmB,AAAA,AAAA7B,AAACsG,AAA8BzD;;AADrD;;AAEJ,AAAI,AAAMjB;AAAN,AACE,AAACA;;AADH;;AAEA,AAAA,AAAC/B,AAAO+C;;;AACd,AAAA,AAAC/C,AAAOuC;;AACR,AAAA,AAACvC,AAAOlB;;AACR,AAAA,AAACkB,AAAOyC;;AACR,AAAA,AAAAtC,AAACqG,AACCxD,AACD;AAAA,AACE,AAAChD,AAAOmD,AAAY,AAAA,AAAAhD,AAACsG,AAA8BzD;;AACnD,AAAM,AAAImH,AAAavO;AAAvB,AACE,AAAA,AAACkI;;AADH;;AAEA,AAAAjD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;AANH,AAAAwJ;AAAA,AAOE,AAAA1J,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAwJ;AAAA,AAAA,AAAA;;;AACF,AAAA,AAAC7D;AAAD,AAAgB,AAAA,AAAC1G,AAAO+C;AAAxB;;AACA,AAAA,AAAA5C,AAACS,AAAkBsC;;AACnB,AAAA,AAAClD,AAAOzB;;AACR,AAAA,AAACyB,AAAOuD;AACV,AAAA,AAAA,AAAI,AAAG2G,AAAqBjO;;AA9DjC,AA+DE,AAAK,AAAA,AAAAkE,AAACO,AAAK6B,AAAS,AAAA,AAAApC,AAACO,AAAK9D,AAAkB,AAAA,AAAAuD,AAACO,AAAKoC;AAClD,AACE,AAAC9C,AAAOuD,AAAU,AAAI2G,AAAqBjO;;AAC3C,AAACyK,AACA;AAAA,AACE,AAAA,AAAAvG,AAACqG,AACCxD,AACD;AAAA,AACE,AAAA,AAAA7C,AACGqC;AACD,AAAMV;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA3B,AAAC2B,AAAoB,AAAA,AAAA3B,AAACsG,AAA8BzD,AAC9BzE;;AAFxB;;AAFF,AAAA,AAAA4B,AAKG3B;AACD,AAAMuD;AAAN,AACE,AAACA;;AADH;;AANF;;;AAQA,AAAA,AAAC/B,AAAOlB;;AACR,AAAA,AAACkB,AAAOwC;;AACR,AAAA,AAACxC,AAAOxB;;AACR,AAAA,AAACwB,AAAOyC;;AACR,AAAA,AAACzC,AAAO+C;;AACR,AAAA,AAAC2D;AAAD,AAAgB,AAAA,AAAC1G,AAAO+C;AAAxB;;AACA,AAAA,AAAA5C,AAACS,AAAkBsC;;AACnB,AAAA,AAAClD,AAAOzB;;AACR,AAAA,AAACyB,AAAOuD;;AACR,AAAA1C,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;AApBH,AAAAyJ;AAAA,AAqBE,AAAA3J,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAyJ;AAAA,AAAA,AAAA;;AACJ,AAAA,AAAA,AAAI,AAAGN,AAAqBjO;;AA1FjC;;;;;;AA2FF,AAAA,AAAC+D,AAAOiD;;AApHV;;AAqHA,AAAA,AAAA9C,AAAOiD;AAAP,AACE,AAAA,AAACpD,AAAOoD;;AADV;;AAEA,AAAA,AAACpD,AAAOqD;;AAzWhB,AA0WE;AAAA,AACE,AAACoH,AAAW;AAAA,AACE,AAAMtI;AAAN,AACE,AAACA;;AADH;;AAEA,AAAMP;AAAN,AACE,AAACA,AAAQ2C;;AADX;;AAEA,AAAMnC;AAAN,AACE,AAAMsI,AAAS,AAACC,AAAK,AAAA,AAACC,AAAaxI;AAAnC,AACE,AAAC0B,AAAc4G;;AAFnB;;AAGA,AAAC1K,AAAOwD,AACN,AAAA,AAAA,AAAAqH,AAAmBC;AAAnB,AAEoB,AAAM,AAAAD,AAAA,AAACrK;AAAP,AACE,AAAA,AAACR,AAAOL;;AADV;;;;AAXxB;AAAA,AAaG,AAAA,AAAAQ,AAAUqD;;;;AAd3B,AAAA,AAAA,AAAA,AAAA,AAeG9E,AACiBqM,AAEjB,AAAA,AAAA5K,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAOvD,AAEC8C,AAAcC,AAAeC,AAAWC,AAAcd,AAC1De,AACIkL,AACoBjM,AACCa,AACDE,AAC5B,AAAM,AAAAzB,AAAA,AAAA8B,AAAKrB;AAAL,AAAA,AAAAT;AAAAA;;AAAA,AAAA8B,AAAiBvD;;AA1B1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAuD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AA0BG,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAAA,AAAA,AACOtB,AAAgBC,AAAYP,AAAqBC,AAAkB5B,AACtEmC,AACJ,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAOrB,AACAR,AAAiBC,AAAqBC,AAC5CE,AAEgCuM,AAMAxG,AACAkC,AACAkC,AAC3BqC,AAA8BpM,AAAWN,AAAiB5B,AAC7D8F,AACGyI,AAA0BrM,AAAW2D,AAAeF,AACpD6I,AAA0BtM,AAAW0D,AAAe5F,AACvD8F,AACG2I,AACJvM,AACA0D,AACAC,AACAjE,AACAsE,AACAD,AACAN,AACA3F,AACAsG,AACA3E,AACAoE,AACAM,AACAD,AACAqB,AACAtB,AACAjB,AACAC,AACIuJ,AAA8BxM,AAAWlC","names":["quo2.components.record-audio.record-audio.view/min-audio-duration-ms","quo2.components.record-audio.record-audio.view/max-audio-duration-ms","quo2.components.record-audio.record-audio.view/metering-interval","quo2.components.record-audio.record-audio.view/base-filename","quo2.components.record-audio.record-audio.view/default-format","quo2.components.record-audio.record-audio.view/min-touch-duration","quo2.components.record-audio.record-audio.view/record-button-area-big","quo2.components.record-audio.record-audio.view/record-button-area","p__19282","map__19283","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.record-audio.record-audio.view/delete-button-area","active?","reviewing-audio?","p__19291","map__19292","quo2.components.record-audio.record-audio.view/lock-button-area","p__19294","map__19295","quo2.components.record-audio.record-audio.view/send-button-area","p__19304","p__19305","map__19308","map__19309","quo2.components.record-audio.record-audio.view/touch-inside-area?","location-x","location-y","ignore-min-y?","ignore-max-y?","ignore-min-x?","ignore-max-x?","width","height","x","y","max-x","max-y","and__4115__auto__","or__4126__auto__","quo2.components.record-audio.record-audio.view/f-recording-bar","recording-length-ms","ready-to-delete?","fill-percentage","react-native.core/view","quo2.components.record-audio.record-audio.style/recording-bar-container","quo2.components.record-audio.record-audio.style/recording-bar","quo2.components.record-audio.record-audio.view/f-time-counter","recording?","audio-current-time-ms","s","cljs.core/quot","time-str","goog.string/format","cljs.core/mod","quo2.components.record-audio.record-audio.style/timer-container","quo2.components.record-audio.record-audio.style/timer-circle","quo2.components.markdown.text/text","cljs.core/merge","quo2.components.record-audio.record-audio.style/timer-text","quo2.components.record-audio.record-audio.view/f-play-button","playing-audio?","player-ref","playing-timer","seeking-audio?","on-play","cljs.core/reset!","js/setInterval","current-time","cljs.core/deref","react-native.audio-toolkit/get-player-current-time","player-state","react-native.audio-toolkit/get-state","playing?","cljs.core/=","react-native.audio-toolkit/PLAYING","cljs.core/not","on-pause","js/clearInterval","taoensso.timbre/-log!","taoensso.timbre/*config*","cljs.core/Delay","on-press","p1__19345#","react-native.audio-toolkit/toggle-playpause-player","react-native.core/touchable-opacity","quo2.components.record-audio.record-audio.style/play-button","quo2.components.icon/icon","quo2.foundations.colors/theme-colors","quo2.foundations.colors/neutral-100","quo2.foundations.colors/white","p__19353","map__19354","quo2.components.record-audio.record-audio.view/record-audio","on-init","on-start-recording","on-send","on-cancel","on-reviewing-audio","record-audio-permission-granted","on-request-record-audio-permission","on-check-audio-permissions","audio-file","on-lock","reagent.core/atom","locked?","ready-to-send?","ready-to-lock?","force-show-controls?","clear-timeout","cljs.core/atom","record-button-at-initial-position?","record-button-is-animating?","idle?","recorder-ref","touch-active?","recording-timer","output-file","reached-max-duration?","touch-timestamp","touch-identifier","disabled?","app-state-listener","rec-options","react-native.audio-toolkit/default-recorder-options","js/Date","destroy-player","react-native.audio-toolkit/destroy-player","reload-player","react-native.audio-toolkit/new-player","react-native.audio-toolkit/PLAYBACK","p1__19346#","react-native.audio-toolkit/prepare-player","destroy-recorder","react-native.audio-toolkit/destroy-recorder","reload-recorder","react-native.audio-toolkit/new-recorder","reset-recorder","js/clearTimeout","on-start-should-set-responder","e","pressed-record-button?","target-obj-19360","*runtime-state*-orig-val__19365","oops.state/*runtime-state*","*runtime-state*-temp-val__19366","oops.state/prepare-state","js/Error","next-obj-19361","oops.core/validate-object-access-dynamically","next-obj-19362","target-obj-19377","*runtime-state*-orig-val__19388","*runtime-state*-temp-val__19389","next-obj-19382","next-obj-19384","new-recorder","target-obj-19397","*runtime-state*-orig-val__19401","*runtime-state*-temp-val__19402","next-obj-19399","next-obj-19400","target-obj-19406","*runtime-state*-orig-val__19409","*runtime-state*-temp-val__19410","next-obj-19407","next-obj-19408","p1__19348#","react-native.audio-toolkit/start-recording","p1__19347#","react-native.audio-toolkit/stop-recording","react-native.audio-toolkit/get-recorder-file-path","js/setTimeout","on-responder-move","target-obj-19452","*runtime-state*-orig-val__19464","*runtime-state*-temp-val__19465","next-obj-19454","next-obj-19457","target-obj-19467","*runtime-state*-orig-val__19470","*runtime-state*-temp-val__19471","next-obj-19468","next-obj-19469","page-x","target-obj-19473","*runtime-state*-orig-val__19478","*runtime-state*-temp-val__19480","next-obj-19474","next-obj-19475","page-y","target-obj-19485","*runtime-state*-orig-val__19488","*runtime-state*-temp-val__19489","next-obj-19486","next-obj-19487","identifier","target-obj-19498","*runtime-state*-orig-val__19507","*runtime-state*-temp-val__19508","next-obj-19499","next-obj-19504","moved-to-send-button?","moved-to-delete-button?","moved-to-lock-button?","moved-to-record-button?","cljs.core/not=","on-responder-release","touch-area","target-obj-19556","*runtime-state*-orig-val__19559","*runtime-state*-temp-val__19560","next-obj-19557","next-obj-19558","target-obj-19563","*runtime-state*-orig-val__19566","*runtime-state*-temp-val__19567","next-obj-19564","next-obj-19565","on-record-button?","on-send-button?","on-delete-button?","release-touch-timestamp","target-obj-19575","*runtime-state*-orig-val__19578","*runtime-state*-temp-val__19579","next-obj-19576","next-obj-19577","touch-timestamp-diff","audio-length","react-native.audio-toolkit/get-player-duration","p1__19349#","react-native.audio-toolkit/stop-playing","p1__19350#","p1__19351#","react-native.core/use-effect","filename","cljs.core/last","clojure.string/split","p1__19352#","react-native.core/app-state","quo2.components.record-audio.record-audio.style/bar-container","quo2.components.record-audio.soundtrack.view/f-soundtrack","quo2.components.record-audio.record-audio.style/button-container","quo2.components.record-audio.record-audio.buttons.delete-button/f-delete-button","quo2.components.record-audio.record-audio.buttons.lock-button/f-lock-button","quo2.components.record-audio.record-audio.buttons.send-button/f-send-button","quo2.components.record-audio.record-audio.buttons.record-button-big/f-record-button-big","quo2.components.record-audio.record-audio.buttons.record-button/f-record-button"],"sourcesContent":["(ns quo2.components.record-audio.record-audio.view\n  (:require [oops.core :as oops]\n            [quo2.components.icon :as icons]\n            [quo2.components.record-audio.record-audio.style :as style]\n            [quo2.foundations.colors :as colors]\n            [quo2.components.record-audio.soundtrack.view :as soundtrack]\n            [react-native.core :as rn :refer [use-effect]]\n            [reagent.core :as reagent]\n            [quo2.components.markdown.text :as text]\n            [goog.string :as gstring]\n            [react-native.audio-toolkit :as audio]\n            [taoensso.timbre :as log]\n            [quo2.components.record-audio.record-audio.buttons.record-button-big :as record-button-big]\n            [quo2.components.record-audio.record-audio.buttons.send-button :as send-button]\n            [quo2.components.record-audio.record-audio.buttons.lock-button :as lock-button]\n            [quo2.components.record-audio.record-audio.buttons.delete-button :as delete-button]\n            [quo2.components.record-audio.record-audio.buttons.record-button :as record-button]\n            [clojure.string :as string]))\n\n(def ^:private min-audio-duration-ms 500)\n(def ^:private max-audio-duration-ms 120000)\n(def ^:private metering-interval 100)\n(def ^:private base-filename \"am\")\n(def ^:private default-format \".aac\")\n\n(def min-touch-duration 150)\n\n(def ^:private record-button-area-big\n  {:width  56\n   :height 56\n   :x      64\n   :y      64})\n\n(def ^:private record-button-area\n  {:width  48\n   :height 48\n   :x      68\n   :y      68})\n\n(defn- delete-button-area\n  [{:keys [active? reviewing-audio?]}]\n  {:width  (cond\n             active?          72\n             reviewing-audio? 32\n             :else            82)\n   :height (if reviewing-audio? 32 56)\n   :x      (cond\n             active?          -16\n             reviewing-audio? 36\n             :else            -32)\n   :y      (cond\n             active?          64\n             reviewing-audio? 76\n             :else            70)})\n\n(defn- lock-button-area\n  [{:keys [active?]}]\n  {:width  (if active? 72 100)\n   :height (if active? 72 102)\n   :x      -32\n   :y      -32})\n\n(defn- send-button-area\n  [{:keys [active? reviewing-audio?]}]\n  {:width  (if reviewing-audio? 32 56)\n   :height (cond\n             active?          72\n             reviewing-audio? 47\n             :else            92)\n   :x      (if reviewing-audio? 76 32)\n   :y      (cond\n             active?          -16\n             reviewing-audio? 76\n             :else            -32)})\n\n(defn touch-inside-area?\n  [{:keys [location-x location-y ignore-min-y? ignore-max-y? ignore-min-x? ignore-max-x?]}\n   {:keys [width height x y]}]\n  (let [max-x (+ x width)\n        max-y (+ y height)]\n    (and\n     (and\n      (or ignore-min-x? (>= location-x x))\n      (or ignore-max-x? (<= location-x max-x)))\n     (and\n      (or ignore-min-y? (>= location-y y))\n      (or ignore-max-y? (<= location-y max-y))))))\n\n(defn- f-recording-bar\n  [recording-length-ms ready-to-delete?]\n  (let [fill-percentage (/ (* recording-length-ms 100) max-audio-duration-ms)]\n    [rn/view {:style (style/recording-bar-container)}\n     [rn/view {:style (style/recording-bar fill-percentage ready-to-delete?)}]]))\n\n(defn- f-time-counter\n  [recording? recording-length-ms ready-to-delete? reviewing-audio? audio-current-time-ms]\n  (let [s        (quot (if recording? recording-length-ms audio-current-time-ms) 1000)\n        time-str (gstring/format \"%02d:%02d\" (quot s 60) (mod s 60))]\n    [rn/view {:style (style/timer-container reviewing-audio?)}\n     (when-not reviewing-audio?\n       [rn/view {:style (style/timer-circle)}])\n     [text/text\n      (merge\n       {:size   :label\n        :weight :semi-bold}\n       (when ready-to-delete?\n         {:style (style/timer-text)}))\n      time-str]]))\n\n(defn- f-play-button\n  [playing-audio? player-ref playing-timer audio-current-time-ms seeking-audio?]\n  (let [on-play  (fn []\n                   (reset! playing-audio? true)\n                   (reset! playing-timer\n                     (js/setInterval\n                      (fn []\n                        (let [current-time (audio/get-player-current-time @player-ref)\n                              player-state (audio/get-state @player-ref)\n                              playing?     (= player-state audio/PLAYING)]\n                          (when (and playing? (not @seeking-audio?) (> current-time 0))\n                            (reset! audio-current-time-ms current-time))))\n                      100)))\n        on-pause (fn []\n                   (reset! playing-audio? false)\n                   (when @playing-timer\n                     (js/clearInterval @playing-timer)\n                     (reset! playing-timer nil))\n                   (log/debug \"[record-audio] toggle play / pause - success\"))\n        on-press (fn []\n                   (audio/toggle-playpause-player\n                    @player-ref\n                    on-play\n                    on-pause\n                    #(log/error \"[record-audio] toggle play / pause - error: \" %)))]\n    [rn/touchable-opacity\n     {:style    (style/play-button)\n      :on-press on-press}\n     [icons/icon\n      (if @playing-audio? :i/pause :i/play)\n      {:color (colors/theme-colors colors/neutral-100 colors/white)}]]))\n\n(defn record-audio\n  [{:keys [on-init on-start-recording on-send on-cancel on-reviewing-audio\n           record-audio-permission-granted\n           on-request-record-audio-permission on-check-audio-permissions\n           audio-file on-lock]}]\n  [:f>\n   ;; TODO we need to refactor this, and use :f> with defined function, currenly state is reseted each\n   ;; time parent component\n   ;; is re-rendered\n   (fn []\n     (let [recording? (reagent/atom false)\n           locked? (reagent/atom false)\n           ready-to-send? (reagent/atom false)\n           ready-to-lock? (reagent/atom false)\n           ready-to-delete? (reagent/atom false)\n           reviewing-audio? (reagent/atom (some? audio-file))\n           playing-audio? (reagent/atom false)\n           recording-length-ms (reagent/atom 0)\n           audio-current-time-ms (reagent/atom 0)\n           seeking-audio? (reagent/atom false)\n           force-show-controls? (reagent/atom (some? audio-file))\n           clear-timeout (atom nil)\n           record-button-at-initial-position? (atom true)\n           record-button-is-animating? (atom false)\n           idle? (atom false)\n           recorder-ref (atom nil)\n           player-ref (atom nil)\n           touch-active? (atom false)\n           recording-timer (atom nil)\n           playing-timer (atom nil)\n           output-file (atom audio-file)\n           reached-max-duration? (atom false)\n           touch-timestamp (atom nil)\n           touch-identifier (atom nil)\n           disabled? (atom false)\n           app-state-listener (atom nil)\n           rec-options\n           (merge\n            audio/default-recorder-options\n            {:filename         (str base-filename (.now js/Date) default-format)\n             :meteringInterval metering-interval})\n           destroy-player\n           (fn []\n             (audio/destroy-player @player-ref)\n             (reset! player-ref nil))\n           reload-player\n           (fn [audio-file]\n             (when @player-ref\n               (destroy-player))\n             (reset! player-ref\n               (audio/new-player\n                (or audio-file (:filename rec-options))\n                {:autoDestroy                 false\n                 :continuesToPlayInBackground false\n                 :category                    audio/PLAYBACK}\n                (fn []\n                  (reset! playing-audio? false)\n                  (when @playing-timer\n                    (js/clearInterval @playing-timer)\n                    (reset! playing-timer nil)\n                    (reset! audio-current-time-ms 0)\n                    (reset! seeking-audio? false)))))\n             (audio/prepare-player\n              @player-ref\n              #(log/debug \"[record-audio] prepare player - success\")\n              #(log/error \"[record-audio] prepare player - error: \" %)))\n           destroy-recorder\n           (fn []\n             (audio/destroy-recorder @recorder-ref)\n             (reset! recorder-ref nil))\n           reload-recorder\n           (fn []\n             (when @recorder-ref\n               (destroy-recorder))\n             (reset! recorder-ref (audio/new-recorder\n                                   rec-options\n                                   #(log/debug \"[record-audio] new recorder - on meter\")\n                                   #(log/debug \"[record-audio] new recorder - on ended\"))))\n           reset-recorder\n           (fn []\n             (reset! recording? false)\n             (reset! reviewing-audio? false)\n             (reset! locked? false)\n             (reset! ready-to-send? false)\n             (reset! ready-to-lock? false)\n             (reset! ready-to-delete? false)\n             (reset! audio-current-time-ms 0)\n             (reset! recording-length-ms 0)\n             (reset! seeking-audio? false)\n             (reset! playing-audio? false)\n             (reset! touch-active? false)\n             (reset! reached-max-duration? false)\n             (reset! output-file nil)\n             (reset! idle? false)\n             (reset! record-button-is-animating? false)\n             (reset! record-button-at-initial-position? true)\n             (when @clear-timeout\n               (js/clearTimeout @clear-timeout)\n               (reset! clear-timeout nil))\n             (when @recording-timer\n               (js/clearInterval @recording-timer)\n               (reset! recording-timer nil))\n             (when @playing-timer\n               (js/clearInterval @playing-timer)\n               (reset! playing-timer nil))\n             (reload-recorder))\n           on-start-should-set-responder\n           (fn [^js e]\n             (when-not (or @locked? @idle? (nil? e) @disabled?)\n               (let [pressed-record-button? (touch-inside-area?\n                                             {:location-x    (oops/oget e \"nativeEvent.locationX\")\n                                              :location-y    (oops/oget e \"nativeEvent.locationY\")\n                                              :ignore-min-y? false\n                                              :ignore-max-y? false\n                                              :ignore-min-x? false\n                                              :ignore-max-x? false}\n                                             record-button-area)\n                     new-recorder           (audio/new-recorder\n                                             rec-options\n                                             #(log/debug \"[record-audio] new recorder - on meter\")\n                                             #(log/debug \"[record-audio] new recorder - on ended\"))]\n                 (reset! touch-timestamp (oops/oget e \"nativeEvent.timestamp\"))\n                 (reset! touch-identifier (oops/oget e \"nativeEvent.identifier\"))\n                 (when-not @reviewing-audio?\n                   (if record-audio-permission-granted\n                     (do\n                       (when (not @idle?)\n                         (reset! recording? pressed-record-button?))\n                       (when pressed-record-button?\n                         (reset! playing-audio? false)\n                         (when @recording-timer\n                           (js/clearInterval @recording-timer))\n                         (reset! output-file nil)\n                         (reset! recorder-ref new-recorder)\n                         (audio/start-recording\n                          new-recorder\n                          (fn []\n                            (reset! audio-current-time-ms 0)\n                            (reset! recording-timer\n                              (js/setInterval\n                               (fn []\n                                 (if (< @recording-length-ms max-audio-duration-ms)\n                                   (reset! recording-length-ms\n                                     (+ @recording-length-ms metering-interval))\n                                   (do\n                                     (reset! reached-max-duration? (not @locked?))\n                                     (reset! reviewing-audio? true)\n                                     (reset! idle? false)\n                                     (reset! locked? false)\n                                     (reset! recording? false)\n                                     (reset! ready-to-lock? false)\n                                     (reset! ready-to-send? false)\n                                     (reset! ready-to-delete? false)\n                                     (audio/stop-recording\n                                      new-recorder\n                                      (fn []\n                                        (reset! output-file (audio/get-recorder-file-path\n                                                             new-recorder))\n                                        (reload-player nil)\n                                        (log/debug \"[record-audio] stop recording - success\"))\n                                      #(log/error \"[record-audio] stop recording - error: \" %))\n                                     (js/setTimeout #(reset! idle? false) 1000)\n                                     (js/clearInterval @recording-timer)\n                                     (reset! recording-length-ms 0)\n                                     (when on-reviewing-audio\n                                       (on-reviewing-audio (audio/get-recorder-file-path\n                                                            new-recorder))))))\n                               metering-interval))\n                            (log/debug \"[record-audio] start recording - success\"))\n                          #(log/error \"[record-audio] start recording - error: \" %))\n                         (when on-start-recording\n                           (on-start-recording))))\n                     (when on-request-record-audio-permission\n                       (on-request-record-audio-permission))))\n                 (when record-audio-permission-granted\n                   (reset! touch-active? true))))\n             (and (not @idle?) (not @disabled?)))\n           on-responder-move\n           (fn [^js e]\n             (when-not @locked?\n               (let [location-x              (oops/oget e \"nativeEvent.locationX\")\n                     location-y              (oops/oget e \"nativeEvent.locationY\")\n                     page-x                  (oops/oget e \"nativeEvent.pageX\")\n                     page-y                  (oops/oget e \"nativeEvent.pageY\")\n                     identifier              (oops/oget e \"nativeEvent.identifier\")\n                     moved-to-send-button?   (touch-inside-area?\n                                              {:location-x    location-x\n                                               :location-y    location-y\n                                               :ignore-min-y? true\n                                               :ignore-max-y? false\n                                               :ignore-min-x? false\n                                               :ignore-max-x? true}\n                                              (send-button-area\n                                               {:active?          @ready-to-send?\n                                                :reviewing-audio? false}))\n                     moved-to-delete-button? (touch-inside-area?\n                                              {:location-x    location-x\n                                               :location-y    location-y\n                                               :ignore-min-y? false\n                                               :ignore-max-y? true\n                                               :ignore-min-x? true\n                                               :ignore-max-x? false}\n                                              (delete-button-area\n                                               {:active?          @ready-to-delete?\n                                                :reviewing-audio? false}))\n                     moved-to-lock-button?   (touch-inside-area?\n                                              {:location-x    location-x\n                                               :location-y    location-y\n                                               :ignore-min-y? false\n                                               :ignore-max-y? false\n                                               :ignore-min-x? false\n                                               :ignore-max-x? false}\n                                              (lock-button-area {:active? @ready-to-lock?}))\n                     moved-to-record-button? (and\n                                              (touch-inside-area?\n                                               {:location-x    location-x\n                                                :location-y    location-y\n                                                :ignore-min-y? false\n                                                :ignore-max-y? false\n                                                :ignore-min-x? false\n                                                :ignore-max-x? false}\n                                               record-button-area-big)\n                                              (not= location-x page-x)\n                                              (not= location-y page-y))]\n                 (when (= identifier @touch-identifier)\n                   (cond\n                     (and\n                      (or\n                       (and moved-to-record-button? @ready-to-lock?)\n                       (and (not @locked?) moved-to-lock-button? @record-button-at-initial-position?))\n                      (not @ready-to-delete?)\n                      (not @ready-to-send?)\n                      @recording?)\n                     (reset! ready-to-lock? moved-to-lock-button?)\n                     (and\n                      (or\n                       (and moved-to-record-button? @ready-to-delete?)\n                       (and moved-to-delete-button? @record-button-at-initial-position?))\n                      (not @ready-to-lock?)\n                      (not @ready-to-send?)\n                      @recording?)\n                     (reset! ready-to-delete? moved-to-delete-button?)\n                     (and\n                      (or\n                       (and moved-to-record-button? @ready-to-send?)\n                       (and moved-to-send-button? @record-button-at-initial-position?))\n                      (not @ready-to-lock?)\n                      (not @ready-to-delete?)\n                      @recording?)\n                     (reset! ready-to-send? moved-to-send-button?))))))\n           on-responder-release\n           (fn [^js e]\n             (when (and\n                    (not @idle?)\n                    (not @reached-max-duration?))\n               (let [touch-area              {:location-x    (oops/oget e \"nativeEvent.locationX\")\n                                              :location-y    (oops/oget e \"nativeEvent.locationY\")\n                                              :ignore-min-y? false\n                                              :ignore-max-y? false\n                                              :ignore-min-x? false\n                                              :ignore-max-x? false}\n                     on-record-button?       (touch-inside-area?\n                                              touch-area\n                                              record-button-area-big)\n                     on-send-button?         (touch-inside-area?\n                                              touch-area\n                                              (send-button-area\n                                               {:active?          false\n                                                :reviewing-audio? true}))\n                     on-delete-button?       (touch-inside-area?\n                                              touch-area\n                                              (delete-button-area\n                                               {:active?          false\n                                                :reviewing-audio? true}))\n                     release-touch-timestamp (oops/oget e \"nativeEvent.timestamp\")\n                     touch-timestamp-diff    (- release-touch-timestamp @touch-timestamp)\n                     audio-length            @recording-length-ms]\n                 (cond\n                   (and @reviewing-audio? on-send-button?)\n                   (do\n                     (reset! reviewing-audio? false)\n                     (reset! audio-current-time-ms 0)\n                     (reset! force-show-controls? false)\n                     (when on-send\n                       (on-send {:file-path @output-file\n                                 :duration  (int (audio/get-player-duration @player-ref))}))\n                     (when @player-ref\n                       (audio/stop-playing\n                        @player-ref\n                        (fn []\n                          (destroy-player)\n                          (log/debug \"[record-audio] stop playing - success\"))\n                        #(log/error \"[record-audio] stop playing - error: \" %))))\n                   (and @reviewing-audio? on-delete-button?)\n                   (do\n                     (reset! reviewing-audio? false)\n                     (reset! audio-current-time-ms 0)\n                     (reset! force-show-controls? false)\n                     (destroy-player)\n                     (when on-cancel\n                       (on-cancel)))\n                   (and @ready-to-lock? (not @record-button-is-animating?))\n                   (do\n                     (reset! locked? true)\n                     (reset! ready-to-lock? false)\n                     (when on-lock\n                       (on-lock)))\n                   (and (not @reviewing-audio?)\n                        (or on-record-button?\n                            (and (not @ready-to-delete?)\n                                 (not @ready-to-lock?)\n                                 (not @ready-to-send?))))\n                   (do\n                     (reset! disabled? (<= touch-timestamp-diff min-touch-duration))\n                     (js/setTimeout\n                      (fn []\n                        (if (>= @recording-length-ms min-audio-duration-ms)\n                          (do (reset! reviewing-audio? true)\n                              (reset! idle? false)\n                              (when on-reviewing-audio\n                                (on-reviewing-audio (audio/get-recorder-file-path @recorder-ref))))\n                          (do (when on-cancel\n                                (on-cancel))\n                              (reset! idle? true)))\n                        (reset! locked? false)\n                        (reset! recording? false)\n                        (reset! ready-to-lock? false)\n                        (audio/stop-recording\n                         @recorder-ref\n                         (fn []\n                           (reset! output-file (audio/get-recorder-file-path @recorder-ref))\n                           (when (>= audio-length min-audio-duration-ms)\n                             (reload-player nil))\n                           (log/debug \"[record-audio] stop recording - success\"))\n                         #(log/error \"[record-audio] stop recording - error: \" %))\n                        (js/setTimeout #(reset! idle? false) 1000)\n                        (js/clearInterval @recording-timer)\n                        (reset! recording-length-ms 0)\n                        (reset! disabled? false))\n                      (if (> touch-timestamp-diff min-touch-duration) 0 250)))\n                   (and (not @locked?) (not @reviewing-audio?) (not @record-button-is-animating?))\n                   (do\n                     (reset! disabled? (<= touch-timestamp-diff min-touch-duration))\n                     (js/setTimeout\n                      (fn []\n                        (audio/stop-recording\n                         @recorder-ref\n                         (fn []\n                           (cond\n                             @ready-to-send?\n                             (when on-send\n                               (on-send {:file-path (audio/get-recorder-file-path @recorder-ref)\n                                         :duration  @recording-length-ms}))\n                             @ready-to-delete?\n                             (when on-cancel\n                               (on-cancel)))\n                           (reset! recording? false)\n                           (reset! ready-to-send? false)\n                           (reset! ready-to-delete? false)\n                           (reset! ready-to-lock? false)\n                           (reset! idle? true)\n                           (js/setTimeout #(reset! idle? false) 1000)\n                           (js/clearInterval @recording-timer)\n                           (reset! recording-length-ms 0)\n                           (reset! disabled? false)\n                           (log/debug \"[record-audio] stop recording - success\"))\n                         #(log/error \"[record-audio] stop recording - error: \" %)))\n                      (if (> touch-timestamp-diff min-touch-duration) 0 250)))))\n               (reset! touch-active? false))\n             (when @reached-max-duration?\n               (reset! reached-max-duration? false))\n             (reset! touch-timestamp nil))]\n       (fn []\n         (use-effect (fn []\n                       (when on-check-audio-permissions\n                         (on-check-audio-permissions))\n                       (when on-init\n                         (on-init reset-recorder))\n                       (when audio-file\n                         (let [filename (last (string/split audio-file \"/\"))]\n                           (reload-player filename)))\n                       (reset! app-state-listener\n                         (.addEventListener rn/app-state\n                                            \"change\"\n                                            #(when (= % \"background\")\n                                               (reset! playing-audio? false))))\n                       #(.remove @app-state-listener)))\n         [rn/view\n          {:style          style/bar-container\n           :pointer-events :box-none}\n          (when @reviewing-audio?\n            [:<>\n             [:f> f-play-button playing-audio? player-ref playing-timer audio-current-time-ms\n              seeking-audio?]\n             [:f> soundtrack/f-soundtrack\n              {:audio-current-time-ms audio-current-time-ms\n               :player-ref            @player-ref\n               :seeking-audio?        seeking-audio?}]])\n          (when (or @recording? @reviewing-audio?)\n            [:f> f-time-counter @recording? @recording-length-ms @ready-to-delete? @reviewing-audio?\n             @audio-current-time-ms])\n          (when @recording?\n            [:f> f-recording-bar @recording-length-ms @ready-to-delete?])\n          [rn/view\n           {:test-ID                       \"record-audio\"\n            :style                         style/button-container\n            :hit-slop                      {:top    -70\n                                            :bottom 0\n                                            :left   0\n                                            :right  0}\n            :pointer-events                :box-only\n            :on-start-should-set-responder on-start-should-set-responder\n            :on-responder-move             on-responder-move\n            :on-responder-release          on-responder-release}\n           [:f> delete-button/f-delete-button recording? ready-to-delete? reviewing-audio?\n            @force-show-controls?]\n           [:f> lock-button/f-lock-button recording? ready-to-lock? locked?]\n           [:f> send-button/f-send-button recording? ready-to-send? reviewing-audio?\n            @force-show-controls?]\n           [:f> record-button-big/f-record-button-big\n            recording?\n            ready-to-send?\n            ready-to-lock?\n            ready-to-delete?\n            record-button-is-animating?\n            record-button-at-initial-position?\n            locked?\n            reviewing-audio?\n            recording-timer\n            recording-length-ms\n            clear-timeout\n            touch-active?\n            recorder-ref\n            reload-recorder\n            idle?\n            on-send\n            on-cancel]\n           [:f> record-button/f-record-button recording? reviewing-audio?]]])))])\n"]}