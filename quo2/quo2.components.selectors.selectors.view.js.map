{"version":3,"sources":["quo2/components/selectors/selectors/view.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,AAAA,AAAOA,AACJC,AAAUC,AAAaC;AAD1B,AAEE,AAAMD;AAAN,AAAmB,AAACE,AAAMF,AAAaG;;AAAvC;;AACA,AAAMJ;AAAN,AAAgB,AAACA,AAAU,AAACI,AAAIF;;AAAhC;;;AAEF,AAAA,AAAAG,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AAC4BJ;AAD5B,AAEE,AAAMW,AAAsB,AAAA,AAAA,AAAOX;AAC7BY,AAAsB,AAAA,AAAA,AAAUD,AACR,AAACE,AAAa,AAAAC,AAAIJ;AAAJ,AAAA,AAAAI;AAAAA;;AAAA;;;AAF5C,AAGE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAX,AAAA,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAAV,AAAAC,AAAAS,AAAAA;AAAA,AAAAR,AAAAQ,AAAA,AAAoEI;AAApE,AAAAZ,AAAAQ,AAAA,AACwDQ;AADxD,AAAAhB,AAAAQ,AAAA,AAAsBC;AAAtB,AAAAT,AAAAQ,AAAA,AAA0DlB;AAA1D,AAAAU,AAAAQ,AAAA,AACyCO;AADzC,AAAAf,AAAAQ,AAAA,AAAahB;AAAb,AAAAQ,AAAAQ,AAAA,AAAgCE;AAAhC,AAAAV,AAAAQ,AAAA,AACaK;AADb,AAAAb,AAAAQ,AAAA,AAAA,AAAsCG;AAAtC,AAAAX,AAAAQ,AAAA,AAC0BM;AAD1B,AAGE,AAAMG,AAAoB,AAAA,AAAAC,AAAIf,AAAsBX,AAAUY;AACxDe,AAAoB,AAAA,AAAKN,AAAiB,AAAA,AAAA,AAAII;AAC9CG,AAAoB,AAAA,AAAKP;AACzBQ,AAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACP,AAAqCG,AACAR,AACAC,AACAE,AACAD;AAPhE,AAAA,AAQGW,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAUb;AAAV,AACc,AAACpB,AAAaC,AAAUc,AAAkBa;AAV3D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWIM,AACoCF,AAEAF,AAEAC,AACnCG,AACQ,AAAA,AAAA,AAAA,AAAA,AAACR,AAAqCE,AACAP,AACAC,AAC9C,AAAM,AAAAa,AAAKR;AAAL,AAAA,AAAAQ;AAAmBP;;AAAnBO;;AAAN,AAAA,AAAA,AAAA,AACGC,AAA0B,AAACT,AAAcC,AAAgBP;;;AAEvE,AAAA,AAAMgB,AACHC;AADH,AAAA,AAEG1B,AACA,AAAA,AAAA,AAAA,AAAA,AAAC2B,AAAMD,AAEgBE,AACAC;;AAE1B,AAAA,AAAMC,AACHJ;AADH,AAAA,AAEG1B,AACA,AAAA,AAAA,AAAA,AAAA,AAAC2B,AAAMD,AAEgBK,AACAC;;AAE1B,AAAA,AAAMC,AACHP;AADH,AAAA,AAEG1B,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2B,AAAMD,AAEgBQ,AACAC,AACAC;;AAE1B,AAAA,AAAMC,AACHX;AADH,AAAA,AAEG1B,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2B,AAAMD,AAEgBY,AACAH,AACAI","names":["quo2.components.selectors.selectors.view/handle-press","on-change","checked-atom","checked?","cljs.core/swap!","cljs.core/not","p__17337","map__17338","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.selectors.selectors.view/selector","default-checked?","controlled-component?","internal-checked?","reagent.core/atom","or__4126__auto__","p__17340","map__17341","disabled?","blur?","customization-color","container-style","label-prefix","outer-style-fn","inner-style-fn","icon-style-fn","actual-checked?","cljs.core/deref","accessibility-label","test-id","outer-styles","react-native.core/touchable-without-feedback","react-native.core/view","and__4115__auto__","quo2.components.icon/icon","quo2.components.selectors.selectors.view/toggle","props","cljs.core/assoc","quo2.components.selectors.selectors.style/toggle","quo2.components.selectors.selectors.style/toggle-inner","quo2.components.selectors.selectors.view/radio","quo2.components.selectors.selectors.style/radio","quo2.components.selectors.selectors.style/radio-inner","quo2.components.selectors.selectors.view/checkbox","quo2.components.selectors.selectors.style/checkbox","quo2.components.selectors.selectors.style/common-checkbox-inner","quo2.components.selectors.selectors.style/checkbox-check","quo2.components.selectors.selectors.view/checkbox-prefill","quo2.components.selectors.selectors.style/checkbox-prefill","quo2.components.selectors.selectors.style/checkbox-prefill-check"],"sourcesContent":["(ns quo2.components.selectors.selectors.view\n  (:require [quo2.components.icon :as icons]\n            [quo2.components.selectors.selectors.style :as style]\n            [react-native.core :as rn]\n            [reagent.core :as reagent]))\n\n(defn- handle-press\n  [on-change checked-atom checked?]\n  (when checked-atom (swap! checked-atom not))\n  (when on-change (on-change (not checked?))))\n\n(defn- selector\n  [{:keys [default-checked? checked?]}]\n  (let [controlled-component? (some? checked?)\n        internal-checked?     (when-not controlled-component?\n                                (reagent/atom (or default-checked? false)))]\n    (fn [{:keys [checked? disabled? blur? customization-color on-change container-style\n                 label-prefix outer-style-fn inner-style-fn icon-style-fn]\n          :or   {customization-color :blue}}]\n      (let [actual-checked?     (if controlled-component? checked? @internal-checked?)\n            accessibility-label (str label-prefix \"-\" (if actual-checked? \"on\" \"off\"))\n            test-id             (str label-prefix \"-component\")\n            outer-styles        (outer-style-fn {:checked?            actual-checked?\n                                                 :disabled?           disabled?\n                                                 :blur?               blur?\n                                                 :container-style     container-style\n                                                 :customization-color customization-color})]\n        [rn/touchable-without-feedback\n         (when-not disabled?\n           {:on-press #(handle-press on-change internal-checked? actual-checked?)})\n         [rn/view\n          {:style                             outer-styles\n           :needs-offscreen-alpha-compositing true\n           :accessibility-label               accessibility-label\n           :accessibility-role                :checkbox\n           :testID                            test-id}\n          [rn/view\n           {:style (inner-style-fn {:checked?            actual-checked?\n                                    :blur?               blur?\n                                    :customization-color customization-color})}\n           (when (and icon-style-fn actual-checked?)\n             [icons/icon :i/check-small (icon-style-fn actual-checked? blur?)])]]]))))\n\n(defn toggle\n  [props]\n  [selector\n   (assoc props\n          :label-prefix   \"toggle\"\n          :outer-style-fn style/toggle\n          :inner-style-fn style/toggle-inner)])\n\n(defn radio\n  [props]\n  [selector\n   (assoc props\n          :label-prefix   \"radio\"\n          :outer-style-fn style/radio\n          :inner-style-fn style/radio-inner)])\n\n(defn checkbox\n  [props]\n  [selector\n   (assoc props\n          :label-prefix   \"checkbox\"\n          :outer-style-fn style/checkbox\n          :inner-style-fn style/common-checkbox-inner\n          :icon-style-fn  style/checkbox-check)])\n\n(defn checkbox-prefill\n  [props]\n  [selector\n   (assoc props\n          :label-prefix   \"checkbox-prefill\"\n          :outer-style-fn style/checkbox-prefill\n          :inner-style-fn style/common-checkbox-inner\n          :icon-style-fn  style/checkbox-prefill-check)])\n"]}