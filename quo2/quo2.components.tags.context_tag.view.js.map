{"version":3,"sources":["quo2/components/tags/context_tag/view.cljs"],"mappings":"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","names":["quo2.components.tags.context-tag.view/trim-public-key","pk","cljs.core/subs","cljs.core/count","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","quo2.components.tags.context-tag.view/base-tag","p__19391","map__19393","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","seq19373","G__19374","cljs.core/first","cljs.core/next","self__4723__auto__","override-theme","style","blur?","children","cljs.core/into","react-native.core/view","cljs.core/merge","quo2.components.tags.context-tag.style/base-tag","quo2.components.tags.context-tag.view/group-avatar-tag","label","opts","cljs.core/select-keys","cljs.core/assoc-in","quo2.components.avatars.group-avatar/group-avatar","quo2.components.markdown.text/text","quo2.components.tags.context-tag.view/public-key-tag","params","public-key","p__19416","map__19418","quo2.components.tags.context-tag.view/context-tag","text-style","no-avatar-placeholder?","photo","name","channel-name","text-params","cljs.core/assoc","empty-photo?","avatar-size","avatar-outer-size","cljs.core/get-in","quo2.components.avatars.user-avatar.style/sizes","quo2.components.avatars.user-avatar.view/user-avatar","quo2.components.tags.context-tag.style/context-tag-text-container","quo2.components.icon/icon","quo2.components.tags.context-tag.style/context-tag-icon-color","quo2.components.tags.context-tag.view/user-avatar-tag","username","quo2.components.tags.context-tag.view/audio-tag","duration","quo2.components.tags.context-tag.style/audio-tag-container","quo2.components.tags.context-tag.style/audio-tag-icon-container","quo2.components.tags.context-tag.style/audio-tag-icon-color","quo2.components.tags.context-tag.style/audio-tag-text-color","p__19524","map__19525","quo2.components.tags.context-tag.view/community-tag","avatar","community-name","quo2.components.tags.context-tag.style/community-tag","quo2.components.tags.context-tag.style/community-tag-text"],"sourcesContent":["(ns quo2.components.tags.context-tag.view\n  (:require [quo2.components.avatars.user-avatar.view :as user-avatar]\n            [quo2.components.avatars.group-avatar :as group-avatar]\n            [quo2.components.icon :as icons]\n            [quo2.components.markdown.text :as text]\n            [quo2.components.tags.context-tag.style :as style]\n            [quo2.components.avatars.user-avatar.style :as user-avatar-style]\n            [react-native.core :as rn]))\n\n(defn trim-public-key\n  [pk]\n  (str (subs pk 0 6) \"...\" (subs pk (- (count pk) 3))))\n\n(defn base-tag\n  [{:keys [override-theme style blur?]} & children]\n  (into\n   [rn/view {:style (merge (style/base-tag override-theme blur?) style)}]\n   children))\n\n(defn group-avatar-tag\n  [label opts]\n  [base-tag\n   (-> opts\n       (select-keys [:override-theme :style :blur?])\n       (assoc-in [:style :padding-left] 3)\n       (assoc-in [:style :padding-vertical] 2))\n   [group-avatar/group-avatar opts]\n   [text/text\n    {:weight :medium\n     :size   :paragraph-2\n     :style  (:text-style opts)}\n    (str \" \" label)]])\n\n(defn public-key-tag\n  [params public-key]\n  [base-tag params\n   [text/text\n    {:weight :monospace\n     :size   :paragraph-2}\n    (trim-public-key public-key)]])\n\n(defn context-tag\n  [{:keys [text-style blur? no-avatar-placeholder?] :as params} photo name channel-name]\n  (let [text-params       {:weight :medium\n                           :size   :paragraph-2\n                           :style  (assoc text-style :justify-content :center)}\n        empty-photo?      (nil? photo)\n        avatar-size       :xxs\n        avatar-outer-size (get-in user-avatar-style/sizes [avatar-size :outer])]\n    [rn/view {:flex-direction :row}\n     [base-tag (assoc-in params [:style :padding-left] 3)\n      (if (and empty-photo? no-avatar-placeholder?)\n        [rn/view {:style {:width avatar-outer-size}}]\n        [user-avatar/user-avatar\n         {:full-name         name\n          :profile-picture   photo\n          :size              avatar-size\n          :status-indicator? false}])\n      [rn/view {:style style/context-tag-text-container}\n       [text/text text-params (str \" \" name)]\n       (when channel-name\n         [:<>\n          [icons/icon\n           :i/chevron-right\n           {:color (style/context-tag-icon-color blur?)\n            :size  16}]\n          [text/text text-params (str \"# \" channel-name)]])]]]))\n\n(defn user-avatar-tag\n  [params username photo]\n  [context-tag params photo username])\n\n(defn audio-tag\n  [duration params]\n  [base-tag (merge {:style style/audio-tag-container} params)\n   [rn/view {:style style/audio-tag-icon-container}\n    [icons/icon\n     :i/play\n     {:color style/audio-tag-icon-color\n      :size  12}]]\n   [text/text\n    {:weight :medium\n     :size   :paragraph-2\n     :style  {:margin-left 4\n              :color       (style/audio-tag-text-color (:override-theme params))}}\n    duration]])\n\n(defn community-tag\n  [avatar community-name {:keys [override-theme] :as params}]\n  [context-tag\n   (merge {:style      style/community-tag\n           :text-style (style/community-tag-text override-theme)}\n          params)\n   avatar\n   community-name])\n"]}