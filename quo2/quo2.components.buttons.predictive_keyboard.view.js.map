{"version":3,"sources":["quo2/components/buttons/predictive_keyboard/view.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeA,AACJ,AAAA,AAACC,AAAaC,AAAwB,AAAA,AAACD,AAAaC,AACpD,AAAA,AAACD,AAAaE,AAAuB,AAAA,AAACF,AAAaE,AACnDC,AAAmBC;AAE9B,AAAA,AAAAC,AAAOM,AACJC,AAAKC,AAAEA;AADV,AAAA,AAAAP,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACoBQ;AADpB,AAAAJ,AAAAJ,AAAA,AAC0BS;AAD1B,AAAA,AAEGC,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAAD,AAEmB,AAACF,AAASH;AACtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAME,AACbF;;AAEH,AAAA,AAAOM;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGC;;AAEH;;;;;;;;AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAd,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAC,AAAAY,AAAAA;AAAA,AAAAX,AAAAW,AAAA,AAOWE;AAPX,AAAAb,AAAAW,AAAA,AAOgBP;AAPhB,AAAAJ,AAAAW,AAAA,AAOsBG;AAPtB,AAAAd,AAAAW,AAAA,AAO2BI;AAP3B,AAAAf,AAAAW,AAAA,AAOiCN;AAPjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQGW,AAGsB,AAAIZ,AACF,AAAA,AAACf,AACD,AAAC4B,AAAoB,AAAA,AAAC5B,AAAkB,AAAA,AAACA,AAChEoB,AAAgB,AAACS,AAAcL,AAC/B,AAAAM,AAAMN;AAANM,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGE,AAEoCN,AACAO,AACArB,AACWG,AACAC,AAEVG,AAEDe;;;AAZvC;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAeGC,AAIAV;;;AAnBH;AAAA,AAsBGU,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACjB,AAEa,AAAA,AAAA,AAAI,AAAA,AAACkB,AAAEZ,AACd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMT,AACSsB,AACAA,AACtBZ;;;;AA7BH","names":["quo2.components.buttons.predictive-keyboard.view/gradients","quo2.foundations.colors/alpha","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-80","quo2.foundations.colors/white-opa-5","quo2.foundations.colors/white-opa-0","p__16689","map__16690","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.buttons.predictive-keyboard.view/word-component","word","_","blur?","on-press","quo2.components.buttons.button/button","cljs.core/merge","quo2.components.buttons.predictive-keyboard.view/separator","react-native.core/view","p__16695","map__16696","quo2.components.buttons.predictive-keyboard.view/view","type","text","words","react-native.linear-gradient/linear-gradient","quo2.foundations.colors/theme-colors","quo2.components.buttons.predictive-keyboard.style/wrapper","G__16698","cljs.core/Keyword","react-native.core/flat-list","quo2.components.buttons.predictive-keyboard.style/word-list","cljs.core/str","quo2.components.info.info-message/info-message","cljs.core/=","quo2.foundations.colors/white-opa-70"],"sourcesContent":["(ns quo2.components.buttons.predictive-keyboard.view\n  (:require [react-native.core :as rn]\n            [quo2.components.buttons.predictive-keyboard.style :as style]\n            [quo2.components.info.info-message :as info-message]\n            [react-native.linear-gradient :as linear-gradient]\n            [quo2.foundations.colors :as colors]\n            [quo2.components.buttons.button :as button]))\n\n(def ^:private gradients\n  {:light [(colors/alpha colors/neutral-40 0.05) (colors/alpha colors/neutral-40 0)]\n   :dark  [(colors/alpha colors/neutral-80 0.7) (colors/alpha colors/neutral-80 0)]\n   :blur  [colors/white-opa-5 colors/white-opa-0]})\n\n(defn- word-component\n  [word _ _ {:keys [blur? on-press]}]\n  [button/button\n   (merge {:type     :blur-bg\n           :size     32\n           :on-press #(on-press word)}\n          (when blur? {:override-theme :dark}))\n   word])\n\n(defn- separator\n  []\n  [rn/view {:style {:width 8}}])\n\n(defn view\n  \"Options\n   - `type` `:words`/`:error`/`:info`/`:empty`.\n   - `blur?` Boolean to enable blur background support.\n   - `text`  error/info text.\n   - `words` List of words to display in the keyboard.\n   - `on-press` Callback called when a word is pressed `(fn [word])`.\"\n  [{:keys [type blur? text words on-press]}]\n  [linear-gradient/linear-gradient\n   {:style               {:flex-direction :row}\n    :accessibility-label :predictive-keyboard\n    :colors              (if blur?\n                           (gradients :blur)\n                           (colors/theme-colors (gradients :light) (gradients :dark)))}\n   [rn/view {:style (style/wrapper type)}\n    (case type\n      :words\n      [rn/flat-list\n       {:keyboard-should-persist-taps      :always\n        :data                              words\n        :content-container-style           style/word-list\n        :render-fn                         word-component\n        :render-data                       {:blur?    blur?\n                                            :on-press on-press}\n        :shows-horizontal-scroll-indicator false\n        :separator                         [separator]\n        :horizontal                        true\n        :key-fn                            str}]\n\n      :error\n      [info-message/info-message\n       {:icon :i/info\n        :size :default\n        :type :error}\n       text]\n\n      :info\n      [info-message/info-message\n       (merge {:icon :i/info\n               :size :default\n               :type (if (= type :error) :error :default)}\n              (when blur?\n                {:text-color colors/white-opa-70\n                 :icon-color colors/white-opa-70}))\n       text]\n      nil)]])\n"]}