{"version":3,"sources":["quo2/components/buttons/slide_button/animations.cljs"],"mappings":"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","names":["quo2.components.buttons.slide-button.animations/extrapolation","quo2.components.buttons.slide-button.animations/track-interpolation-inputs","in-vectors","track-width","cljs.core/map","cljs.core/partial","cljs.core/*","quo2.components.buttons.slide-button.animations/track-clamp-interpolation","quo2.components.buttons.slide-button.animations/track-cover-interpolation","thumb-size","quo2.components.buttons.slide-button.animations/arrow-icon-position-interpolation","quo2.components.buttons.slide-button.animations/action-icon-position-interpolation","quo2.components.buttons.slide-button.animations/interpolate-track","x-pos","interpolation","interpolations","interpolation-values","output","input","react-native.reanimated/interpolate","quo2.components.buttons.slide-button.animations/animate-spring","value","to-value","react-native.reanimated/animate-shared-value-with-spring","quo2.components.buttons.slide-button.animations/complete-animation","sliding-complete?","cljs.core/reset!","quo2.components.buttons.slide-button.animations/reset-track-position","quo2.components.buttons.slide-button.animations/drag-gesture","gestures-disabled?","disabled?","gestures-enabled?","cljs.core/not","or__4126__auto__","cljs.core/deref","react-native.gesture/gesture-pan","react-native.gesture/with-test-ID","react-native.gesture/enabled","react-native.gesture/min-distance","react-native.gesture/on-update","event","x-translation","target-obj-16780","*runtime-state*-orig-val__16783","oops.state/*runtime-state*","*runtime-state*-temp-val__16784","oops.state/prepare-state","js/Error","next-obj-16782","oops.core/validate-object-access-dynamically","clamped-x","quo2.components.buttons.slide-button.utils/clamp-value","reached-end?","react-native.reanimated/set-shared-value","react-native.gesture/on-end","target-obj-16792","*runtime-state*-orig-val__16796","*runtime-state*-temp-val__16797","next-obj-16794"],"sourcesContent":["(ns quo2.components.buttons.slide-button.animations\n  (:require\n    [react-native.gesture :as gesture]\n    [quo2.components.buttons.slide-button.utils :as utils]\n    [oops.core :as oops]\n    [react-native.reanimated :as reanimated]))\n\n(def ^:private extrapolation\n  {:extrapolateLeft  \"clamp\"\n   :extrapolateRight \"clamp\"})\n\n(defn- track-interpolation-inputs\n  [in-vectors track-width]\n  (map (partial * track-width) in-vectors))\n\n;; Interpolations\n(defn- track-clamp-interpolation\n  [track-width]\n  {:in  [-1 0 1]\n   :out [track-width 0 track-width]})\n\n(defn- track-cover-interpolation\n  [track-width thumb-size]\n  {:in  [0 1]\n   :out [(/ thumb-size 2) track-width]})\n\n(defn- arrow-icon-position-interpolation\n  [thumb-size]\n  {:in  [0.9 1]\n   :out [0 (- thumb-size)]})\n\n(defn- action-icon-position-interpolation\n  [thumb-size]\n  {:in  [0.9 1]\n   :out [thumb-size 0]})\n\n(defn interpolate-track\n  \"Interpolate the position in the track\n  `x-pos`            Track animated value\n  `track-width`      Usable width of the track\n  `thumb-size`       Size of the thumb\n  `interpolation` `  :thumb-border-radius`/`:thumb-drop-position`/`:thumb-drop-scale`/`:thumb-drop-z-index`/...\"\n  ([x-pos track-width thumb-size interpolation]\n   (let [interpolations       {:track-cover          (track-cover-interpolation track-width thumb-size)\n                               :track-clamp          (track-clamp-interpolation track-width)\n                               :action-icon-position (action-icon-position-interpolation thumb-size)\n                               :arrow-icon-position  (arrow-icon-position-interpolation thumb-size)}\n\n         interpolation-values (interpolation interpolations)\n         output               (:out interpolation-values)\n         input                (-> (:in interpolation-values)\n                                  (track-interpolation-inputs track-width))]\n     (if interpolation-values\n       (reanimated/interpolate x-pos\n                               input\n                               output\n                               extrapolation)\n       x-pos))))\n\n;; Animations\n(defn- animate-spring\n  [value to-value]\n  (reanimated/animate-shared-value-with-spring value\n                                               to-value\n                                               {:mass      1\n                                                :damping   30\n                                                :stiffness 400}))\n\n(defn- complete-animation\n  [sliding-complete?]\n  (reset! sliding-complete? true))\n\n(defn- reset-track-position\n  [x-pos]\n  (animate-spring x-pos 0))\n\n;; Gestures\n(defn drag-gesture\n  [x-pos\n   gestures-disabled?\n   disabled?\n   track-width\n   sliding-complete?]\n  (let [gestures-enabled? (not (or disabled? @gestures-disabled?))]\n    (-> (gesture/gesture-pan)\n        (gesture/with-test-ID :slide-button-gestures)\n        (gesture/enabled gestures-enabled?)\n        (gesture/min-distance 0)\n        (gesture/on-update (fn [event]\n                             (let [x-translation (oops/oget event \"translationX\")\n                                   clamped-x     (utils/clamp-value x-translation 0 track-width)\n                                   reached-end?  (>= clamped-x track-width)]\n                               (reanimated/set-shared-value x-pos clamped-x)\n                               (when (and reached-end? (not @sliding-complete?))\n                                 (reset! gestures-disabled? true)\n                                 (complete-animation sliding-complete?)))))\n        (gesture/on-end (fn [event]\n                          (let [x-translation (oops/oget event \"translationX\")\n                                reached-end?  (>= x-translation track-width)]\n                            (when (not reached-end?)\n                              (reset-track-position x-pos))))))))\n"]}