{"version":3,"sources":["clojure/set.cljs"],"mappings":"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","names":["clojure.set/bubble-max-key","k","coll","max","cljs.core/apply","cljs.core/max-key","cljs.core/cons","p1__8145#","cljs.core/remove","var_args","G__8150","clojure.set/union","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq8147","G__8148","cljs.core/first","cljs.core/next","G__8149","self__4723__auto__","s1","s2","cljs.core/count","cljs.core/reduce","cljs.core/conj","sets","bubbled-sets","cljs.core/into","cljs.core/rest","G__8157","clojure.set/intersection","seq8154","G__8155","G__8156","result","item","cljs.core/contains?","cljs.core/disj","p1__8152#","G__8166","clojure.set/difference","seq8163","G__8164","G__8165","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__8167#","cljs.core/map","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__8168","vec__8169","cljs.core/nth","m","old","new","cljs.core/assoc","cljs.core/get","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__8172#","clojure.set/index","x","ik","clojure.set/map-invert","p__8176","vec__8177","v","G__8186","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__8188","r","idx","ret","found","p1__8180#","p2__8181#","cljs.core/merge","km","vec__8191","cljs.core/vals","p1__8182#","p2__8183#","clojure.set/subset?","set1","set2","p1__8194#","cljs.core/every?","clojure.set/superset?","p1__8195#"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n"]}