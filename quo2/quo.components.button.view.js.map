{"version":3,"sources":["quo/components/button/view.cljs"],"mappings":"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","names":["quo.components.button.view/style-container","type","cljs.core/merge","G__18958","cljs.core/Keyword","quo.design-system.spacing/padding-horizontal","quo.components.button.view/content-style","G__18963","quo.components.button.view/themes","theme","G__18966","js/Error","cljs.core/deref","quo.design-system.colors/theme","p__18981","map__18983","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo.components.button.view/button","on-press","disabled","before","after","haptic-feedback","haptic-type","on-long-press","on-press-start","accessibility-label","loading","border-radius","style","test-ID","children","map__18986","theme'","icon-color","background-color","text-color","border-color","optional-haptic","quo.haptic/trigger","quo.components.animated.pressable/pressable","quo.react-native/view","status-im.ui.components.icons.icons/icon","quo.react-native/activity-indicator","cljs.core/=","quo.components.text/text","cljs.core/vector?"],"sourcesContent":["(ns quo.components.button.view\n  (:require [quo.components.animated.pressable :as animation]\n            [quo.components.text :as text] ;; FIXME:\n            [quo.design-system.colors :as colors]\n            [quo.design-system.spacing :as spacing]\n            [quo.haptic :as haptic]\n            [quo.react-native :as rn]\n            [status-im.ui.components.icons.icons :as icons]))\n\n(defn style-container\n  [type]\n  (merge {:height          44\n          :align-items     :center\n          :justify-content :center\n          :flex-direction  :row}\n         (case type\n           :primary   (:base spacing/padding-horizontal)\n           :secondary (:x-tiny spacing/padding-horizontal)\n           :icon      {}\n           nil)))\n\n(defn content-style\n  [type]\n  (case type\n    :primary   (:base spacing/padding-horizontal)\n    :secondary (:x-tiny spacing/padding-horizontal)\n    :icon      (:tiny spacing/padding-horizontal)\n    nil))\n\n(defn themes\n  [theme]\n  (case theme\n    :main         {:icon-color       (:icon-04 @colors/theme)\n                   :background-color (:interactive-02 @colors/theme)\n                   :text-color       (:text-04 @colors/theme)}\n    :icon         {:icon-color       (:icon-01 @colors/theme)\n                   :background-color (:interactive-02 @colors/theme)\n                   :text-color       (:text-01 @colors/theme)}\n    :negative     {:icon-color       (:negative-01 @colors/theme)\n                   :background-color (:negative-02 @colors/theme)\n                   :text-color       (:negative-01 @colors/theme)}\n    :positive     {:icon-color       (:positive-01 @colors/theme)\n                   :background-color (:positive-02 @colors/theme)\n                   :text-color       (:positive-01 @colors/theme)}\n    :accent       {:icon-color       (:icon-05 @colors/theme)\n                   :background-color (:interactive-01 @colors/theme)\n                   :text-color       (:text-05 @colors/theme)}\n    :secondary    {:icon-color       (:icon-02 @colors/theme)\n                   :background-color (:interactive-02 @colors/theme)\n                   :text-color       (:text-02 @colors/theme)}\n    :disabled     {:icon-color       (:icon-02 @colors/theme)\n                   :background-color (:ui-01 @colors/theme)\n                   :text-color       (:text-02 @colors/theme)}\n    :monocromatic {:icon-color       (:icon-01 @colors/theme)\n                   :background-color (:ui-background @colors/theme)\n                   :text-color       (:text-01 @colors/theme)\n                   :border-color     (:ui-01 @colors/theme)}))\n\n(defn button\n  [{:keys [on-press disabled type theme before after\n           haptic-feedback haptic-type on-long-press on-press-start\n           accessibility-label loading border-radius style test-ID]\n    :or   {theme           :main\n           type            :primary\n           haptic-feedback true\n           border-radius   8\n           haptic-type     :selection}}\n   children]\n  (let [theme' (cond\n                 disabled :disabled\n                 :else    theme)\n        {:keys [icon-color background-color text-color border-color]}\n        (themes theme')\n\n        optional-haptic (fn []\n                          (when haptic-feedback\n                            (haptic/trigger haptic-type)))]\n    [animation/pressable\n     (merge {:bg-color            background-color\n             :border-radius       border-radius\n             :type                type\n             :disabled            disabled\n             :accessibility-label accessibility-label}\n            (when border-color\n              {:border-color border-color\n               :border-width 1})\n            (when on-press\n              {:on-press (fn []\n                           (optional-haptic)\n                           (on-press))})\n            (when on-long-press\n              {:on-long-press (fn []\n                                (optional-haptic)\n                                (on-long-press))})\n            (when on-press-start\n              {:on-press-start (fn []\n                                 (optional-haptic)\n                                 (on-press-start))}))\n     [rn/view {:test-ID test-ID :style (merge (style-container type) style)}\n      (when before\n        [rn/view\n         [icons/icon before {:color icon-color}]])\n      (when loading\n        [rn/view {:style {:position :absolute}}\n         [rn/activity-indicator]])\n      [rn/view\n       {:style (merge (content-style type)\n                      (when loading\n                        {:opacity 0}))}\n       (cond\n         (= type :icon)\n         [icons/icon children {:color icon-color}]\n\n         (string? children)\n         [text/text\n          {:weight          :medium\n           :number-of-lines 1\n           :style           {:color text-color}}\n          children]\n\n         (vector? children)\n         children)]\n      (when after\n        [rn/view\n         [icons/icon after {:color icon-color}]])]]))\n"]}