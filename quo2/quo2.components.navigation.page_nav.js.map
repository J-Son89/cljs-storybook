{"version":3,"sources":["quo2/components/navigation/page_nav.cljs"],"mappings":"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","names":["quo2.components.navigation.page-nav/centrify-style","quo2.components.navigation.page-nav/align-left","cljs.core/assoc","quo2.components.navigation.page-nav/big?","size","cljs.core/=","quo2.components.navigation.page-nav/icon-props","color","cljs.core/merge","clojure.string/blank?","p__17220","map__17221","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.navigation.page-nav/left-section-view","on-press","icon","accessibility-label","type","icon-background-color","icon-override-theme","put-middle-section-on-left?","react-native.core/view","quo2.components.buttons.button/button","p__17233","map__17234","quo2.components.navigation.page-nav/mid-section-comp","description-img","description-user-icon","horizontal-description?","text-secondary-color","align-mid?","text-color","main-text","description","or__4126__auto__","and__4115__auto__","cljs.core/not","cljs.core/not=","react-native.core/image","quo2.components.markdown.text/text","G__17250","p__17252","map__17253","quo2.components.navigation.page-nav/mid-section-view","one-icon-align-left?","left-align?","right-icon","main-text-icon-color","left-icon","avatar","props","quo2.foundations.colors/dark?","quo2.foundations.colors/neutral-5","quo2.foundations.colors/neutral-95","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-50","component-instance","react-native.core/touchable-opacity","G__17266","cljs.core/Keyword","js/Error","quo2.components.avatars.user-avatar.view/user-avatar","quo2.components.icon/icon","quo2.components.navigation.page-nav/right-section-view","right-section-buttons","last-icon-index","cljs.core/count","cljs.core/map-indexed","p__17273","map__17274","index","style","label","G__17280","p__17288","map__17289","quo2.components.navigation.page-nav/page-nav","container-style","page-nav-color","page-nav-background-uri","mid-section","left-section","mid-section-props","G__17297"],"sourcesContent":["(ns quo2.components.navigation.page-nav\n  (:require [clojure.string :as string]\n            [quo2.components.avatars.user-avatar.view :as user-avatar]\n            [quo2.components.buttons.button :as button]\n            [quo2.components.icon :as icons]\n            [quo2.components.markdown.text :as text]\n            [quo2.foundations.colors :as colors]\n            [react-native.core :as rn]))\n\n(def ^:private centrify-style\n  {:display         :flex\n   :justify-content :center\n   :align-items     :center})\n\n(def ^:private align-left (assoc centrify-style :align-items :flex-start))\n\n(defn- big? [size] (= size :big))\n\n(defn- icon-props\n  [color size]\n  (merge {:size            20\n          :container-style {:width  (if (big? size)\n                                      20\n                                      16)\n                            :height (if (big? size)\n                                      20\n                                      16)}}\n         (if-not (string/blank? color)\n           {:color color}\n           {:no-color true})))\n\n(defn left-section-view\n  [{:keys [on-press icon accessibility-label type icon-background-color icon-override-theme]\n    :or   {type :grey}}\n   put-middle-section-on-left?]\n  [rn/view {:style (when put-middle-section-on-left? {:margin-right 5})}\n   [button/button\n    {:on-press                  on-press\n     :icon                      true\n     :type                      type\n     :size                      32\n     :accessibility-label       accessibility-label\n     :override-theme            icon-override-theme\n     :override-background-color icon-background-color}\n    icon]])\n\n(defn- mid-section-comp\n  [{:keys [description-img description-user-icon horizontal-description?\n           text-secondary-color align-mid? text-color icon main-text type description]}]\n  [rn/view\n   {:style (assoc centrify-style\n                  :flex-direction    :row\n                  :margin-horizontal 2)}\n   (when (or (and (not horizontal-description?)\n                  align-mid?\n                  (not= :text-with-description type))\n             (and (or description-img description-user-icon)\n                  (not icon)))\n     (if description-img\n       [rn/view {:margin-right 8}\n        [description-img]]\n       [rn/image\n        {:source {:uri description-user-icon}\n         :style  {:width         32\n                  :height        32\n                  :border-radius 32\n                  :margin-right  8}}]))\n   [rn/view\n    {:style {:flex-direction (if horizontal-description?\n                               :row\n                               :column)}}\n    [text/text\n     {:size   :paragraph-1\n      :weight :semi-bold\n      :style  {:color       text-color\n               :line-height 21}}\n     main-text]\n    (when description\n      [text/text\n       {:size   :paragraph-2\n        :weight :medium\n        :style  (cond-> {:padding-right 4\n                         :color         text-secondary-color\n                         :line-height   18}\n                  horizontal-description? (assoc :margin-left 4 :margin-top 2))}\n       description])]])\n\n(defn- mid-section-view\n  [{:keys [horizontal-description? one-icon-align-left? type left-align?\n           main-text right-icon main-text-icon-color left-icon on-press avatar]\n    :as   props}]\n  (let [text-color           (if (colors/dark?) colors/neutral-5 colors/neutral-95)\n        text-secondary-color (if (colors/dark?) colors/neutral-40 colors/neutral-50)\n        component-instance   [mid-section-comp (assoc props :text-secondary-color text-secondary-color)]]\n    [rn/touchable-opacity {:on-press on-press}\n     [rn/view\n      {:style (merge\n               (if left-align?\n                 align-left\n                 centrify-style)\n               {:flex                1\n                :margin-left         4\n                :text-align-vertical :center})}\n      (case type\n        :text-only             [text/text\n                                {:size   :paragraph-1\n                                 :weight :semi-bold\n                                 :style  {:color text-color}}\n                                main-text]\n        :user-avatar           [rn/view {:style (assoc centrify-style :flex-direction :row)}\n                                [user-avatar/user-avatar avatar]\n                                [text/text\n                                 {:size   :paragraph-1\n                                  :weight :semi-bold\n                                  :style  {:padding-horizontal 4\n                                           :color              text-color}}\n                                 main-text]]\n        :text-with-two-icons   [rn/view {:style (assoc centrify-style :flex-direction :row)}\n                                [icons/icon left-icon\n                                 (icon-props main-text-icon-color :big)]\n                                [text/text\n                                 {:size   :paragraph-1\n                                  :weight :semi-bold\n                                  :style  {:padding-horizontal 4\n                                           :color              text-color}}\n                                 main-text]\n                                [icons/icon right-icon\n                                 (icon-props main-text-icon-color :big)]]\n        :text-with-one-icon    [rn/view {:style {:flex-direction :row}}\n                                (if one-icon-align-left?\n                                  [rn/view\n                                   {:style {:flex-direction :row\n                                            :align-items    :center}}\n                                   (when horizontal-description?\n                                     [icons/icon left-icon\n                                      (icon-props main-text-icon-color :big)])\n                                   component-instance]\n                                  [rn/view\n                                   {:style {:flex-direction :row\n                                            :align-items    :center}}\n                                   component-instance\n                                   (when horizontal-description?\n                                     [icons/icon left-icon\n                                      (icon-props main-text-icon-color :big)])])]\n        :text-with-description component-instance)]]))\n\n(defn- right-section-view\n  [right-section-buttons]\n  [rn/view\n   {:style (assoc centrify-style\n                  :flex-direction  :row\n                  :justify-content :flex-end)}\n   (let [last-icon-index (-> right-section-buttons count dec)]\n     (map-indexed (fn [index\n                       {:keys [icon on-press type style icon-override-theme icon-background-color\n                               accessibility-label label]\n                        :or   {type :grey}}]\n                    ^{:key index}\n                    [rn/view\n                     (cond-> {:style (assoc style\n                                            :margin-right\n                                            (if (= index last-icon-index) 0 8))}\n                       accessibility-label (assoc :accessibility-label accessibility-label\n                                                  :accessible          true))\n                     [button/button\n                      {:on-press                  on-press\n                       :icon                      (not label)\n                       :type                      type\n                       :before                    (when label icon)\n                       :size                      32\n                       :override-theme            icon-override-theme\n                       :override-background-color icon-background-color}\n                      (if label label icon)]])\n                  right-section-buttons))])\n\n(defn page-nav\n  \"[page-nav opts]\n   opts\n   { :one-icon-align-left?    true/false\n     :horizontal-description? true/false\n     :align-mid?              true/false\n     :page-nav-color          color\n     :page-nav-background-uri image-uri\n     :mid-section\n     {:type                  one-of :text-only :text-with-two-icons :text-with-one-icon :text-with-description :user-avatar\n      :icon                  icon\n      :main-text             string\n      :left-icon             icon\n      :right-icon            icon\n      :description           string\n      :description-color     color\n      :description-icon      icon\n      :description-user-icon icon\n      :description-img a render prop which will be used in place of :description-user-icon\n      :main-text-icon-color  color\n     }\n     :left-section\n     {:type                  button-type\n      :on-press              event\n      :icon                  icon\n      :icon-override-theme   :light/:dark\n     }\n     :right-section-buttons vector of\n      {:type                  button-type\n       :on-press              event\n       :icon                  icon\n       :icon-override-theme   :light/:dark\n      }\n   }\n  \"\n  [{:keys [container-style one-icon-align-left? horizontal-description?\n           align-mid? page-nav-color page-nav-background-uri\n           mid-section\n           left-section\n           right-section-buttons]}]\n  (let [put-middle-section-on-left? (or align-mid?\n                                        (> (count right-section-buttons) 1))\n        mid-section-props\n        {:type                    (:type mid-section)\n         :horizontal-description? horizontal-description?\n         :description-img         (:description-img mid-section)\n         :main-text               (:main-text mid-section)\n         :main-text-icon-color    (:main-text-icon-color mid-section)\n         :one-icon-align-left?    one-icon-align-left?\n         :right-icon              (:right-icon mid-section)\n         :icon                    (:icon mid-section)\n         :left-icon               (:left-icon mid-section)\n         :avatar                  (:avatar mid-section)}]\n    [rn/view\n     {:style (cond-> (merge {:display            :flex\n                             :flex-direction     :row\n                             ;;  iPhone 11 Pro's height in Figma divided by Component height 56/1125\n                             :align-items        :center\n                             :padding-horizontal 20\n                             :height             56\n                             :justify-content    :space-between}\n                            container-style)\n               page-nav-background-uri (assoc :background-color page-nav-color)\n               page-nav-color          (assoc :background page-nav-background-uri))}\n     [rn/view\n      {:style {:flex           1\n               :flex-direction :row\n               :align-items    :center}}\n      (when left-section\n        [left-section-view left-section put-middle-section-on-left?])\n      (when mid-section\n        (cond\n          put-middle-section-on-left?\n          [mid-section-view\n           (assoc mid-section-props\n                  :left-align?           true\n                  :description           (:description mid-section)\n                  :description-color     (:description-color mid-section)\n                  :description-icon      (:description-icon mid-section)\n                  :align-mid?            align-mid?\n                  :description-user-icon (:description-user-icon mid-section))]\n\n          (not put-middle-section-on-left?)\n          [mid-section-view mid-section-props]))]\n     [right-section-view right-section-buttons]]))\n"]}