{"version":3,"sources":["quo2/components/info/information_box/style.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeA,AACmBC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAH,AACAI,AACAC,AACAC,AACAA,AACTN,AACSO,AACAC,AACAC,AACAZ,AACAI,AACAC,AACAL,AACAA,AACAO,AACAC,AACAC,AACAA,AACTT;AAEzB,AAAA,AAAMa,AACHC,AAAMC;AADT,AAEE,AAAA,AAACC,AAAOjB,AAAQe,AAAMC;;AAExB,AAAA,AAAME,AACHH,AAAMI,AAAKH;AADd,AAEE,AAAA,AAACC,AAAOjB,AAAQe,AAAMI,AAAKH;;AAE7B,AAAA,AAAAI,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWN;AADX,AAAAU,AAAAJ,AAAA,AACiBF;AADjB,AAAAM,AAAAJ,AAAA,AACsBM;AADtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEuB,AAAA,AAACT,AAAkBH,AAAMI,AACzB,AAAA,AAACD,AAAkBH,AAAMI,AAGzB,AAAA,AAAA,AAAIQ,AACJ,AAAA,AAAA,AAAIA;;AAI3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAGL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAIL,AAAA,AAAMC,AACHf,AAAMI;AADT,AAAA,AAAA,AAAA,AAAA,AAEiB,AAAA,AAACD,AAAkBH,AAAMI;;AAG1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKY","names":["quo2.components.info.information-box.style/themes","quo2.foundations.colors/white","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-50","quo2.foundations.colors/neutral-100","quo2.foundations.colors/primary-50-opa-5","quo2.foundations.colors/primary-50-opa-10","quo2.foundations.colors/primary-50","quo2.foundations.colors/danger-50-opa-5","quo2.foundations.colors/danger-50-opa-10","quo2.foundations.colors/danger-50","quo2.foundations.colors/neutral-90","quo2.foundations.colors/neutral-70","quo2.foundations.colors/neutral-40","quo2.components.info.information-box.style/get-color","theme","key","cljs.core/get-in","quo2.components.info.information-box.style/get-color-by-type","type","p__17013","map__17014","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.info.information-box.style/container","include-button?","quo2.components.info.information-box.style/icon","quo2.components.info.information-box.style/close-button","quo2.components.info.information-box.style/content-text","quo2.components.info.information-box.style/content-button"],"sourcesContent":["(ns quo2.components.info.information-box.style\n  (:require [quo2.foundations.colors :as colors]))\n\n(def ^:private themes\n  {:light {:default      {:bg     colors/white\n                          :border colors/neutral-20\n                          :icon   colors/neutral-50\n                          :text   colors/neutral-100}\n           :informative  {:bg     colors/primary-50-opa-5\n                          :border colors/primary-50-opa-10\n                          :icon   colors/primary-50\n                          :text   colors/neutral-100}\n           :error        {:bg     colors/danger-50-opa-5\n                          :border colors/danger-50-opa-10\n                          :icon   colors/danger-50\n                          :text   colors/danger-50}\n           :close-button colors/neutral-100}\n   :dark  {:default      {:bg     colors/neutral-90\n                          :border colors/neutral-70\n                          :icon   colors/neutral-40\n                          :text   colors/white}\n           :informative  {:bg     colors/primary-50-opa-5\n                          :border colors/primary-50-opa-10\n                          :icon   colors/white\n                          :text   colors/white}\n           :error        {:bg     colors/danger-50-opa-5\n                          :border colors/danger-50-opa-10\n                          :icon   colors/danger-50\n                          :text   colors/danger-50}\n           :close-button colors/white}})\n\n(defn get-color\n  [theme key]\n  (get-in themes [theme key]))\n\n(defn get-color-by-type\n  [theme type key]\n  (get-in themes [theme type key]))\n\n(defn container\n  [{:keys [theme type include-button?]}]\n  {:background-color   (get-color-by-type theme type :bg)\n   :border-color       (get-color-by-type theme type :border)\n   :border-width       1\n   :border-radius      12\n   :padding-top        (if include-button? 10 11)\n   :padding-bottom     (if include-button? 12 11)\n   :flex-direction     :row\n   :padding-horizontal 16})\n\n(def icon\n  {:margin-top 1 :margin-right 8})\n\n(def close-button\n  {:margin-top  4\n   :margin-left 8})\n\n(defn content-text\n  [theme type]\n  {:color        (get-color-by-type theme type :text)\n   :margin-right 8})\n\n(def content-button\n  {:margin-top 8\n   :align-self :flex-start})\n"]}