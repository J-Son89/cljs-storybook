{"version":3,"sources":["status_im/ethereum/core.cljs"],"mappings":"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","names":["status-im.ethereum.core/sha3","s","native-module.core/sha3","status-im.ethereum.core/utf8-to-hex","hex","native-module.core/utf8-to-hex","cljs.core/empty?","status-im.ethereum.core/hex-to-utf8","utf8","native-module.core/hex-to-utf8","status-im.ethereum.core/BSC-mainnet-chain-id","status-im.ethereum.core/BSC-testnet-chain-id","status-im.ethereum.core/chains","status-im.ethereum.core/chain-id->chain-keyword","i","or__4126__auto__","p1__18498#","cljs.core/some","cljs.core/=","cljs.core/val","cljs.core/key","status-im.ethereum.core/chain-id->chain-name","p1__18499#","status-im.ethereum.core/chain-keyword->chain-id","k","cljs.core/get-in","status-im.ethereum.core/chain-keyword->snt-symbol","G__18507","cljs.core/Keyword","status-im.ethereum.core/testnet?","id","cljs.core/contains?","status-im.ethereum.core/sidechain?","status-im.ethereum.core/network-with-upstream-rpc?","network","status-im.ethereum.core/hex-prefix","status-im.ethereum.core/normalized-hex","clojure.string/starts-with?","status-im.ethereum.core/current-address","db","status-im.ethereum.core/get-default-account","accounts","p1__18521#","status-im.ethereum.core/default-address","cljs.core/get","status-im.ethereum.core/addresses-without-watch","cljs.core/into","p1__18522#","cljs.core/remove","p1__18523#","cljs.core/map","status-im.ethereum.eip55/address->checksum","status-im.ethereum.core/naked-address","clojure.string/replace","status-im.ethereum.core/public-key-length","status-im.ethereum.core/coordinates","public-key","temp__5735__auto__","cljs.core/subs","status-im.ethereum.core/address?","native-module.core/address?","status-im.ethereum.core/network->chain-id","status-im.ethereum.core/network->chain-keyword","status-im.ethereum.core/current-network","networks","network-id","status-im.ethereum.core/binance-chain-id?","chain-id","status-im.ethereum.core/binance-chain?","status-im.ethereum.core/custom-rpc-node-id-len","p__18531","map__18533","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","status-im.ethereum.core/custom-rpc-node?","cljs.core/count","status-im.ethereum.core/network->network-name","status-im.ethereum.core/network->chain-name","cljs.core/name","p__18563","map__18565","status-im.ethereum.core/get-current-network","current-network","status-im.ethereum.core/chain-keyword","status-im.ethereum.core/chain-id","status-im.ethereum.core/snt-symbol","status-im.ethereum.core/address=","address1","address2","and__4115__auto__","clojure.string/lower-case","status-im.ethereum.core/public-key->address","length","normalized-key","G__18604","status-im.ethereum.core/hex->text","data"],"sourcesContent":["(ns status-im.ethereum.core\n  (:require [clojure.string :as string]\n            [status-im.ethereum.eip55 :as eip55]\n            [native-module.core :as native-module]))\n\n(defn sha3\n  [s]\n  (when s\n    (native-module/sha3 (str s))))\n\n(defn utf8-to-hex\n  [s]\n  (let [hex (native-module/utf8-to-hex (str s))]\n    (if (empty? hex)\n      nil\n      hex)))\n\n(defn hex-to-utf8\n  [s]\n  (let [utf8 (native-module/hex-to-utf8 s)]\n    (if (empty? utf8)\n      nil\n      utf8)))\n\n(def BSC-mainnet-chain-id 56)\n(def BSC-testnet-chain-id 97)\n\n;; IDs standardized in https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md#list-of-chain-ids\n(def chains\n  {:mainnet     {:id 1 :name \"Mainnet\"}\n   :xdai        {:id 100 :name \"xDai\"}\n   :goerli      {:id 5 :name \"Goerli\"}\n   :bsc         {:id   BSC-mainnet-chain-id\n                 :name \"BSC\"}\n   :bsc-testnet {:id   BSC-testnet-chain-id\n                 :name \"BSC tetnet\"}})\n\n(defn chain-id->chain-keyword\n  [i]\n  (or (some #(when (= i (:id (val %))) (key %)) chains)\n      :custom))\n\n(defn chain-id->chain-name\n  [i]\n  (or (some #(when (= i (:id (val %))) (:name (val %))) chains)\n      :custom))\n\n(defn chain-keyword->chain-id\n  [k]\n  (get-in chains [k :id]))\n\n(defn chain-keyword->snt-symbol\n  [k]\n  (case k\n    :mainnet :SNT\n    :STT))\n\n(defn testnet?\n  [id]\n  (contains? #{(chain-keyword->chain-id :goerli)\n               (chain-keyword->chain-id :bsc-testnet)}\n             id))\n\n(defn sidechain?\n  [id]\n  (contains? #{(chain-keyword->chain-id :xdai)\n               (chain-keyword->chain-id :bsc)}\n             id))\n\n(defn network-with-upstream-rpc?\n  [network]\n  (get-in network [:config :UpstreamConfig :Enabled]))\n\n(def hex-prefix \"0x\")\n\n(defn normalized-hex\n  [hex]\n  (when hex\n    (if (string/starts-with? hex hex-prefix)\n      hex\n      (str hex-prefix hex))))\n\n(defn current-address\n  [db]\n  (-> (get-in db [:multiaccount :address])\n      normalized-hex))\n\n(defn get-default-account\n  [accounts]\n  (some #(when (:wallet %) %) accounts))\n\n(defn default-address\n  [db]\n  (-> (get db :multiaccount/accounts)\n      get-default-account\n      :address))\n\n(defn addresses-without-watch\n  [db]\n  (into #{}\n        (remove #(= (:type %) :watch)\n                (map #(eip55/address->checksum (:address %)) (get db :multiaccount/accounts)))))\n\n(defn naked-address\n  [s]\n  (when s\n    (string/replace s hex-prefix \"\")))\n\n(def public-key-length 128)\n\n(defn coordinates\n  [public-key]\n  (when-let [hex (naked-address public-key)]\n    (when (= public-key-length (count (subs hex 2)))\n      {:x (normalized-hex (subs hex 2 66))\n       :y (normalized-hex (subs hex 66))})))\n\n(defn address?\n  [s]\n  (when s\n    (native-module/address? s)))\n\n(defn network->chain-id\n  [network]\n  (get-in network [:config :NetworkId]))\n\n(defn network->chain-keyword\n  [network]\n  (chain-id->chain-keyword (network->chain-id network)))\n\n(defn current-network\n  [db]\n  (let [networks   (get db :networks/networks)\n        network-id (get db :networks/current-network)]\n    (get networks network-id)))\n\n(defn binance-chain-id?\n  [chain-id]\n  (or (= BSC-mainnet-chain-id chain-id)\n      (= BSC-testnet-chain-id chain-id)))\n\n(defn binance-chain?\n  [db]\n  (-> db\n      current-network\n      network->chain-id\n      binance-chain-id?))\n\n(def custom-rpc-node-id-len 45)\n\n(defn custom-rpc-node?\n  [{:keys [id]}]\n  (= custom-rpc-node-id-len (count id)))\n\n(defn network->network-name\n  [network]\n  (chain-id->chain-name (network->chain-id network)))\n\n(defn network->chain-name\n  [network]\n  (-> network\n      network->chain-keyword\n      name))\n\n(defn get-current-network\n  [{:networks/keys [current-network networks]}]\n  (get networks current-network))\n\n(defn chain-keyword\n  [db]\n  (network->chain-keyword (get-current-network db)))\n\n(defn chain-id\n  [db]\n  (network->chain-id (get-current-network db)))\n\n(defn snt-symbol\n  [db]\n  (chain-keyword->snt-symbol (chain-keyword db)))\n\n(defn address=\n  [address1 address2]\n  (and address1\n       address2\n       (= (string/lower-case (normalized-hex address1))\n          (string/lower-case (normalized-hex address2)))))\n\n(defn public-key->address\n  [public-key]\n  (let [length         (count public-key)\n        normalized-key (case length\n                         132 (str \"0x\" (subs public-key 4))\n                         130 public-key\n                         128 (str \"0x\" public-key)\n                         nil)]\n    (when normalized-key\n      (subs (sha3 normalized-key) 26))))\n\n(defn hex->text\n  \"Converts a hexstring to UTF8 text.\"\n  [data]\n  (or (hex-to-utf8 data) data))\n"]}