{"version":3,"sources":["quo2/components/tags/tag.cljs"],"mappings":"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","names":["quo2.components.tags.tag/themes","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-80-opa-5","quo2.foundations.colors/neutral-100","quo2.foundations.colors/neutral-30","quo2.foundations.colors/neutral-80-opa-10","quo2.foundations.colors/neutral-70","quo2.foundations.colors/white-opa-10","quo2.foundations.colors/white","quo2.foundations.colors/neutral-60","quo2.foundations.colors/white-opa-20","quo2.components.tags.tag/tag-resources","size","type","resource","icon-color","label","text-color","labelled?","react-native.core/view","cljs.core/merge","G__16755","js/Error","cljs.core/=","quo2.components.icon/icon","G__16756","quo2.components.markdown.text/text","G__16757","G__16758","quo2.components.tags.tag/tag","_","p__16762","map__16764","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","id","on-press","disabled?","active","accessibility-label","blurred?","override-theme","map__16766","state","border-color","blurred-border-color","cljs.core/get-in","or__4126__auto__","quo2.theme/get-theme","quo2.components.tags.base-tag/base-tag"],"sourcesContent":["(ns quo2.components.tags.tag\n  (:require [quo2.components.icon :as icons]\n            [quo2.components.markdown.text :as text]\n            [quo2.components.tags.base-tag :as base-tag]\n            [quo2.foundations.colors :as colors]\n            [quo2.theme :as theme]\n            [react-native.core :as rn]))\n\n(def themes\n  {:light {:default  {:border-color         colors/neutral-20\n                      :blurred-border-color colors/neutral-80-opa-5\n                      :text-color           {:style {:color colors/neutral-100}}}\n           :active   {:border-color         colors/neutral-30\n                      :blurred-border-color colors/neutral-80-opa-10\n                      :text-color           {:style {:color colors/neutral-100}}}\n           :disabled {:border-color         colors/neutral-20\n                      :blurred-border-color colors/neutral-80-opa-5\n                      :text-color           {:style {:color colors/neutral-100}}}}\n   :dark  {:default  {:border-color         colors/neutral-70\n                      :blurred-border-color colors/white-opa-10\n                      :text-color           {:style {:color colors/white}}}\n           :active   {:border-color         colors/neutral-60\n                      :blurred-border-color colors/white-opa-20\n                      :text-color           {:style {:color colors/white}}}\n           :disabled {:border-color         colors/neutral-70\n                      :blurred-border-color colors/white-opa-10\n                      :text-color           {:style {:color colors/white}}}}})\n\n(defn tag-resources\n  [size type resource icon-color label text-color labelled?]\n  [rn/view\n   {:style (merge {:flex-direction  :row\n                   :align-items     :center\n                   :justify-content :center}\n                  (when label\n                    {:padding-horizontal (case size\n                                           32 12\n                                           24 8)}))}\n   (when (= type :icon)\n     [icons/icon resource\n      {:container-style (when label\n                          {:margin-right 4})\n       :resize-mode     :center\n       :size            (case size\n                          32 20\n                          24 12)\n       :color           icon-color}])\n   (when (= type :emoji)\n     [text/text\n      {:style {:margin-right 4}\n       :size  (case size\n                32 :paragraph-1\n                24 :paragraph-2\n                nil)}\n      resource])\n   (when labelled?\n     [text/text\n      (merge {:size            (case size\n                                 32 :paragraph-1\n                                 24 :paragraph-2\n                                 20 :label\n                                 nil)\n              :weight          :medium\n              :number-of-lines 1}\n             text-color)\n      label])])\n\n(defn tag\n  \"opts\n   {:type         :icon/:emoji/:label\n    :label        string\n    :size         32/24\n    :on-press     fn\n    :blurred?     true/false \n    :resource     icon/image\n    :labelled?    true/false\n    :disabled?    true/false}\n  \n   opts\n    - `blurred`  boolean: use to determine border color if the background is blurred\n    - `type`     can be icon or emoji with or without a tag label\n    - `labelled` boolean: is true if tag has label else false\"\n  [_ _]\n  (fn\n    [{:keys [id\n             on-press\n             disabled?\n             size\n             active\n             accessibility-label\n             label\n             resource\n             type\n             labelled?\n             blurred?\n             icon-color\n             override-theme]\n      :or   {size 32}}]\n    (let [state (cond disabled? :disabled\n                      active    :active\n                      :else     :default)\n          {:keys [border-color blurred-border-color text-color]}\n          (get-in themes [(or override-theme (theme/get-theme)) state])]\n      [rn/view {:style {:align-items :center}}\n       [base-tag/base-tag\n        {:id                  id\n         :size                size\n         :border-width        1\n         :border-color        (if blurred?\n                                blurred-border-color\n                                border-color)\n         :on-press            on-press\n         :accessibility-label accessibility-label\n         :disabled?           disabled?\n         :type                type\n         :labelled?           (if (= type :label) true labelled?)}\n        [tag-resources size type resource icon-color label text-color labelled?]]])))\n\n"]}