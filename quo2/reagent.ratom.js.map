{"version":3,"sources":["reagent/ratom.cljs"],"mappings":"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","names":["js/reagent","js/reagent.ratom","js/reagent.ratom.debug","reagent.ratom/debug","js/reagent.ratom.generation","reagent.ratom/generation","js/reagent.ratom.-running","reagent.ratom/-running","cljs.core/atom","reagent.ratom/reactive?","reagent.ratom/*ratom-context*","reagent.ratom/running","cljs.core/deref","reagent.ratom/arr-len","x","reagent.ratom/arr-eq","y","len","i","or__4126__auto__","reagent.ratom/in-context","obj","f","*ratom-context*-orig-val__9660","*ratom-context*-temp-val__9661","reagent.ratom/deref-capture","r","res","c","reagent.ratom/notify-deref-watcher!","derefed","temp__5739__auto__","reagent.ratom/check-watches","old","new","cljs.core/swap!","cljs.core/+","cljs.core/count","reagent.ratom/add-w","this","key","w","cljs.core/assoc","reagent.ratom/remove-w","cljs.core/dissoc","reagent.ratom/notify-w","a","p1__9667#","p2__9668#","p3__9669#","cljs.core/reduce-kv","G__9672","k","reagent.ratom/pr-atom","writer","opts","s","v","cljs.core/-write","cljs.core/pr-writer","*ratom-context*-orig-val__9694","*ratom-context*-temp-val__9695","js/reagent.ratom.rea-queue","reagent.ratom/rea-queue","reagent.ratom/rea-enqueue","reagent.impl.batching/schedule","reagent.ratom/IReactiveAtom","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","reagent.ratom/RAtom","reagent.ratom/->RAtom","state","meta","validator","watches","o","other","new-value","js/Error","old-value","cljs.core/-reset!","more","cljs.core/apply","_","new-meta","cljs.core/-deref","goog/getUid","var_args","G__9742","reagent.ratom/atom","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","p__9760","map__9764","cljs.core/hash-map","cljs.core/get","seq9740","G__9741","cljs.core/first","cljs.core/next","self__4723__auto__","reagent.ratom/cached-reaction","destroy","m","reagent.ratom/make-reaction","cljs.core/dec","cljs.core/inc","reagent.ratom/Track","reagent.ratom/->Track","args","reaction","temp__5737__auto__","cljs.core/=","cljs.core/hash","reagent.ratom/make-track","reagent.ratom/make-track!","t","args__4742__auto__","argseq__4743__auto__","reagent.ratom/track","seq9778","G__9779","cljs.core/ifn?","reagent.ratom/track!","seq9783","G__9785","reagent.ratom/RCursor","reagent.ratom/->RCursor","ratom","path","*ratom-context*-orig-val__9793","*ratom-context*-temp-val__9794","oldstate","newstate","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core/get-in","cljs.core/reset!","cljs.core/assoc-in","reagent.ratom/cursor","src","cljs.core/vector?","cljs.core/pr-str","reagent.ratom/with-let-destroy","reagent.ratom/with-let-values","reagent$ratom$IDisposable$dispose_BANG_$dyn","x__4428__auto__","m__4429__auto__","reagent.ratom/dispose!","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","reagent$ratom$IDisposable$add_on_dispose_BANG_$dyn","reagent.ratom/add-on-dispose!","reagent.ratom/IDisposable","reagent$ratom$IRunnable$run$dyn","reagent.ratom/run","reagent.ratom/IRunnable","reagent.ratom/handle-reaction-change","sender","p__9889","map__9890","reagent.ratom/Reaction","reagent.ratom/->Reaction","dirty?","nocache?","watching","auto-run","caught","was-empty","cljs.core/empty?","newval","cljs.core/fn?","oldval","*ratom-context*-orig-val__9862","*ratom-context*-temp-val__9863","cljs.core/set","seq__9865","cljs.core/seq","chunk__9866","count__9867","i__9868","cljs.core/-nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","clojure.set/difference","cljs.core/-add-watch","seq__9880","chunk__9881","count__9882","i__9883","cljs.core/-remove-watch","e9887","e","check","on-set","on-dispose","no-cache","reagent.ratom/flush!","non-reactive","wg","seq__9898","chunk__9899","count__9900","i__9901","n__4613__auto__","q","reagent.impl.batching/ratom-flush","p__9956","map__9957","seq9944","G__9945","reagent.ratom/temp-reaction","reagent.ratom/run-in-reaction","run","goog.object/set","reagent.ratom/check-derefs","ctx","reagent.ratom/Wrapper","reagent.ratom/->Wrapper","callback","changed","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","cljs.core/not","reagent.ratom/make-wrapper","value","callback-fn","reagent.impl.util/make-partial-fn"],"sourcesContent":["(ns reagent.ratom\n  (:refer-clojure :exclude [atom])\n  (:require-macros [reagent.ratom])\n  (:require [reagent.impl.util :as util]\n            [reagent.debug :refer-macros [warn dev?]]\n            [reagent.impl.batching :as batch]\n            [clojure.set :as s]\n            [goog.object :as obj]))\n\n(declare flush!)\n\n(declare ^:dynamic *ratom-context*)\n(defonce ^boolean debug false)\n(defonce ^:private generation 0)\n(defonce ^:private -running (clojure.core/atom 0))\n\n(defn ^boolean reactive? []\n  (some? *ratom-context*))\n\n\n;;; Utilities\n\n(defn running []\n  (+ @-running))\n\n(defn- ^number arr-len [x]\n  (if (nil? x) 0 (alength x)))\n\n(defn- ^boolean arr-eq [x y]\n  (let [len (arr-len x)]\n    (and (== len (arr-len y))\n         (loop [i 0]\n           (or (== i len)\n               (if (identical? (aget x i) (aget y i))\n                 (recur (inc i))\n                 false))))))\n\n(defn- in-context\n  \"When f is executed, if (f) derefs any ratoms, they are then added to 'obj.captured'(*ratom-context*).\n\n  See function notify-deref-watcher! to know how *ratom-context* is updated\"\n  [obj f]\n  (binding [*ratom-context* obj]\n    (f)))\n\n(defn- deref-capture\n  \"Returns `(in-context r f)`.  Calls `_update-watching` on r with any\n  `deref`ed atoms captured during `in-context`, if any differ from the\n  `watching` field of r.  Clears the `dirty?` flag on r.\n\n  Inside '_update-watching' along with adding the ratoms in 'r.watching' of reaction,\n  the reaction is also added to the list of watches on each ratoms f derefs.\"\n  [f ^clj r]\n  (set! (.-captured r) nil)\n  (when (dev?)\n    (set! (.-ratomGeneration r) (set! generation (inc generation))))\n  (let [res (in-context r f)\n        c (.-captured r)]\n    (set! (.-dirty? r) false)\n    ;; Optimize common case where derefs occur in same order\n    (when-not (arr-eq c (.-watching r))\n      (._update-watching r c))\n    res))\n\n(defn- notify-deref-watcher!\n  \"Add `derefed` to the `captured` field of `*ratom-context*`.\n\n  See also `in-context`\"\n  [derefed]\n  (when-some [^clj r *ratom-context*]\n    (let [c (.-captured r)]\n      (if (nil? c)\n        (set! (.-captured r) (array derefed))\n        (.push c derefed)))))\n\n(defn- check-watches [old new]\n  (when debug\n    (swap! -running + (- (count new) (count old))))\n  new)\n\n(defn- add-w [^clj this key f]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (assoc w key f)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- remove-w [^clj this key]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (dissoc w key)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- notify-w [^clj this old new]\n  (let [w (.-watchesArr this)\n        a (if (nil? w)\n            ;; Copy watches to array for speed\n            (->> (.-watches this)\n                 (reduce-kv #(doto %1 (.push %2) (.push %3)) #js[])\n                 (set! (.-watchesArr this)))\n            w)\n        len (alength a)]\n    (loop [i 0]\n      (when (< i len)\n        (let [k (aget a i)\n              f (aget a (inc i))]\n          (f k this old new))\n        (recur (+ 2 i))))))\n\n(defn- pr-atom [a writer opts s v]\n  (-write writer (str \"#object[reagent.ratom.\" s \" \"))\n  (pr-writer (binding [*ratom-context* nil] v) writer opts)\n  (-write writer \"]\"))\n\n\n;;; Queueing\n\n(defonce ^:private rea-queue nil)\n\n(defn- rea-enqueue [r]\n  (when (nil? rea-queue)\n    (set! rea-queue #js [])\n    (batch/schedule))\n  (.push rea-queue r))\n\n;;; Atom\n\n(defprotocol IReactiveAtom)\n\n(deftype RAtom [^:mutable state meta validator ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [this]\n    (notify-deref-watcher! this)\n    state)\n\n  IReset\n  (-reset! [a new-value]\n    (when-not (nil? validator)\n      (assert (validator new-value) \"Validator rejected reference state\"))\n    (let [old-value state]\n      (set! state new-value)\n      (when-not (nil? watches)\n        (notify-w a old-value new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (RAtom. state new-meta validator watches))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"RAtom\" {:val (-deref a)}))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\"\n  ([x] (->RAtom x nil nil nil))\n  ([x & {:keys [meta validator]}] (->RAtom x meta validator nil)))\n\n\n;;; track\n\n(declare make-reaction)\n\n(defn- cached-reaction [f ^clj o k ^clj obj destroy]\n  (let [m (.-reagReactionCache o)\n        m (if (nil? m) {} m)\n        r (m k nil)]\n    (cond\n      (some? r) (-deref r)\n      (nil? *ratom-context*) (f)\n      :else (let [r (make-reaction\n                     f :on-dispose (fn [x]\n                                     (when debug (swap! -running dec))\n                                     (as-> (.-reagReactionCache o) _\n                                       (dissoc _ k)\n                                       (set! (.-reagReactionCache o) _))\n                                     (when (some? obj)\n                                       (set! (.-reaction obj) nil))\n                                     (when (some? destroy)\n                                       (destroy x))))\n                  v (-deref r)]\n              (set! (.-reagReactionCache o) (assoc m k r))\n              (when debug (swap! -running inc))\n              (when (some? obj)\n                (set! (.-reaction obj) r))\n              v))))\n\n(deftype Track [f args ^:mutable reaction]\n  IReactiveAtom\n\n  IDeref\n  (-deref [this]\n    (if-some [r reaction]\n      (-deref r)\n      (cached-reaction #(apply f args) f args this nil)))\n\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? Track other)\n         (= f (.-f other))\n         (= args (.-args other))))\n\n  IHash\n  (-hash [_] (hash [f args]))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Track\" {:val (-deref a)\n                                                    :f f})))\n\n(defn make-track [f args]\n  (Track. f args nil))\n\n(defn make-track! [f args]\n  (let [t (make-track f args)\n        r (make-reaction #(-deref t)\n                         :auto-run true)]\n    @r\n    r))\n\n(defn track [f & args]\n  {:pre [(ifn? f)]}\n  (make-track f args))\n\n(defn track! [f & args]\n  {:pre [(ifn? f)]}\n  (make-track! f args))\n\n;;; cursor\n\n(deftype RCursor [ratom path ^:mutable reaction\n                  ^:mutable state ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? RCursor other)\n         (= path (.-path other))\n         (= ratom (.-ratom other))))\n\n  Object\n  (_peek [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_set-state [this oldstate newstate]\n    (when-not (identical? oldstate newstate)\n      (set! state newstate)\n      (when (some? watches)\n        (notify-w this oldstate newstate))))\n\n  IDeref\n  (-deref [this]\n    (let [oldstate state\n          newstate (if-some [r reaction]\n                     (-deref r)\n                     (let [f (if (satisfies? IDeref ratom)\n                               #(get-in @ratom path)\n                               #(ratom path))]\n                       (cached-reaction f ratom path this nil)))]\n      (._set-state this oldstate newstate)\n      newstate))\n\n  IReset\n  (-reset! [this new-value]\n    (let [oldstate state]\n      (._set-state this oldstate new-value)\n      (if (satisfies? IDeref ratom)\n        (if (= path [])\n          (reset! ratom new-value)\n          (swap! ratom assoc-in path new-value))\n        (ratom path new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek a))))\n  (-swap! [a f x]        (-reset! a (f (._peek a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek a) x y more)))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"RCursor\" {:val (-deref a)\n                                                      :path path}))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [_] (hash [ratom path])))\n\n(defn cursor\n  [^clj src path]\n  (assert (or (satisfies? IReactiveAtom src)\n              (and (ifn? src)\n                   (not (vector? src))))\n          (str \"src must be a reactive atom or a function, not \"\n               (pr-str src)\n               \" while attempting to get path: \"\n               (pr-str path)))\n  (->RCursor src path nil nil nil))\n\n\n;;; with-let support\n\n(defn with-let-destroy [v]\n  (when-some [f (.-destroy v)]\n    (f)))\n\n(defn with-let-values [key]\n  (if-some [c *ratom-context*]\n    (cached-reaction (fn [] #js []) c key nil with-let-destroy)\n    #js []))\n\n\n;;;; reaction\n\n(defprotocol IDisposable\n  (dispose! [this])\n  (add-on-dispose! [this f]))\n\n(defprotocol IRunnable\n  (run [this]))\n\n(defn- handle-reaction-change [^clj this sender old new]\n  (._handle-change this sender old new))\n\n;; Fields of a Reaction javascript object\n;; - auto_run\n;; - captured\n;; - caught\n;; - f\n;; - ratomGeneration\n;; - state\n;; - watches\n;; - watching\n(deftype Reaction [f ^:mutable state ^:mutable ^boolean dirty? ^boolean nocache?\n                   ^:mutable watching ^:mutable watches ^:mutable auto-run\n                   ^:mutable caught]\n  IAtom\n  IReactiveAtom\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]\n    (let [was-empty (empty? watches)]\n      (remove-w this key)\n      (when (and (not was-empty)\n                 (empty? watches)\n                 (nil? auto-run))\n        (dispose! this))))\n\n  IReset\n  (-reset! [a newval]\n    (assert (fn? (.-on-set a)) \"Reaction is read only; on-set is not allowed\")\n    (let [oldval state]\n      (set! state newval)\n      (.on-set a oldval newval)\n      (notify-w a oldval newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek-at a))))\n  (-swap! [a f x]        (-reset! a (f (._peek-at a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek-at a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek-at a) x y more)))\n\n  Object\n  (_peek-at [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_handle-change [this sender oldval newval]\n    (when-not (or (identical? oldval newval)\n                  dirty?)\n      (if (nil? auto-run)\n        (do\n          (set! dirty? true)\n          (rea-enqueue this))\n        (if (true? auto-run)\n          (._run this false)\n          (auto-run this)))))\n\n  (_update-watching [this derefed]\n    (let [new (set derefed)\n          old (set watching)]\n      (set! watching derefed)\n      (doseq [w (s/difference new old)]\n        (-add-watch w this handle-reaction-change))\n      (doseq [w (s/difference old new)]\n        (-remove-watch w this))))\n\n  (_queued-run [this]\n    (when (and dirty? (some? watching))\n      (._run this true)))\n\n  (_try-capture [this f]\n    (try\n      (set! caught nil)\n      (deref-capture f this)\n      (catch :default e\n        (set! state e)\n        (set! caught e)\n        (set! dirty? false))))\n\n  (_run [this check]\n    (let [oldstate state\n          res (if check\n                (._try-capture this f)\n                (deref-capture f this))]\n      (when-not nocache?\n        (set! state res)\n        ;; Use = to determine equality from reactions, since\n        ;; they are likely to produce new data structures.\n        (when-not (or (nil? watches)\n                      (= oldstate res))\n          (notify-w this oldstate res)))\n      res))\n\n  (_set-opts [this {:keys [auto-run on-set on-dispose no-cache]}]\n    (when (some? auto-run)\n      (set! (.-auto-run this) auto-run))\n    (when (some? on-set)\n      (set! (.-on-set this) on-set))\n    (when (some? on-dispose)\n      (set! (.-on-dispose this) on-dispose))\n    (when (some? no-cache)\n      (set! (.-nocache? this) no-cache)))\n\n  IRunnable\n  (run [this]\n    (flush!)\n    (._run this false))\n\n  IDeref\n  (-deref [this]\n    (when-some [e caught]\n      (throw e))\n    (let [non-reactive (nil? *ratom-context*)]\n      (when non-reactive\n        (flush!))\n      (if (and non-reactive (nil? auto-run))\n        (when dirty?\n          (let [oldstate state]\n            (set! state (f))\n            (when-not (or (nil? watches) (= oldstate state))\n              (notify-w this oldstate state))))\n        (do\n          (notify-deref-watcher! this)\n          (when dirty?\n            (._run this false)))))\n    state)\n\n  IDisposable\n  (dispose! [this]\n    (let [s state\n          wg watching]\n      (set! watching nil)\n      (set! state nil)\n      (set! auto-run nil)\n      (set! dirty? true)\n      (doseq [w (set wg)]\n        (-remove-watch w this))\n      (when (some? (.-on-dispose this))\n        (.on-dispose this s))\n      (when-some [a (.-on-dispose-arr this)]\n        (dotimes [i (alength a)]\n          ((aget a i) this)))))\n\n  (add-on-dispose! [this f]\n    ;; f is called with the reaction as argument when it is no longer active\n    (if-some [a (.-on-dispose-arr this)]\n      (.push a f)\n      (set! (.-on-dispose-arr this) (array f))))\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Reaction\" {:val (-deref a)}))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn flush! []\n  (loop []\n    (let [q rea-queue]\n      (when-not (nil? q)\n        (set! rea-queue nil)\n        (dotimes [i (alength q)]\n          (let [^Reaction r (aget q i)]\n            (._queued-run r)))\n        (recur)))))\n\n(set! batch/ratom-flush flush!)\n\n(defn make-reaction [f & {:keys [auto-run on-set on-dispose]}]\n  (let [reaction (->Reaction f nil true false nil nil nil nil)]\n    (._set-opts reaction {:auto-run auto-run\n                          :on-set on-set\n                          :on-dispose on-dispose})\n    reaction))\n\n\n\n(def ^:private temp-reaction (make-reaction nil))\n\n\n(defn run-in-reaction\n  \"Evaluates `f` and returns the result.  If `f` calls `deref` on any ratoms,\n   creates a new Reaction that watches those atoms and calls `run` whenever\n   any of those watched ratoms change.  Also, the new reaction is added to\n   list of 'watches' of each of the ratoms. The `run` parameter is a function\n   that should expect one argument.  It is passed `obj` when run.  The `opts`\n   are any options accepted by a Reaction and will be set on the newly created\n   Reaction. Sets the newly created Reaction to the `key` on `obj`.\"\n  [f obj key run opts]\n  (let [r temp-reaction\n        res (deref-capture f r)]\n    (when-not (nil? (.-watching r))\n      (set! temp-reaction (make-reaction nil))\n      (._set-opts r opts)\n      (set! (.-f r) f)\n      (set! (.-auto-run r) #(run obj))\n      (obj/set obj key r))\n    res))\n\n(defn check-derefs [f]\n  (let [ctx (js-obj)\n        res (in-context ctx f)]\n    [res (some? (.-captured ctx))]))\n\n\n;;; wrap\n\n(deftype Wrapper [^:mutable state callback ^:mutable ^boolean changed\n                  ^:mutable watches]\n\n  IAtom\n\n  IDeref\n  (-deref [this]\n    (when (dev?)\n      (when (and changed (some? *ratom-context*))\n        (warn \"derefing stale wrap: \"\n              (pr-str this))))\n    state)\n\n  IReset\n  (-reset! [this newval]\n    (let [oldval state]\n      (set! changed true)\n      (set! state newval)\n      (when (some? watches)\n        (notify-w this oldval newval))\n      (callback newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IEquiv\n  (-equiv [this ^clj other]\n    (and (instance? Wrapper other)\n         ;; If either of the wrappers have changed, equality\n         ;; cannot be relied on.\n         (not changed)\n         (not (.-changed other))\n         (= state (.-state other))\n         (= callback (.-callback other))))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Wrapper\" {:val (-deref a)})))\n\n(defn make-wrapper [value callback-fn args]\n  (->Wrapper value\n             (util/make-partial-fn callback-fn args)\n             false nil))\n\n\n\n\n#_(do\n  (defn ratom-perf []\n    (set! debug false)\n    (dotimes [_ 10]\n      (let [nite 100000\n            a (atom 0)\n            f (fn []\n                (quot @a 10))\n            mid (make-reaction f)\n            res (track! (fn []\n                          ;; (with-let [x 1])\n                          ;; @(track f)\n                          (inc @mid)\n                          ))]\n        @res\n        (time (dotimes [x nite]\n                (swap! a inc)\n                (flush!)))\n        (dispose! res))))\n  (ratom-perf))\n"]}