{"version":3,"sources":["quo2/components/tabs/segmented_tab.cljs"],"mappings":"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","names":["quo2.components.tabs.segmented-tab/themes-for-blur","quo2.foundations.colors/neutral-80-opa-5","quo2.foundations.colors/white-opa-5","quo2.components.tabs.segmented-tab/themes","quo2.foundations.colors/neutral-10","quo2.foundations.colors/neutral-90","p__19433","map__19436","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.tabs.segmented-tab/segmented-control","default-active","on-change","active-tab-id","reagent.core/atom","p__19445","map__19447","data","size","override-theme","blur?","container-style","item-container-style","active-item-container-style","cljs.core/deref","active-id","react-native.core/view","cljs.core/merge","cljs.core/get-in","or__4126__auto__","quo2.theme/get-theme","G__19472","js/Error","iter__4529__auto__","s__19482","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__19484","cljs.core/chunk-buffer","i__19483","vec__19493","cljs.core/-nth","cljs.core/nth","map__19496","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__19481","cljs.core/chunk-rest","vec__19510","cljs.core/first","map__19513","cljs.core/cons","cljs.core/rest","indx","label","id","cljs.core/map-indexed","cljs.core/vector","cljs.core/=","quo2.components.tabs.tab.view/view","tab-id","cljs.core/reset!","cljs.core/chunk-first"],"sourcesContent":["(ns quo2.components.tabs.segmented-tab\n  (:require [quo2.components.tabs.tab.view :as tab]\n            [quo2.foundations.colors :as colors]\n            [quo2.theme :as theme]\n            [react-native.core :as rn]\n            [reagent.core :as reagent]))\n\n(def themes-for-blur\n  {:light {:background-color colors/neutral-80-opa-5}\n   :dark  {:background-color colors/white-opa-5}})\n\n(def themes\n  {:light {:background-color colors/neutral-10}\n   :dark  {:background-color colors/neutral-90}})\n\n(defn segmented-control\n  [{:keys [default-active on-change]}]\n  (let [active-tab-id (reagent/atom default-active)]\n    (fn [{:keys [data size override-theme blur? container-style item-container-style\n                 active-item-container-style]}]\n      (let [active-id @active-tab-id]\n        [rn/view\n         (merge\n          {:flex-direction   :row\n           :background-color (get-in (if blur? themes-for-blur themes)\n                                     [(or override-theme (theme/get-theme)) :background-color])\n           :border-radius    (case size\n                               32 10\n                               28 8\n                               24 8\n                               20 6)\n           :padding          2}\n          container-style)\n         (for [[indx {:keys [label id]}] (map-indexed vector data)]\n           ^{:key id}\n           [rn/view\n            {:margin-left (if (= 0 indx) 0 2)\n             :flex        1}\n            [tab/view\n             {:id                          id\n              :active-item-container-style active-item-container-style\n              :item-container-style        item-container-style\n              :segmented?                  true\n              :size                        size\n              :override-theme              override-theme\n              :blur?                       blur?\n              :active                      (= id active-id)\n              :on-press                    (fn [tab-id]\n                                             (reset! active-tab-id tab-id)\n                                             (when on-change\n                                               (on-change tab-id)))}\n             label]])]))))\n"]}