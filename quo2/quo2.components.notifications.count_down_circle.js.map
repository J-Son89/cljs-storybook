{"version":3,"sources":["quo2/components/notifications/count_down_circle.cljs"],"mappings":"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","names":["quo2.components.notifications.count-down-circle/get-path-props","size","stroke-width","rotation","half-size","half-stroke-width","arc-radius","arc-diameter","rotation-indicator","cljs.core/=","path-length","js/Math.PI","path","goog.string/format","quo2.components.notifications.count-down-circle/linear-ease","time","start","goal","duration","quo2.components.notifications.count-down-circle/get-start-at","initial-remaining-time","quo2.components.notifications.count-down-circle/themes","quo2.foundations.colors/neutral-80-opa-40","quo2.foundations.colors/white-opa-40","p__19025","map__19026","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.notifications.count-down-circle/circle-timer","color","trail-color","map__19034","or__4126__auto__","max-stroke-width","x__4214__auto__","y__4215__auto__","start-at","elapsed-time","reagent.core/atom","prev-frame-time","frame-request","display-time","swap-elapsed-time-each-frame","frame-time","cljs.core/deref","cljs.core/reset!","js/requestAnimationFrame","delta","current-elapsed","cljs.core/swap!","cljs.core/+","current-display-time","completed?","reagent.core/create-class","js/cancelAnimationFrame","react-native.core/view","react-native.svg/svg","react-native.svg/path","cljs.core/get-in","quo2.theme/get-theme"],"sourcesContent":["(ns quo2.components.notifications.count-down-circle\n  (:require [goog.string :as gstring]\n            [quo2.foundations.colors :as colors]\n            [quo2.theme :as theme]\n            [react-native.core :as rn]\n            [react-native.svg :as svg]\n            [reagent.core :as reagent]))\n\n(defn- get-path-props\n  [size stroke-width rotation]\n  (let [half-size          (/ size 2)\n        half-stroke-width  (/ stroke-width 2)\n        arc-radius         (- half-size half-stroke-width)\n        arc-diameter       (* arc-radius 2)\n        rotation-indicator (if (= rotation :clockwise) \"1,0\" \"0,1\")\n        path-length        (* js/Math.PI arc-diameter)\n        path               (gstring/format\n                            \"m %s,%s a %s,%s 0 %s 0,%s a %s,%s 0 %s 0 ,-%s\"\n                            half-size\n                            half-stroke-width\n                            arc-radius\n                            arc-radius\n                            rotation-indicator\n                            arc-diameter\n                            arc-radius\n                            arc-radius\n                            rotation-indicator\n                            arc-diameter)]\n    {:path        path\n     :path-length path-length}))\n\n(defn- linear-ease\n  [time start goal duration]\n  (if (zero? duration)\n    start\n    (-> time\n        (/ duration)\n        (* goal)\n        (+ start))))\n\n(defn- get-start-at\n  [duration initial-remaining-time]\n  (cond (or (zero? duration) (= duration initial-remaining-time)) 0\n        (number? initial-remaining-time)                          (- duration initial-remaining-time)\n        :else                                                     0))\n\n(def ^:private themes\n  {:color {:dark  colors/neutral-80-opa-40\n           :light colors/white-opa-40}})\n\n(defn circle-timer\n  [{:keys [color duration size stroke-width trail-color rotation initial-remaining-time]}]\n  (let [rotation                     (or rotation :clockwise)\n        duration                     (or duration 4)\n        stroke-width                 (or stroke-width 1)\n        size                         (or size 9)\n        max-stroke-width             (max stroke-width 0)\n        {:keys [path path-length]}   (get-path-props size max-stroke-width rotation)\n        start-at                     (get-start-at duration initial-remaining-time)\n        elapsed-time                 (reagent/atom 0)\n        prev-frame-time              (reagent/atom nil)\n        frame-request                (reagent/atom nil)\n        display-time                 (reagent/atom start-at)\n        ;; get elapsed frame time\n        swap-elapsed-time-each-frame (fn swap-elapsed-time-each-frame [frame-time]\n                                       (if (nil? @prev-frame-time)\n                                         (do (reset! prev-frame-time frame-time)\n                                             (reset! frame-request (js/requestAnimationFrame\n                                                                    swap-elapsed-time-each-frame)))\n                                         (let [delta                (- (/ frame-time 1000)\n                                                                       (/ @prev-frame-time 1000))\n                                               current-elapsed      (swap! elapsed-time + delta)\n                                               current-display-time (+ start-at current-elapsed)\n                                               completed?           (>= current-display-time duration)]\n                                           (reset! display-time (if completed?\n                                                                  duration\n                                                                  current-display-time))\n                                           (when-not completed?\n                                             (reset! prev-frame-time frame-time)\n                                             (reset! frame-request (js/requestAnimationFrame\n                                                                    swap-elapsed-time-each-frame))))))]\n    (reagent/create-class\n     {:component-will-unmount #(js/cancelAnimationFrame @frame-request)\n      :reagent-render\n      (fn []\n        (reset! frame-request (js/requestAnimationFrame swap-elapsed-time-each-frame))\n        [rn/view\n         {:style {:position :relative\n                  :width    size\n                  :height   size}}\n         [svg/svg\n          {:view-box (str \"0 0 \" size \" \" size)\n           :width    size\n           :height   size}\n          [svg/path\n           {:d path :fill :none :stroke (or trail-color :transparent) :stroke-width stroke-width}]\n          (when-not (= @display-time duration)\n            [svg/path\n             {:d                 path\n              :fill              :none\n              :stroke            (or color (get-in themes [:color (theme/get-theme)]))\n              :stroke-linecap    :square\n              :stroke-width      stroke-width\n              :stroke-dasharray  path-length\n              :stroke-dashoffset (linear-ease @display-time 0 path-length duration)}])]])})))\n"]}