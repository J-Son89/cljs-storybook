{"version":3,"sources":["quo2/components/icon.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,AAAA,AAAOA,AACJC;AADH,AAEE,AAAI,AAAAC,AAAUD,AACV,AAAK,AAASA,AACT,AAAK,AAACE,AAAcF;;AAE/B,AAAA,AAAAG,AAAMM,AACHC,AAIAM;AALH,AAAA,AAAAZ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEWJ;AAFX,AAAAQ,AAAAJ,AAAA,AAEiBO;AAFjB,AAAAH,AAAAJ,AAAA,AAEyBQ;AAFzB,AAAAJ,AAAAJ,AAAA,AAGWS;AAHX,AAAAL,AAAAJ,AAAA,AAG2BU;AAH3B,AAAAN,AAAAJ,AAAA,AAAA,AAGgCW;AAHhC,AAME,AAAMD,AAAK,AAAAG,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAA;;;AAAX,AACE,AAAAC,AACkB,AAACE,AAAmBV,AAAUI;AADhD,AAAA,AAAAI;AAAA,AAAAA,AACSC;AADT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGA,AACsBL,AACA,AAAA,AAAA,AAAM,AAACf,AAAaC,AAAOA,AAC3B,AAAA,AAAA,AAAM,AAACD,AAAaY,AAASA,AAC7BI,AACAF;;AAPzB,AAAA,AAAA,AAAA,AAAA,AAQGQ,AAEC,AAAA,AAAA,AAAA,AAACC,AAAeR,AACAA,AAET,AAAA,AAAA,AAAA,AAAA,AAAM,AAACS,AAAIX,AACI,AAAI,AAAK,AAASZ,AAAO,AAAK,AAACE,AAAcF,AAC3CA,AACA,AAACwB,AAAoBC,AAAmBC,AAEzDb,AACcE,AACb,AAACY,AAAkB,AAAK,AAACC,AAAKlB,AAAWI;;;AAEzD,AAAKe,AAAY,AAACC,AAAQrB;AAE1B,AAAA,AAAA,AAAAsB,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFvB;AADJ,AACe,AAAA,AAACuB,AAAKvB;;;AADrB,AAAA,AAAA,AAAMuB,AAEFvB,AAAUyB;AAFd,AAGG,AAACN,AAAYnB,AAAUyB,AAAO,AAACC;;;AAHlC,AAAA,AAAA,AAAMH;;AAAN","names":["quo2.components.icon/valid-color?","color","cljs.core/Keyword","clojure.string/blank?","p__16606","map__16607","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.icon/memo-icon-fn","icon-name","color-2","no-color","container-style","size","accessibility-label","_","or__4126__auto__","temp__5733__auto__","svg-icon","quo2.components.icons.svg/get-icon","react-native.core/image","cljs.core/merge","cljs.core/not","quo2.foundations.colors/theme-colors","quo2.foundations.colors/neutral-100","quo2.foundations.colors/white","quo2.components.icons.icons/icon-source","cljs.core/name","quo2.components.icon/themed-icon","cljs.core/memoize","var_args","G__16621","quo2.components.icon/icon","js/Error","params","quo2.foundations.colors/dark?"],"sourcesContent":["(ns quo2.components.icon\n  (:require [clojure.string :as string]\n            [quo2.components.icons.icons :as icons]\n            [quo2.components.icons.svg :as icons.svg]\n            [quo2.foundations.colors :as colors]\n            [react-native.core :as rn]))\n\n(defn- valid-color?\n  [color]\n  (or (keyword? color)\n      (and (string? color)\n           (not (string/blank? color)))))\n\n(defn memo-icon-fn\n  [icon-name\n   {:keys [color color-2 no-color\n           container-style size accessibility-label]\n    :or   {accessibility-label :icon}}\n   _]\n  (let [size (or size 20)]\n    ^{:key icon-name}\n    (if-let [svg-icon (icons.svg/get-icon icon-name size)]\n      [svg-icon\n       {:size                size\n        :color               (when (valid-color? color) color)\n        :color-2             (when (valid-color? color-2) color-2)\n        :accessibility-label accessibility-label\n        :style               container-style}]\n      [rn/image\n       {:style\n        (merge {:width  size\n                :height size}\n\n               (when (not no-color)\n                 {:tint-color (if (and (string? color) (not (string/blank? color)))\n                                color\n                                (colors/theme-colors colors/neutral-100 colors/white))})\n\n               container-style)\n        :accessibility-label accessibility-label\n        :source (icons/icon-source (str (name icon-name) size))}])))\n\n(def themed-icon (memoize memo-icon-fn))\n\n(defn icon\n  ([icon-name] (icon icon-name nil))\n  ([icon-name params]\n   (themed-icon icon-name params (colors/dark?))))\n"]}