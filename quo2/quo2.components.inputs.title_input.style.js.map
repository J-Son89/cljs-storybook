{"version":3,"sources":["quo2/components/inputs/title_input/style.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,AAAA,AAAMA,AACHC,AAAMC;AADT,AAEE,AAAID;AACF,AAACE,AAAoBC,AAAyBC,AAAoBH;;AAClE,AAACC,AAAoBG,AAAkBC,AAAkBL;;;AAG7D,AAAA,AAAMM,AACHP,AAAMC;AADT,AAEE,AAAID;AACF,AAACE,AAAoBM,AAAyBC,AAAoBR;;AAClE,AAACC,AAAoBQ,AAAkBC,AAAkBV;;;AAE7D,AAAA,AAAOW,AACJZ,AAAMC;AADT,AAEE,AAAID;AACF,AAACE,AAAoBM,AAAyBC;;AAC9C,AAACP,AAAoBQ,AAAkBC,AAAkBV;;;AAE7D,AAAA,AAAOY,AACJb,AAAMC;AADT,AAEE,AAAID;AACF,AAACE,AAAoBM,AAAyBM;;AAC9C,AAACZ,AAAoBQ,AAAkBC,AAAkBV;;;AAE7D,AAAA,AAAMc,AACHC,AAAoBhB,AAAMC;AAD7B,AAEE,AAACgB,AAAa,AAAIjB,AACF,AAACE,AAAoBgB,AAAmBC,AAAalB,AACrD,AAACmB,AAAoBJ,AACA,AAAI,AAAAK,AAAI,AAAA,AAACC,AAAQrB;AAAb,AAAA,AAAAoB;AAAAA;;AAA6BE;;AAAjC,AAAA,AACvB,AAAA,AAAA,AAAIC;;AAEpB,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAMC,AACHC,AAAU3B,AAAMC;AADnB,AAAA,AAAA,AAAA,AAAA,AAGwB,AAAI0B,AACF,AAACf,AAAmBZ,AAAMC,AAC1B,AAACC,AAAoBgB,AAAmBC,AAAalB;;AAE/E,AAAA,AAAM2B,AACH5B,AAAMC;AADT,AAAA,AAAA,AAEU,AAACY,AAAqBb,AAAMC;;AAEtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAK4B;AAML,AAAA,AAAA,AAAA,AAAKC","names":["quo2.components.inputs.title-input.style/get-focused-placeholder-color","blur?","override-theme","quo2.foundations.colors/theme-colors","quo2.foundations.colors/neutral-80-opa-20","quo2.foundations.colors/white-opa-20","quo2.foundations.colors/neutral-30","quo2.foundations.colors/neutral-60","quo2.components.inputs.title-input.style/get-placeholder-color","quo2.foundations.colors/neutral-80-opa-40","quo2.foundations.colors/white-opa-30","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-50","quo2.components.inputs.title-input.style/get-disabled-color","quo2.components.inputs.title-input.style/get-char-count-color","quo2.foundations.colors/white-opa-40","quo2.components.inputs.title-input.style/get-selection-color","customization-color","quo2.foundations.colors/alpha","quo2.foundations.colors/neutral-100","quo2.foundations.colors/white","quo2.foundations.colors/custom-color","or__4126__auto__","cljs.core/=","quo2.foundations.colors/dark?","react-native.platform/ios?","quo2.components.inputs.title-input.style/text-input-container","quo2.components.inputs.title-input.style/title-text","disabled?","quo2.components.inputs.title-input.style/char-count","quo2.components.inputs.title-input.style/container","quo2.components.inputs.title-input.style/counter-container"],"sourcesContent":["(ns quo2.components.inputs.title-input.style\n  (:require [quo2.foundations.colors :as colors]\n            [react-native.platform :as platform]))\n\n(defn get-focused-placeholder-color\n  [blur? override-theme]\n  (if blur?\n    (colors/theme-colors colors/neutral-80-opa-20 colors/white-opa-20 override-theme)\n    (colors/theme-colors colors/neutral-30 colors/neutral-60 override-theme))\n)\n\n(defn get-placeholder-color\n  [blur? override-theme]\n  (if blur?\n    (colors/theme-colors colors/neutral-80-opa-40 colors/white-opa-30 override-theme)\n    (colors/theme-colors colors/neutral-40 colors/neutral-50 override-theme)))\n\n(defn- get-disabled-color\n  [blur? override-theme]\n  (if blur?\n    (colors/theme-colors colors/neutral-80-opa-40 colors/white-opa-30)\n    (colors/theme-colors colors/neutral-40 colors/neutral-50 override-theme)))\n\n(defn- get-char-count-color\n  [blur? override-theme]\n  (if blur?\n    (colors/theme-colors colors/neutral-80-opa-40 colors/white-opa-40)\n    (colors/theme-colors colors/neutral-40 colors/neutral-50 override-theme)))\n\n(defn get-selection-color\n  [customization-color blur? override-theme]\n  (colors/alpha (if blur?\n                  (colors/theme-colors colors/neutral-100 colors/white override-theme)\n                  (colors/custom-color customization-color\n                                       (if (or (= :dark override-theme) colors/dark?) 60 50)))\n                (if platform/ios? 1 0.2)))\n\n(def text-input-container {:flex 1})\n\n(defn title-text\n  [disabled? blur? override-theme]\n  {:text-align-vertical :bottom\n   :color               (if disabled?\n                          (get-disabled-color blur? override-theme)\n                          (colors/theme-colors colors/neutral-100 colors/white override-theme))})\n\n(defn char-count\n  [blur? override-theme]\n  {:color (get-char-count-color blur? override-theme)})\n\n(def container\n  {:flex-direction  :row\n   :flex            1\n   :justify-content :center\n   :align-items     :center})\n\n(def counter-container\n  {:padding-top 8})\n"]}