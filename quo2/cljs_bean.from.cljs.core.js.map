{"version":3,"sources":["cljs_bean/from/cljs/core.cljs"],"mappings":"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","names":["var_args","G__12333","cljs-bean.from.cljs.core/-indexOf","js/Error","coll","x","start","len","cljs.core/count","idx","x__4214__auto__","y__4215__auto__","cljs.core/=","cljs.core/nth","G__12350","cljs-bean.from.cljs.core/-lastIndexOf","x__4217__auto__","y__4218__auto__","G__12355","cljs-bean.from.cljs.core/compare-indexed","xs","ys","xl","yl","n","d","cljs.core/compare","cljs-bean.from.cljs.core/equiv-sequential","y","cljs.core/boolean","cljs.core/sequential?","cljs.core/counted?","cljs.core/seq","cljs.core/first","cljs.core/next","G__12362","cljs-bean.from.cljs.core/ci-reduce","cicoll","f","cnt","cljs.core/-count","val","cljs.core/-nth","nval","cljs.core/deref","cljs.core/reduced?","cljs-bean.from.cljs.core/TransientArrayMap-conj!","tcoll","o","editable?","cljs.core/map-entry?","cljs.core/-assoc!","cljs.core/key","cljs.core/val","cljs.core/vector?","es","temp__5733__auto__","e","cljs-bean.from.cljs.core/PersistentArrayMap-conj","entry","cljs.core/-assoc","ret","cljs-bean.from.cljs.core/TransientVector-assoc!","key","type-name","cljs.core/-assoc-n!","cljs-bean.from.cljs.core/PersistentVector-equiv","other","type","me-iter","cljs.core/-iterator","you-iter","cljs-bean.from.cljs.core/PersistentVector-lookup","k","not-found","cljs-bean.from.cljs.core/PersistentVector-assoc","v","cljs.core/-assoc-n","cljs-bean.from.cljs.core/PersistentVector-contains-key?","cljs.core/integer?"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc cljs-bean.from.cljs.core)\n\n;; Copied and made public, adding ^not-native hints\n(defn -indexOf\n  ([^not-native coll x]\n   (-indexOf coll x 0))\n  ([^not-native coll x start]\n   (let [len (count coll)]\n     (if (>= start len)\n       -1\n       (loop [idx (cond\n                    (pos? start) start\n                    (neg? start) (max 0 (+ start len))\n                    :else start)]\n         (if (< idx len)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (inc idx)))\n           -1))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn -lastIndexOf\n  ([^not-native coll x]\n   (-lastIndexOf coll x (count coll)))\n  ([^not-native coll x start]\n   (let [len (count coll)]\n     (if (zero? len)\n       -1\n       (loop [idx (cond\n                    (pos? start) (min (dec len) start)\n                    (neg? start) (+ len start)\n                    :else start)]\n         (if (>= idx 0)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (dec idx)))\n           -1))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn compare-indexed\n  \"Compare indexed collection.\"\n  ([^not-native xs ys]\n   (let [xl (count xs)\n         yl (count ys)]\n     (cond\n       (< xl yl) -1\n       (> xl yl) 1\n       (== xl 0) 0\n       :else (compare-indexed xs ys xl 0))))\n  ([^not-native xs ys len n]\n   (let [d (compare (nth xs n) (nth ys n))]\n     (if (and (zero? d) (< (+ n 1) len))\n       (recur xs ys len (inc n))\n       d))))\n\n;; Copied and made public, adding ^not-native hint\n(defn equiv-sequential\n  \"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.\"\n  [^not-native x y]\n  (boolean\n    (when (sequential? y)\n      (if (and (counted? x) (counted? y)\n            (not (== (count x) (count y))))\n        false\n        (loop [xs (seq x) ys (seq y)]\n          (cond (nil? xs) (nil? ys)\n                (nil? ys) false\n                (= (first xs) (first ys)) (recur (next xs) (next ys))\n                :else false))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn ci-reduce\n  \"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization\"\n  ([^not-native cicoll f]\n   (let [cnt (-count cicoll)]\n     (if (zero? cnt)\n       (f)\n       (loop [val (-nth cicoll 0), n 1]\n         (if (< n cnt)\n           (let [nval (f val (-nth cicoll n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n  ([^not-native cicoll f val]\n   (let [cnt (-count cicoll)]\n     (loop [val val, n 0]\n       (if (< n cnt)\n         (let [nval (f val (-nth cicoll n))]\n           (if (reduced? nval)\n             @nval\n             (recur nval (inc n))))\n         val))))\n  ([^not-native cicoll f val idx]\n   (let [cnt (-count cicoll)]\n     (loop [val val, n idx]\n       (if (< n cnt)\n         (let [nval (f val (-nth cicoll n))]\n           (if (reduced? nval)\n             @nval\n             (recur nval (inc n))))\n         val)))))\n\n;; Copied from TransientArrayMap and modified with editable? param, adding ^not-native hint\n(defn TransientArrayMap-conj! [^not-native tcoll o editable?]\n  (if editable?\n    (cond\n      (map-entry? o)\n      (-assoc! tcoll (key o) (val o))\n\n      (vector? o)\n      (-assoc! tcoll (o 0) (o 1))\n\n      :else\n      (loop [es (seq o) tcoll tcoll]\n        (if-let [e (first es)]\n          (recur (next es)\n            (-assoc! tcoll (key e) (val e)))\n          tcoll)))\n    (throw (js/Error. \"conj! after persistent!\"))))\n\n;; Copied from PersistentArrayMap, adding ^not-native hint\n(defn PersistentArrayMap-conj [^not-native coll entry]\n  (if (vector? entry)\n    (-assoc coll (-nth entry 0) (-nth entry 1))\n    (loop [ret coll es (seq entry)]\n      (if (nil? es)\n        ret\n        (let [e (first es)]\n          (if (vector? e)\n            (recur (-assoc ret (-nth e 0) (-nth e 1))\n              (next es))\n            (throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n;; Copied from TransientVector and parameterized on type-name, adding ^not-native hint\n(defn TransientVector-assoc! [^not-native tcoll key val type-name]\n  (if (number? key)\n    (-assoc-n! tcoll key val)\n    (throw (js/Error. (str type-name \"'s key for assoc! must be a number.\")))))\n\n;; Copied from PersistentVector and parameterized on type and cnt, adding ^not-native hint\n(defn PersistentVector-equiv [^not-native coll other type cnt]\n  (if (instance? type other)\n    (if (== cnt (count other))\n      (let [me-iter  (-iterator coll)\n            you-iter (-iterator other)]\n        (loop []\n          (if ^boolean (.hasNext me-iter)\n            (let [x (.next me-iter)\n                  y (.next you-iter)]\n              (if (= x y)\n                (recur)\n                false))\n            true)))\n      false)\n    (equiv-sequential coll other)))\n\n;; Copied from PersistentVector, adding ^not-native hint\n(defn PersistentVector-lookup [^not-native coll k not-found]\n  (if (number? k)\n    (-nth coll k not-found)\n    not-found))\n\n;; Copied from PersistentVector, adding ^not-native hint\n(defn PersistentVector-assoc [^not-native coll k v]\n  (if (number? k)\n    (-assoc-n coll k v)\n    (throw (js/Error. \"Vector's key for assoc must be a number.\"))))\n\n;; Copied from PersistentVector an parameterized on cnt\n(defn PersistentVector-contains-key? [coll k cnt]\n  (if (integer? k)\n    (and (<= 0 k) (< k cnt))\n    false))\n"]}