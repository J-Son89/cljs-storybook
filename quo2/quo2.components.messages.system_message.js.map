{"version":3,"sources":["quo2/components/messages/system_message.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,AAAA,AAAA,AAAA,AAAA,AAAKA,AACOC,AACAA,AACAC;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AACYC,AACAC,AACUC,AACAC,AACAP,AACVM,AACAE,AACUC,AACAC,AACAV;AAE3B,AAAA,AAAA,AAAAW,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACDI;AADL,AAEE,AAACC,AAAO,AAAKC,AAAIC;AAAT,AAAY,AAACC,AAAIF,AAAIC,AAAE,AAACE,AAAQH;AAChC,AAAC,AAACI,AAAiBxB,AACnB,AAACyB,AAAIP;;;AAJf,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAMA,AAAA,AAAMW,AACHC;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGC,AACCC,AAEyB,AAAA,AAACf,AAE1Ba;;AAEJ,AAAA,AAAAG,AAAMK;AAAN,AAAA,AAAAJ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAT,AAAAS,AAAA,AACWK;AADX,AAAAd,AAAAS,AAAA,AACgBM;AADhB,AAAAf,AAAAS,AAAA,AACsBO;AADtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGV,AAGCW,AAEUH,AACAC,AACAC;;AAEd,AAAA,AAAME,AACHC;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGb,AACCc,AAIoBD;;AAGxB,AAAA,AAAAE,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUO;AAAVN,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAA/B,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAAL,AAAAE,AAAAC,AAAAC;;;AAEA,AAAAK,AAAAD,AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3B,AAAA,AAAA2B,AAAA,AAAA,AAAA,AAAA,AAAA1B,AAAAC,AAAAyB,AAAAA;AAAA,AAAArC,AAAAqC,AAAA,AACWC;AADX,AAAAtC,AAAAqC,AAAA,AACiBhC;AADjB,AAAAL,AAAAqC,AAAA,AAC+BE;AAD/B,AAAAvC,AAAAqC,AAAA,AACsCG;AADtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGlC,AAICO,AAIAP,AAKA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIkC,AACFA,AACCjC,AAEgB,AAAA,AAACf,AACjB,AAAAiD,AAAI,AAACzC,AAAIuC,AAAOD;AAAhB,AAAA,AAAAG;AAAAA;;AAAA,AAAAA,AACIH;AADJ,AAAA,AAAAG;AAAAA;;AAEI,AAAA,AAAkBF;;;AAtB7B,AAuBKnC,AAAaC;;AAElB,AAAA8B,AAAAD,AAAA,AAAA,AAAAQ;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjC,AAAA,AAAAiC,AAAA,AAAA,AAAA,AAAA,AAAAhC,AAAAC,AAAA+B,AAAAA;AAAA,AAAA3C,AAAA2C,AAAA,AACWC;AADX,AAAA5C,AAAA2C,AAAA,AACiBE;AADjB,AAAA7C,AAAA2C,AAAA,AAC0BtC;AAD1B,AAAAL,AAAA2C,AAAA,AACwCJ;AADxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGjC,AAGCO,AAGU,AAAA,AAAA,AAAI,AAAA,AAACiC,AAAEF,AACjB1B,AAAe,AAAA,AAAQ,AAAC6B,AAAMF,AAC9BtC,AAGA,AAAA,AAAO,AAACwC,AAAMF,AACdtC,AAEuB,AAAA,AAACf,AAGxB,AAAA,AAAQ+C,AACRrB,AAAe,AAAA,AAAQ,AAAC8B,AAAOH,AAC/BtC,AAGA,AAAA,AAAO,AAACyC,AAAOH,AACfzC,AAAaC;;AAEjB,AAAA8B,AAAAD,AAAA,AAAA,AAAAe;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxC,AAAA,AAAAwC,AAAA,AAAA,AAAA,AAAA,AAAAvC,AAAAC,AAAAsC,AAAAA;AAAA,AAAAlD,AAAAkD,AAAA,AACWN;AADX,AAAA5C,AAAAkD,AAAA,AACiBC;AADjB,AAAAnD,AAAAkD,AAAA,AAC2BV;AAD3B,AAAAxC,AAAAkD,AAAA,AACiC7C;AADjC,AAAAL,AAAAkD,AAAA,AAC+CX;AAD/C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGjC,AAICO,AAGU,AAAA,AAAA,AAAI,AAAA,AAACiC,AAAEF,AACjBtC,AAGCA,AAKC8C,AACeD,AAEf7C,AACCC,AAEgB,AAAA,AAACf,AACjB,AAAA,AAAmB+C,AACpBnC,AAAaC,AACf,AAAA,AAAA,AAAMmC,AACJA;;AAEN,AAAA,AAAAa,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5C,AAAA,AAAA4C,AAAA,AAAA,AAAA,AAAA,AAAA3C,AAAAC,AAAA0C,AAAAA;AAAAA,AACgFO;AADhF,AAAA7D,AAAAsD,AAAA,AACWE;AADX,AAAAxD,AAAAsD,AAAA,AACgBG;AADhB,AAAAzD,AAAAsD,AAAA,AACsBI;AADtB,AAAA1D,AAAAsD,AAAA,AACqCK;AADrC,AAAA3D,AAAAsD,AAAA,AACsDf;AADtD,AAAAvC,AAAAsD,AAAA,AAC6DM;AAD7D,AAEE,AAAME,AAAS,AAACC,AACA,AAAA,AAACvE,AAAc,AAAA,AAAA,AAAImE,AAAmCH;AADtE,AAEE,AAAMG;AAAN,AACE,AAAA,AAAA,AAAA,AAACK,AACAF,AACA,AAAA,AAAA,AAACtE,AAAuBgE;;AAH3B;;AAFF,AAAA,AAAA,AAAA,AASGS;AATH,AAUoB,AAAUP;AAAV;;AAAA,AACE,AAACQ,AAA4BJ,AAAS,AAAA,AAAA,AAACtE,AAAuBgE;;AAXpF,AAAA,AAAA,AAYmBI,AACA,AAAA,AAAA,AAACO,AACmBL,AACnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACM,AAI2BN,AACrBL,AACvBvB,AAAuB2B,AAAQtB;;AAErC,AAAA,AAAM8B,AACHR;AADH,AAAA,AAAA,AAEON,AAAiBM","names":["quo2.components.messages.system-message/themes-landed","quo2.foundations.colors/primary-50-opa-5","quo2.foundations.colors/danger-50-opa-5","quo2.components.messages.system-message/themes","quo2.foundations.colors/neutral-100","quo2.foundations.colors/neutral-50","quo2.foundations.colors/white","quo2.foundations.colors/neutral-5","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-90","quo2.foundations.colors/neutral-80","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","quo2.components.messages.system-message/get-color","seq17214","self__4724__auto__","cljs.core/seq","keys","cljs.core/reduce","acc","k","cljs.core/get","cljs.core/reduced","quo2.theme/get-theme","cljs.core/vec","quo2.components.messages.system-message/sm-timestamp","timestamp-str","react-native.core/view","quo2.components.markdown.text/text","p__17224","map__17225","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","quo2.components.messages.system-message/sm-icon","icon","color","opacity","quo2.components.avatars.icon-avatar/icon-avatar","quo2.components.messages.system-message/sm-user-avatar","image","quo2.components.avatars.user-avatar.view/user-avatar","js/quo2","js/quo2.components","js/quo2.components.messages","js/quo2.components.messages.system-message","js/quo2.components.messages.system-message.system-message-content","method-table__4619__auto__","cljs.core/atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core/MultiFn","cljs.core/symbol","quo2.components.messages.system-message/system-message-content","cljs.core/-add-method","p__17260","map__17261","label","labels","child","or__4126__auto__","p__17276","map__17278","state","mentions","cljs.core/=","cljs.core/first","cljs.core/second","p__17282","map__17283","pinned-by","quo2.components.messages.author.view/author","p__17295","map__17296","quo2.components.messages.system-message/f-system-message","type","style","non-pressable?","animate-landing?","on-long-press","message","sv-color","react-native.reanimated/use-shared-value","react-native.reanimated/animate-shared-value-with-delay","react-native.reanimated/touchable-opacity","react-native.reanimated/set-shared-value","react-native.reanimated/apply-animations-to-style","cljs.core/merge","quo2.components.messages.system-message/system-message"],"sourcesContent":["(ns quo2.components.messages.system-message\n  (:require [quo2.components.avatars.icon-avatar :as icon-avatar]\n            [quo2.components.avatars.user-avatar.view :as user-avatar]\n            [quo2.components.markdown.text :as text]\n            [quo2.components.messages.author.view :as author]\n            [quo2.foundations.colors :as colors]\n            [quo2.theme :as theme]\n            [react-native.core :as rn]\n            [react-native.reanimated :as reanimated]))\n\n(def themes-landed\n  {:pinned  colors/primary-50-opa-5\n   :added   colors/primary-50-opa-5\n   :deleted colors/danger-50-opa-5})\n\n(def themes\n  {:light {:text colors/neutral-100\n           :time colors/neutral-50\n           :bg   {:default colors/white\n                  :pressed colors/neutral-5\n                  :landed  themes-landed}}\n   :dark  {:text colors/white\n           :time colors/neutral-40\n           :bg   {:default colors/neutral-90\n                  :pressed colors/neutral-80\n                  :landed  themes-landed}}})\n\n(defn get-color\n  [& keys]\n  (reduce (fn [acc k] (get acc k (reduced acc)))\n          ((theme/get-theme) themes)\n          (vec keys)))\n\n(defn sm-timestamp\n  [timestamp-str]\n  [rn/view {:margin-left 8}\n   [text/text\n    {:size  :label\n     :style {:color          (get-color :time)\n             :text-transform :none}}\n    timestamp-str]])\n\n(defn sm-icon\n  [{:keys [icon color opacity]}]\n  [rn/view\n   {:align-items  :center\n    :margin-right 8}\n   [icon-avatar/icon-avatar\n    {:size    :medium\n     :icon    icon\n     :color   color\n     :opacity opacity}]])\n\n(defn sm-user-avatar\n  [image]\n  [rn/view {:margin-right 4}\n   [user-avatar/user-avatar\n    {:status-indicator? false\n     :online?           false\n     :size              :xxxs\n     :profile-picture   image\n     :ring?             false}]])\n\n(defmulti system-message-content :type)\n\n(defmethod system-message-content :deleted\n  [{:keys [label timestamp-str labels child]}]\n  [rn/view\n   {:flex-direction :row\n    :flex           1\n    :align-items    :center}\n   [sm-icon\n    {:icon    :main-icons/delete\n     :color   :danger\n     :opacity 5}]\n   [rn/view\n    {:align-items    :baseline\n     :flex-direction :row\n     :flex           1\n     :flex-wrap      :wrap}\n    (if child\n      child\n      [text/text\n       {:size  :paragraph-2\n        :style {:color (get-color :text)}}\n       (or (get labels label)\n           label\n           (:message-deleted labels))])\n    [sm-timestamp timestamp-str]]])\n\n(defmethod system-message-content :added\n  [{:keys [state mentions timestamp-str labels]}]\n  [rn/view\n   {:align-items    :center\n    :flex-direction :row}\n   [sm-icon\n    {:icon    :main-icons/add-user\n     :color   :primary\n     :opacity (if (= state :landed) 0 5)}]\n   [sm-user-avatar (:image (first mentions))]\n   [text/text\n    {:weight :semi-bold\n     :size   :paragraph-2}\n    (:name (first mentions))]\n   [text/text\n    {:size  :paragraph-2\n     :style {:color        (get-color :text)\n             :margin-left  3\n             :margin-right 3}}\n    (:added labels)]\n   [sm-user-avatar (:image (second mentions))]\n   [text/text\n    {:weight :semi-bold\n     :size   :paragraph-2}\n    (:name (second mentions))]\n   [sm-timestamp timestamp-str]])\n\n(defmethod system-message-content :pinned\n  [{:keys [state pinned-by child timestamp-str labels]}]\n  [rn/view\n   {:flex-direction :row\n    :flex           1\n    :align-items    :center}\n   [sm-icon\n    {:icon    :main-icons/pin\n     :color   :primary\n     :opacity (if (= state :landed) 0 5)}]\n   [rn/view\n    {:flex-direction :column\n     :flex           1}\n    [rn/view\n     {:align-items    :baseline\n      :flex-direction :row\n      :flex           1\n      :flex-wrap      :wrap}\n     [author/author\n      {:primary-name pinned-by\n       :style        {:margin-right 4}}]\n     [rn/view\n      [text/text\n       {:size  :paragraph-2\n        :style {:color (get-color :text)}}\n       (:pinned-a-message labels)]]\n     [sm-timestamp timestamp-str]]\n    (when child\n      child)]])\n\n(defn- f-system-message\n  [{:keys [type style non-pressable? animate-landing? labels on-long-press] :as message}]\n  (let [sv-color (reanimated/use-shared-value\n                  (get-color :bg (if animate-landing? :landed :default) type))]\n    (when animate-landing?\n      (reanimated/animate-shared-value-with-delay\n       sv-color\n       (get-color :bg :default type)\n       0\n       :linear\n       1000))\n    [reanimated/touchable-opacity\n     {:on-press      #(when-not non-pressable?\n                        (reanimated/set-shared-value sv-color (get-color :bg :pressed type)))\n      :on-long-press on-long-press\n      :style         (reanimated/apply-animations-to-style\n                      {:background-color sv-color}\n                      (merge {:flex-direction     :row\n                              :flex               1\n                              :padding-vertical   8\n                              :padding-horizontal 12\n                              :background-color   sv-color}\n                             style))}\n     [system-message-content message labels]]))\n\n(defn system-message\n  [message]\n  [:f> f-system-message message])\n"]}