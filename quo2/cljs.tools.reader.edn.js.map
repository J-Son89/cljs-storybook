{"version":3,"sources":["cljs/tools/reader/edn.cljs"],"mappings":"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","names":["cljs.tools.reader.edn/macro-terminating?","ch","cljs.tools.reader.edn/macros","cljs.tools.reader.edn/not-constituent?","var_args","G__9657","cljs.tools.reader.edn/read-token","js/Error","rdr","kind","initch","validate-leading?","cljs.core/not","cljs.tools.reader.impl.errors/throw-eof-at-start","and__4115__auto__","cljs.tools.reader.impl.errors/throw-bad-char","sb","js/goog.string.StringBuffer","cljs.tools.reader.reader-types/unread","cljs.tools.reader.impl.utils/whitespace?","G__9665","cljs.tools.reader.reader-types/read-char","cljs.tools.reader.reader-types/peek-char","cljs.tools.reader.edn/read-dispatch","_","opts","temp__5733__auto__","dm","cljs.tools.reader.edn/dispatch-macros","cljs.tools.reader.edn/read-tagged","G__9666","cljs.tools.reader.impl.errors/throw-eof-at-dispatch","cljs.tools.reader.edn/read-unmatched-delimiter","cljs.tools.reader.impl.errors/throw-unmatch-delimiter","G__9671","cljs.tools.reader.edn/read-unicode-char","token","offset","length","base","l","cljs.core/count","cljs.tools.reader.impl.errors/throw-invalid-unicode-literal","i","uc","js/String.fromCharCode","d","cljs.tools.reader.impl.utils/char-code","cljs.core/nth","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token","exact?","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit","or__4126__auto__","cljs.tools.reader.impl.errors/throw-invalid-unicode-len","cljs.tools.reader.edn/upper-limit","cljs.tools.reader.edn/lower-limit","cljs.tools.reader.edn/read-char*","backslash","token-len","goog.string/startsWith","c","ic","cljs.tools.reader.impl.errors/throw-invalid-character-literal","len","cljs.tools.reader.impl.errors/throw-invalid-octal-len","cljs.tools.reader.impl.errors/throw-bad-octal-number","cljs.tools.reader.impl.errors/throw-unsupported-character","cljs.tools.reader.impl.errors/throw-eof-in-character","cljs.tools.reader.edn/starting-line-col-info","cljs.tools.reader.reader-types/indexing-reader?","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.edn/read-delimited","delim","vec__9730","start-line","start-column","cljs.tools.reader.impl.utils/char","a","cljs.core/transient","cljs.tools.reader.impl.commons/read-past","cljs.tools.reader.impl.errors/throw-eof-delimited","cljs.core/=","cljs.core/persistent!","macrofn","mret","cljs.core/conj!","o","cljs.tools.reader.edn/read","G__9749","cljs.tools.reader.edn/read-list","the-list","cljs.core/empty?","cljs.core/apply","cljs.core/list","cljs.tools.reader.edn/read-vector","cljs.tools.reader.edn/read-map","vec__9761","the-map","map-count","ks","cljs.core/take-nth","key-set","cljs.core/set","cljs.core/odd?","cljs.tools.reader.impl.errors/throw-odd-map","cljs.tools.reader.impl.errors/throw-dup-keys","cljs.core/PersistentArrayMap","cljs.core/to-array","cljs.core/PersistentHashMap","cljs.tools.reader.edn/read-number","G__9766","s","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.errors/throw-invalid-number","G__9768","cljs.tools.reader.edn/escape-char","G__9769","js/parseInt","cljs.tools.reader.impl.errors/throw-invalid-unicode-escape","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.impl.errors/throw-bad-escape-char","cljs.tools.reader.edn/read-string*","G__9770","cljs.tools.reader.impl.errors/throw-eof-reading","G__9772","G__9773","cljs.tools.reader.edn/read-symbol","temp__5735__auto__","G__9774","p","cljs.tools.reader.impl.commons/parse-symbol","cljs.core/symbol","cljs.tools.reader.impl.errors/throw-invalid","cljs.tools.reader.edn/read-keyword","reader","ns","name","cljs.core/keyword","cljs.tools.reader.impl.errors/throw-single-colon","cljs.tools.reader.edn/wrapping-reader","sym","cljs.core/List","cljs.tools.reader.edn/read-meta","m","cljs.tools.reader.impl.utils/desugar-meta","cljs.core/map?","cljs.tools.reader.impl.errors/throw-bad-metadata","cljs.core/PROTOCOL_SENTINEL","cljs.core/with-meta","cljs.core/merge","cljs.core/meta","cljs.tools.reader.impl.errors/throw-bad-metadata-target","cljs.tools.reader.edn/read-set","coll","the-set","cljs.tools.reader.edn/read-discard","G__9780","cljs.tools.reader.edn/read-namespaced-map","G__9784","cljs.tools.reader.impl.utils/second'","items","keys","cljs.tools.reader.impl.utils/namespace-keys","vals","cljs.core/rest","cljs.core/zipmap","cljs.tools.reader.impl.errors/throw-ns-map-no-map","cljs.tools.reader.impl.errors/throw-bad-ns","cljs.tools.reader.edn/read-symbolic-value","G__9789","js/Number.NaN","js/Number.NEGATIVE_INFINITY","js/Number.POSITIVE_INFINITY","cljs.tools.reader.impl.errors/reader-error","G__9790","cljs.tools.reader.impl.commons/read-comment","G__9792","cljs.tools.reader.impl.commons/throwing-reader","tag","object","cljs.core/Symbol","cljs.tools.reader.impl.errors/throw-bad-reader-tag","f","cljs.core/get","cljs.tools.reader/default-data-readers","cljs.tools.reader.impl.errors/throw-unknown-reader-tag","G__9799","p__9804","map__9805","cljs.core/hash-map","eof","eof-error?","cljs.core/contains?","e9812","cljs.tools.reader.impl.errors/throw-eof-error","cljs.tools.reader.impl.commons/number-literal?","res","e","cljs.tools.reader.impl.utils/ex-info?","cljs.core/ex-data","cljs.core/ex-info","cljs.tools.reader.reader-types/get-file-name","G__9819","cljs.tools.reader.edn/read-string","cljs.core/not=","cljs.tools.reader.reader-types/string-push-back-reader"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"An EDN reader in clojure\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.edn\n  (:refer-clojure :exclude [read read-string char default-data-readers])\n  (:require [cljs.tools.reader.impl.errors :as err]\n            [cljs.tools.reader.reader-types :refer\n             [read-char unread peek-char indexing-reader?\n              get-line-number get-column-number get-file-name string-push-back-reader]]\n            [cljs.tools.reader.impl.utils :refer\n             [char ex-info? whitespace? numeric? desugar-meta namespace-keys second' char-code]]\n            [cljs.tools.reader.impl.commons :refer\n             [number-literal? read-past match-number parse-symbol read-comment throwing-reader]]\n            [cljs.tools.reader :refer [default-data-readers]]\n            [goog.string :as gstring])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare read macros dispatch-macros)\n\n(defn- ^boolean macro-terminating? [ch]\n  (and (not (identical? \\# ch))\n       (not (identical? \\' ch))\n       (not (identical? \\: ch))\n       (macros ch)))\n\n(defn- ^boolean not-constituent? [ch]\n  (or (identical? \\@ ch)\n      (identical? \\` ch)\n      (identical? \\~ ch)))\n\n(defn- read-token\n  ([rdr kind initch]\n     (read-token rdr kind initch true))\n  ([rdr kind initch validate-leading?]\n     (cond\n      (not initch)\n      (err/throw-eof-at-start rdr kind)\n\n      (and validate-leading?\n           (not-constituent? initch))\n      (err/throw-bad-char rdr kind initch)\n\n      :else\n      (loop [sb (StringBuffer.)\n             ch (do (unread rdr initch) initch)]\n        (if (or (whitespace? ch)\n                (macro-terminating? ch)\n                (nil? ch))\n          (str sb)\n          (if (not-constituent? ch)\n            (err/throw-bad-char rdr kind ch)\n            (recur (doto sb (.append (read-char rdr))) (peek-char rdr))))))))\n\n(declare read-tagged)\n\n(defn- read-dispatch\n  [rdr _ opts]\n  (if-let [ch (read-char rdr)]\n    (if-let [dm (dispatch-macros ch)]\n      (dm rdr ch opts)\n      (read-tagged (doto rdr (unread ch)) ch opts))\n    (err/throw-eof-at-dispatch rdr)))\n\n(defn- read-unmatched-delimiter\n  [rdr ch opts]\n  (err/throw-unmatch-delimiter rdr ch))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- read-unicode-char\n  ([token offset length base]\n     (let [l (+ offset length)]\n       (when-not (== (count token) l)\n         (err/throw-invalid-unicode-literal nil token))\n       (loop [i offset uc 0]\n         (if (== i l)\n           (js/String.fromCharCode uc)\n           (let [d (char-code (nth token i) base)]\n             (if (== d -1)\n               (err/throw-invalid-unicode-digit-in-token nil (nth token i) token)\n               (recur (inc i) (+ d (* uc base)))))))))\n\n  ([rdr initch base length exact?]\n     (loop [i 1 uc (char-code initch base)]\n       (if (== uc -1)\n         (err/throw-invalid-unicode-digit rdr initch)\n         (if-not (== i length)\n           (let [ch (peek-char rdr)]\n             (if (or (whitespace? ch)\n                     (macros ch)\n                     (nil? ch))\n               (if exact?\n                 (err/throw-invalid-unicode-len rdr i length)\n                 (js/String.fromCharCode uc))\n               (let [d (char-code ch base)]\n                 (read-char rdr)\n                 (if (== d -1)\n                   (err/throw-invalid-unicode-digit rdr ch)\n                   (recur (inc i) (+ d (* uc base)))))))\n           (js/String.fromCharCode uc))))))\n\n(def ^:private ^:const upper-limit (.charCodeAt \\uD7ff 0))\n(def ^:private ^:const lower-limit (.charCodeAt \\uE000 0))\n\n(defn- read-char*\n  [rdr backslash opts]\n  (let [ch (read-char rdr)]\n    (if-not (nil? ch)\n      (let [token (if (or (macro-terminating? ch)\n                          (not-constituent? ch)\n                          (whitespace? ch))\n                    (str ch)\n                    (read-token rdr :character ch false))\n            token-len (count token)]\n        (cond\n\n         (== 1 token-len)  (nth token 0)\n\n         (identical? token \"newline\") \\newline\n         (identical? token \"space\") \\space\n         (identical? token \"tab\") \\tab\n         (identical? token \"backspace\") \\backspace\n         (identical? token \"formfeed\") \\formfeed\n         (identical? token \"return\") \\return\n\n         (gstring/startsWith token \"u\")\n         (let [c (read-unicode-char token 1 4 16)\n               ic (.charCodeAt c)]\n           (if (and (> ic upper-limit)\n                    (< ic lower-limit))\n             (err/throw-invalid-character-literal rdr (.toString ic 16))\n             c))\n\n         (gstring/startsWith token \"o\")\n         (let [len (dec token-len)]\n           (if (> len 3)\n             (err/throw-invalid-octal-len rdr token)\n             (let [uc (read-unicode-char token 1 len 8)]\n               (if (> (int uc) 0377)\n                 (err/throw-bad-octal-number rdr)\n                 uc))))\n\n         :else (err/throw-unsupported-character rdr token)))\n      (err/throw-eof-in-character rdr))))\n\n(defn ^:private starting-line-col-info [rdr]\n  (when (indexing-reader? rdr)\n    [(get-line-number rdr) (int (dec (int (get-column-number rdr))))]))\n\n(defn- read-delimited\n  [kind delim rdr opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        delim (char delim)]\n    (loop [a (transient [])]\n      (let [ch (read-past whitespace? rdr)]\n        (when-not ch\n          (err/throw-eof-delimited rdr kind start-line start-column (count a)))\n        (if (= delim (char ch))\n          (persistent! a)\n          (if-let [macrofn (macros ch)]\n            (let [mret (macrofn rdr ch opts)]\n              (recur (if-not (identical? mret rdr) (conj! a mret) a)))\n            (let [o (read (doto rdr (unread ch)) true nil opts)]\n              (recur (if-not (identical? o rdr) (conj! a o) a)))))))))\n\n(defn- read-list\n  [rdr _ opts]\n  (let [the-list (read-delimited :list \\) rdr opts)]\n    (if (empty? the-list)\n      '()\n      (apply list the-list))))\n\n(defn- read-vector\n  [rdr _ opts]\n  (read-delimited :vector \\] rdr opts))\n\n\n(defn- read-map\n  [rdr _ opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        the-map (read-delimited :map \\} rdr opts)\n        map-count (count the-map)\n        ks (take-nth 2 the-map)\n        key-set (set ks)]\n    (when (odd? map-count)\n      (err/throw-odd-map rdr start-line start-column the-map))\n    (when-not (= (count key-set) (count ks))\n      (err/throw-dup-keys rdr :map ks))\n    (if (<= map-count (* 2 (.-HASHMAP-THRESHOLD cljs.core/PersistentArrayMap)))\n      (.fromArray cljs.core/PersistentArrayMap (to-array the-map) true true)\n      (.fromArray cljs.core/PersistentHashMap (to-array the-map) true))))\n\n(defn- read-number\n  [rdr initch opts]\n  (loop [sb (doto (StringBuffer.) (.append initch))\n         ch (read-char rdr)]\n    (if (or (whitespace? ch) (macros ch) (nil? ch))\n      (let [s (str sb)]\n        (unread rdr ch)\n        (or (match-number s)\n            (err/throw-invalid-number rdr s)))\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- escape-char [sb rdr]\n  (let [ch (read-char rdr)]\n    (case ch\n      \\t \"\\t\"\n      \\r \"\\r\"\n      \\n \"\\n\"\n      \\\\ \"\\\\\"\n      \\\" \"\\\"\"\n      \\b \"\\b\"\n      \\f \"\\f\"\n      \\u (let [ch (read-char rdr)]\n           (if (== -1 (js/parseInt (int ch) 16))\n             (err/throw-invalid-unicode-escape rdr ch)\n             (read-unicode-char rdr ch 16 4 true)))\n      (if (numeric? ch)\n        (let [ch (read-unicode-char rdr ch 8 3 false)]\n          (if (> (int ch) 0377)\n            (err/throw-bad-octal-number rdr)\n            ch))\n        (err/throw-bad-escape-char rdr ch)))))\n\n(defn- read-string*\n  [rdr _ opts]\n  (loop [sb (StringBuffer.)\n         ch (read-char rdr)]\n    (case ch\n      nil (err/throw-eof-reading rdr :string \\\" sb)\n      \\\\ (recur (doto sb (.append (escape-char sb rdr)))\n                (read-char rdr))\n      \\\" (str sb)\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- read-symbol\n  [rdr initch]\n  (when-let [token (read-token rdr :symbol initch)]\n    (case token\n\n      ;; special symbols\n      \"nil\" nil\n      \"true\" true\n      \"false\" false\n      \"/\" '/\n\n      (or (when-let [p (parse-symbol token)]\n            (symbol (p 0) (p 1)))\n          (err/throw-invalid rdr :symbol token)))))\n\n(defn- read-keyword\n  [reader initch opts]\n  (let [ch (read-char reader)]\n    (if-not (whitespace? ch)\n      (let [token (read-token reader :keyword ch)\n            s (parse-symbol token)]\n        (if (and s (== -1 (.indexOf token \"::\")))\n          (let [ns (s 0)\n                name (s 1)]\n            (if (identical? \\: (nth token 0))\n              (err/throw-invalid reader :keyword token) ;; no ::keyword in edn\n              (keyword ns name)))\n          (err/throw-invalid reader :keyword token)))\n      (err/throw-single-colon reader))))\n\n(defn- wrapping-reader\n  [sym]\n  (fn [rdr _ opts]\n    (list sym (read rdr true nil opts))))\n\n(defn- read-meta\n  [rdr _ opts]\n  (let [m (desugar-meta (read rdr true nil opts))]\n    (when-not (map? m)\n      (err/throw-bad-metadata rdr m))\n    (let [o (read rdr true nil opts)]\n      (if (implements? IMeta o)\n        (with-meta o (merge (meta o) m))\n        (err/throw-bad-metadata-target rdr o)))))\n\n(defn- read-set\n  [rdr _ opts]\n  (let [coll (read-delimited :set \\} rdr opts)\n        the-set (set coll)]\n      (when-not (= (count coll) (count the-set))\n        (err/throw-dup-keys rdr :set coll))\n      the-set))\n\n(defn- read-discard\n  [rdr _ opts]\n  (doto rdr\n    (read true nil true)))\n\n(defn- read-namespaced-map\n  [rdr _ opts]\n  (let [token (read-token rdr :namespaced-map (read-char rdr))]\n    (if-let [ns (some-> token parse-symbol second')]\n      (let [ch (read-past whitespace? rdr)]\n        (if (identical? ch \\{)\n          (let [items (read-delimited :namespaced-map \\} rdr opts)]\n            (when (odd? (count items))\n              (err/throw-odd-map rdr nil nil items))\n            (let [keys (namespace-keys (str ns) (take-nth 2 items))\n                  vals (take-nth 2 (rest items))]\n              (when-not (= (count (set keys)) (count keys))\n                (err/throw-dup-keys rdr :namespaced-map keys))\n              (zipmap keys vals)))\n          (err/throw-ns-map-no-map rdr token)))\n      (err/throw-bad-ns rdr token))))\n\n(defn- read-symbolic-value\n  [rdr _ opts]\n  (let [sym (read rdr true nil opts)]\n    (case sym\n\n      NaN js/Number.NaN\n      -Inf js/Number.NEGATIVE_INFINITY\n      Inf js/Number.POSITIVE_INFINITY\n\n      (err/reader-error rdr (str \"Invalid token: ##\" sym)))))\n\n(defn- macros [ch]\n  (case ch\n    \\\" read-string*\n    \\: read-keyword\n    \\; read-comment\n    \\^ read-meta\n    \\( read-list\n    \\) read-unmatched-delimiter\n    \\[ read-vector\n    \\] read-unmatched-delimiter\n    \\{ read-map\n    \\} read-unmatched-delimiter\n    \\\\ read-char*\n    \\# read-dispatch\n    nil))\n\n(defn- dispatch-macros [ch]\n  (case ch\n    \\^ read-meta                ;deprecated\n    \\{ read-set\n    \\< (throwing-reader \"Unreadable form\")\n    \\! read-comment\n    \\_ read-discard\n    \\: read-namespaced-map\n    \\# read-symbolic-value\n    nil))\n\n(defn- read-tagged [rdr initch opts]\n  (let [tag (read rdr true nil opts)\n        object (read rdr true nil opts)]\n    (if-not (symbol? tag)\n      (err/throw-bad-reader-tag rdr \"Reader tag must be a symbol\"))\n    (if-let [f (or (get (:readers opts) tag)\n                   (default-data-readers tag))]\n      (f object)\n      (if-let [d (:default opts)]\n        (d tag object)\n        (err/throw-unknown-reader-tag rdr tag)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read\n  \"Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader] (read {} reader))\n  ([{:keys [eof] :as opts} reader]\n     (let [eof-error? (not (contains? opts :eof))]\n       (read reader eof-error? eof opts)))\n  ([reader eof-error? eof opts]\n     (try\n       (loop []\n         (let [ch (read-char reader)]\n           (cond\n            (whitespace? ch) (recur)\n            (nil? ch) (if eof-error? (err/throw-eof-error reader nil) eof)\n            (number-literal? reader ch) (read-number reader ch opts)\n            :else (let [f (macros ch)]\n                    (if f\n                      (let [res (f reader ch opts)]\n                        (if (identical? res reader)\n                          (recur)\n                          res))\n                      (read-symbol reader ch))))))\n       (catch js/Error e\n         (if (ex-info? e)\n           (let [d (ex-data e)]\n             (if (= :reader-exception (:type d))\n               (throw e)\n               (throw (ex-info (.-message e)\n                               (merge {:type :reader-exception}\n                                      d\n                                      (if (indexing-reader? reader)\n                                        {:line   (get-line-number reader)\n                                         :column (get-column-number reader)\n                                         :file   (get-file-name reader)}))\n                               e))))\n           (throw (ex-info (.-message e)\n                           (merge {:type :reader-exception}\n                                  (if (indexing-reader? reader)\n                                    {:line   (get-line-number reader)\n                                     :column (get-column-number reader)\n                                     :file   (get-file-name reader)}))\n                           e)))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read\"\n  ([s] (read-string {:eof nil} s))\n  ([opts s]\n     (when (and s (not= s \"\"))\n       (read opts (string-push-back-reader s)))))\n"]}