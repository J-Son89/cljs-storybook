{"version":3,"sources":["quo2/components/colors/color_picker/view.cljs"],"mappings":"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","names":["quo2.components.colors.color-picker.view/color-list","quo2.components.colors.color-picker.view/picker-colors","blur?","cljs.core/map","color","quo2.foundations.colors/custom-color-by-theme","quo2.components.colors.color-picker.view/on-change-handler","selected","color-name","on-change","cljs.core/reset!","quo2.components.colors.color-picker.view/empty-color-item","react-native.core/view","quo2.components.colors.color-picker.style/color-button-common","p__16699","map__16701","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.colors.color-picker.view/color-item","name","secondary-color","selected?","on-press","border?","cljs.core/not","and__4115__auto__","cljs.core/=","react-native.core/touchable-opacity","quo2.components.colors.color-picker.style/color-button","quo2.components.colors.color-picker.style/color-circle","quo2.components.colors.color-picker.style/secondary-overlay","quo2.components.icon/icon","or__4126__auto__","quo2.foundations.colors/white","p__16715","map__16716","quo2.components.colors.color-picker.view/view","default-selected?","internal-selected","reagent.core/atom","p__16718","map__16719","cljs.core/deref","cljs.core/not=","quo2.components.colors.color-picker.style/color-picker-container","cljs.core/doall","cljs.core/map-indexed","index","p1__16711#","cljs.core/merge","quo2.components.colors.color-picker.style/flex-break"],"sourcesContent":["(ns quo2.components.colors.color-picker.view\n  (:require [react-native.core :as rn]\n            [quo2.foundations.colors :as colors]\n            [quo2.components.icon :as icon]\n            [reagent.core :as reagent]\n            [quo2.components.colors.color-picker.style :as style]))\n\n;; TODO: using :no-color this to keep alignment of colors correct while b & w is being developed.\n;; https://github.com/status-im/status-mobile/issues/15442\n(def color-list\n  [:blue :yellow :turquoise :copper :sky :camel :orange :army :pink :purple :magenta :no-color])\n\n(defn picker-colors\n  [blur?]\n  (map (fn [color]\n         {:name  color\n          :color (colors/custom-color-by-theme color (if blur? 60 50) 60)})\n       color-list))\n\n(defn- on-change-handler\n  [selected color-name on-change]\n  (reset! selected color-name)\n  (when on-change (on-change color-name)))\n\n(defn empty-color-item\n  []\n  [rn/view {:style style/color-button-common}])\n\n(defn- color-item\n  [{:keys [name\n           color\n           secondary-color\n           selected?\n           on-press\n           blur?]}]\n  (let [border? (and (not blur?) (and secondary-color (not selected?)))]\n    (if (= :no-color name)\n      [empty-color-item]\n      [rn/touchable-opacity\n       {:style               (style/color-button color selected?)\n        :accessibility-label :color-picker-item\n        :on-press            #(on-press name)}\n       [rn/view\n        {:accessibile         true\n         :accessibility-label name\n         :style               (style/color-circle color border?)}\n        (when (and secondary-color (not selected?))\n          [rn/view\n           {:style (style/secondary-overlay secondary-color border?)}])\n        (when selected?\n          [icon/icon :i/check\n           {:size  20\n            :color (or secondary-color\n                       colors/white)}])]])))\n\n(defn view\n  \"Options\n   - `default-selected?` Default selected color name.\n   - `selected` Selected color name.\n   - `on-change` Callback called when a color is selected `(fn [color-name])`.\n   - `blur?` Boolean to enable blur background support.}\"\n  [{:keys [default-selected?]}]\n  (let [internal-selected (reagent/atom default-selected?)]\n    (fn [{:keys [blur? on-change selected]}]\n      (when (and (not (nil? selected)) (not= @internal-selected selected))\n        (reset! internal-selected selected))\n      [rn/view {:style style/color-picker-container}\n       (doall (map-indexed (fn [index color]\n                             [:<> {:key (color :name)}\n                              [color-item\n                               (merge color\n                                      {:selected? (= (color :name) @internal-selected)\n                                       :on-press  #(on-change-handler internal-selected % on-change)\n                                       :blur?     blur?})]\n                              (when (= index 5) [rn/view {:style style/flex-break}])])\n                           (picker-colors blur?)))])))\n\n"]}