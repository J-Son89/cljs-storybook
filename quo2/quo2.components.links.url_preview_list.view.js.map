{"version":3,"sources":["quo2/components/links/url_preview_list/view.cljs"],"mappings":"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","names":["quo2.components.links.url-preview-list.view/use-scroll-to-last-item","flat-list-ref","item-count","item-width","react-native.core/use-effect","timer-id","js/setTimeout","and__4115__auto__","cljs.core/deref","quo2.components.links.url-preview-list.style/url-preview-gap","x__4214__auto__","y__4215__auto__","js/clearTimeout","quo2.components.links.url-preview-list.view/separator","react-native.core/view","quo2.components.links.url-preview-list.style/url-preview-separator","p__17159","p__17160","map__17161","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","map__17163","quo2.components.links.url-preview-list.view/item-component","title","body","loading?","logo","_","width","on-clear","loading-message","container-style","quo2.components.links.url-preview.view/view","cljs.core/merge","quo2.components.links.url-preview-list.view/f-view","cljs.core/atom","p__17178","map__17179","p1__17175#","data","key-fn","horizontal-spacing","container-style-item","preview-width","cljs.core/count","react-native.gesture/flat-list","cljs.core/reset!","cljs.core/identity","quo2.components.links.url-preview-list.view/view","props"],"sourcesContent":["(ns quo2.components.links.url-preview-list.view\n  (:require\n    [quo2.components.links.url-preview-list.style :as style]\n    [quo2.components.links.url-preview.view :as url-preview]\n    [react-native.core :as rn]\n    [react-native.gesture :as gesture]))\n\n(defn- use-scroll-to-last-item\n  [flat-list-ref item-count item-width]\n  (rn/use-effect\n   (fn []\n     (when (and (pos? item-count) (pos? item-width))\n       ;; We use a delay because calling `scrollToOffset` without a delay does\n       ;; nothing while the flatlist is still rendering its children.\n       ;; `scrollToEnd` doesn't work because it positions the item off-center\n       ;; and there's no argument to offset it.\n       (let [timer-id (js/setTimeout\n                       (fn []\n                         (when (and @flat-list-ref (pos? item-count))\n                           (.scrollToOffset ^js @flat-list-ref\n                                            #js\n                                             {:animated true\n                                              :offset   (* (+ item-width style/url-preview-gap)\n                                                           (max 0 (dec item-count)))})))\n                       25)]\n         (fn []\n           (js/clearTimeout timer-id)))))\n   [item-count item-width]))\n\n(defn- separator\n  []\n  [rn/view {:style style/url-preview-separator}])\n\n(defn- item-component\n  [{:keys [title body loading? logo]} _ _\n   {:keys [width on-clear loading-message container-style]}]\n  [url-preview/view\n   {:logo            logo\n    :title           title\n    :body            body\n    :loading?        loading?\n    :loading-message loading-message\n    :on-clear        on-clear\n    :container-style (merge container-style {:width width})}])\n\n(defn- f-view\n  []\n  (let [flat-list-ref (atom nil)]\n    (fn [{:keys [data key-fn horizontal-spacing on-clear loading-message\n                 container-style container-style-item\n                 preview-width]}]\n      (use-scroll-to-last-item flat-list-ref (count data) preview-width)\n      ;; We need to use a wrapping view expanded to 100% instead of \"flex 1\",\n      ;; otherwise `on-layout` will be triggered multiple times as the flat list\n      ;; renders its children.\n      [rn/view\n       {:style               container-style\n        :accessibility-label :url-preview-list}\n       [gesture/flat-list\n        {:ref                               #(reset! flat-list-ref %)\n         :keyboard-should-persist-taps      :always\n         :key-fn                            key-fn\n         :horizontal                        true\n         :deceleration-rate                 :fast\n         :on-scroll-to-index-failed         identity\n         :content-container-style           {:padding-horizontal horizontal-spacing}\n         :separator                         [separator]\n         :snap-to-interval                  (+ preview-width style/url-preview-gap)\n         :shows-horizontal-scroll-indicator false\n         :data                              data\n         :render-fn                         item-component\n         :render-data                       {:width           preview-width\n                                             :on-clear        on-clear\n                                             :loading-message loading-message\n                                             :container-style container-style-item}}]])))\n\n(defn view\n  [props]\n  [:f> f-view props])\n"]}