{"version":3,"sources":["quo2/components/tags/tags.cljs"],"mappings":"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","names":["quo2.components.tags.tags/default-tab-size","p__19357","map__19358","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.tags.tags/calculate-fade-end-percentage","offset-x","content-width","layout-width","max-fade-percentage","fade-percentage","x__4214__auto__","y__4215__auto__","utils.number/naive-round","p__19385","map__19386","quo2.components.tags.tags/tags","default-active","fade-end-percentage","active-tab-id","reagent.core/atom","fading","flat-list-ref","cljs.core/atom","p__19390","map__19392","data","fade-end?","on-change","on-scroll","scroll-event-throttle","scrollable?","scroll-on-press?","size","type","labelled?","disabled?","blurred?","icon-color","props","maybe-mask-wrapper","react-native.masked-view/masked-view","reagent.core/as-element","react-native.linear-gradient/linear-gradient","cljs.core/deref","cljs.core/conj","react-native.core/flat-list","p1__19380#","cljs.core/merge","cljs.core/dissoc","p1__19379#","utils.collection/first-index","cljs.core/=","cljs.core/reset!","cljs.core/comp","cljs.core/str","e","target-obj-19413","*runtime-state*-orig-val__19419","oops.state/*runtime-state*","*runtime-state*-temp-val__19420","oops.state/prepare-state","js/Error","next-obj-19414","oops.core/validate-object-access-dynamically","next-obj-19415","next-obj-19417","target-obj-19426","*runtime-state*-orig-val__19434","*runtime-state*-temp-val__19435","next-obj-19428","next-obj-19429","next-obj-19430","target-obj-19453","*runtime-state*-orig-val__19462","*runtime-state*-temp-val__19463","next-obj-19455","next-obj-19456","next-obj-19459","new-percentage","cljs.core/not=","cljs.core/swap!","cljs.core/assoc","p__19476","map__19477","id","label","resource","index","react-native.core/view","cljs.core/count","cljs.core/get-in","quo2.components.tags.tag/tag","iter__4529__auto__","s__19519","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__19521","cljs.core/chunk-buffer","i__19520","map__19527","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__19518","cljs.core/chunk-rest","map__19536","cljs.core/first","cljs.core/cons","cljs.core/rest","p1__19383#","cljs.core/chunk-first"],"sourcesContent":["(ns quo2.components.tags.tags\n  (:require [reagent.core :as reagent]\n            [oops.core :refer [oget]]\n            [quo2.components.tags.tag :as tag]\n            [utils.number :as number-utils]\n            [react-native.core :as rn]\n            [react-native.masked-view :as masked-view]\n            [react-native.linear-gradient :as linear-gradient]\n            [utils.collection :as utils.collection]))\n\n(def default-tab-size 32)\n\n(defn calculate-fade-end-percentage\n  [{:keys [offset-x content-width layout-width max-fade-percentage]}]\n  (let [fade-percentage (max max-fade-percentage\n                             (/ (+ layout-width offset-x)\n                                content-width))]\n    ;; Truncate to avoid unnecessary rendering.\n    (if (> fade-percentage 0.99)\n      0.99\n      (number-utils/naive-round fade-percentage 2))))\n\n(defn tags\n  \"Usage:\n   {:type             :icon/:emoji/:label\n    :component        tag/tab\n    :size             32/24\n    :on-press         fn\n    :blurred?         true/false\n    :labelled?        true/false\n    :disabled?        true/false\n    :scroll-on-press? true\n    :scrollable?      false\n    :fade-end?        true\n    :on-change        fn\n    :default-active   tag-id\n    :data             [{:id :label \\\"\\\" :resource \\\"url\\\"}\n                       {:id :label \\\"\\\" :resource \\\"url\\\"}]}\n  Opts:\n   - `component` this is to determine which component is to be rendered since the\n                 logic in this view is shared between tab and tag component\n   - `blurred`   boolean: use to determine border color if the background is blurred\n   - `type`      can be icon or emoji with or without a tag label\n   - `labelled`  boolean: is true if tag has label else false\n   - `size` number\n   - `scroll-on-press?` When non-nil, clicking on a tag centers it the middle\n  (with animation enabled).\n   - `fade-end?` When non-nil, causes the end of the scrollable view to fade out.\n   - `fade-end-percentage` Percentage where fading starts relative to the total\n  layout width of the `flat-list` data.\"\n\n  [{:keys [default-active fade-end-percentage]\n    :or   {fade-end-percentage 0.8}}]\n  (let [active-tab-id (reagent/atom default-active)\n        fading        (reagent/atom {:fade-end-percentage fade-end-percentage})\n        flat-list-ref (atom nil)]\n    (fn\n      [{:keys [data\n               fade-end-percentage\n               fade-end?\n               on-change\n               on-scroll\n               scroll-event-throttle\n               scrollable?\n               scroll-on-press?\n               size\n               type\n               labelled?\n               disabled?\n               blurred?\n               icon-color]\n        :or   {fade-end-percentage   fade-end-percentage\n               fade-end?             false\n               scroll-event-throttle 64\n               scrollable?           false\n               scroll-on-press?      false\n               size                  default-tab-size}\n        :as   props}]\n      (let [maybe-mask-wrapper (if fade-end?\n                                 [masked-view/masked-view\n                                  {:mask-element (reagent/as-element\n                                                  [linear-gradient/linear-gradient\n                                                   {:colors         [:black :transparent]\n                                                    :locations      [(get @fading :fade-end-percentage)\n                                                                     1]\n                                                    :start          {:x 0 :y 0}\n                                                    :end            {:x 1 :y 0}\n                                                    :pointer-events :none\n                                                    :style          {:width  \"100%\"\n                                                                     :height \"100%\"}}])}]\n                                 [:<>])]\n        (if scrollable?\n          (conj\n           maybe-mask-wrapper\n           [rn/flat-list\n            (merge\n             (dissoc props\n              :default-active\n              :fade-end-percentage\n              :fade-end?\n              :on-change\n              :scroll-on-press?\n              :size)\n             (when scroll-on-press?\n               {:initial-scroll-index (utils.collection/first-index #(= @active-tab-id (:id %)) data)})\n             {:ref #(reset! flat-list-ref %)\n              :extra-data (str @active-tab-id)\n              :horizontal true\n              :scroll-event-throttle scroll-event-throttle\n              :shows-horizontal-scroll-indicator false\n              :data data\n              :key-fn (comp str :id)\n              :on-scroll (fn [^js e]\n                           (when fade-end?\n                             (let [offset-x       (oget e \"nativeEvent.contentOffset.x\")\n                                   content-width  (oget e \"nativeEvent.contentSize.width\")\n                                   layout-width   (oget e \"nativeEvent.layoutMeasurement.width\")\n                                   new-percentage (calculate-fade-end-percentage\n                                                   {:offset-x            offset-x\n                                                    :content-width       content-width\n                                                    :layout-width        layout-width\n                                                    :max-fade-percentage fade-end-percentage})]\n                               ;; Avoid unnecessary re-rendering.\n                               (when (not= new-percentage (get @fading :fade-end-percentage))\n                                 (swap! fading assoc :fade-end-percentage new-percentage))))\n                           (when on-scroll\n                             (on-scroll e)))\n              :render-fn (fn [{:keys [id label resource]} index]\n                           [rn/view\n                            {:style {:margin-right  (if (= size default-tab-size) 12 8)\n                                     :padding-right (when (= index (dec (count data)))\n                                                      (get-in props [:style :padding-left]))}}\n                            [tag/tag\n                             {:id         id\n                              :size       size\n                              :active     (= id @active-tab-id)\n                              :resource   resource\n                              :blurred?   blurred?\n                              :icon-color icon-color\n                              :disabled?  disabled?\n                              :label      (if labelled?\n                                            label\n                                            (when (= type :label) label))\n                              :type       type\n                              :labelled?  labelled?\n                              :on-press   (fn [id]\n                                            (reset! active-tab-id id)\n                                            (when scroll-on-press?\n                                              (.scrollToIndex ^js @flat-list-ref\n                                                              #js\n                                                               {:animated     true\n                                                                :index        index\n                                                                :viewPosition 0.5}))\n                                            (when on-change\n                                              (on-change id)))}]])})])\n          [rn/view {:style {:flex-direction :row}}\n           (for [{:keys [id label resource]} data]\n             ^{:key id}\n             [rn/view {:style {:margin-right 8}}\n              [tag/tag\n               (merge {:id         id\n                       :size       size\n                       :type       type\n                       :label      (if labelled?\n                                     label\n                                     (when (= type :label) label))\n                       :active     (= id active-tab-id)\n                       :disabled?  disabled?\n                       :blurred?   blurred?\n                       :icon-color icon-color\n                       :labelled?  (if (= type :label) true labelled?)\n                       :resource   (if (= type :icon)\n                                     :i/placeholder\n                                     resource)\n                       :on-press   #(do (reset! active-tab-id %)\n                                        (when on-change (on-change %)))})]])])))))\n"]}