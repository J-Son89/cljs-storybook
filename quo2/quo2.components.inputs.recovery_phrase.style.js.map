{"version":3,"sources":["quo2/components/inputs/recovery_phrase/style.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAML,AAAA,AAAMC;AAAN,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAM,AAAA,AAACC;;AAMV,AAAA,AAAMC,AACHC,AAAYC,AAAeC;AAD9B,AAEE,AACE,AAAA,AAAK,AAAA,AAACC,AAAEH,AAAsBE;AAC9B,AAACE,AAAoBC,AAAyBC,AAAoBL;;AAFpE,AAIE,AAAA,AAACE,AAAEH;AACH,AAACI,AAAoBG,AAAkBC,AAAkBP;;AAL3D,AAOEC;AACA,AAACE,AAAoBK,AAAyBC,AAAoBT;;AARpE,AAWE,AAACG,AAAoBO,AAAkBC,AAAkBX;;;;;;AAE7D,AAAA,AAAMY,AACHC,AAAoBb;AADvB,AAEE,AAACG,AAAoB,AAAA,AAACW,AAAoBD,AACrB,AAAA,AAACC,AAAoBD,AACrBb;;AAEvB,AAAA,AAAMe;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIuBC,AACA,AAACb,AAAoBc,AAAiBC","names":["quo2.components.inputs.recovery-phrase.style/container","quo2.components.inputs.recovery-phrase.style/input","cljs.core/assoc","quo2.components.markdown.text/text-style","quo2.components.inputs.recovery-phrase.style/placeholder-color","input-state","override-theme","blur?","cljs.core/=","quo2.foundations.colors/theme-colors","quo2.foundations.colors/neutral-80-opa-20","quo2.foundations.colors/white-opa-20","quo2.foundations.colors/neutral-30","quo2.foundations.colors/neutral-60","quo2.foundations.colors/neutral-80-opa-40","quo2.foundations.colors/white-opa-30","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-50","quo2.components.inputs.recovery-phrase.style/cursor-color","customization-color","quo2.foundations.colors/custom-color","quo2.components.inputs.recovery-phrase.style/error-word","quo2.foundations.colors/danger-50-opa-10","quo2.foundations.colors/danger-50","quo2.foundations.colors/danger-60"],"sourcesContent":["(ns quo2.components.inputs.recovery-phrase.style\n  (:require [quo2.components.markdown.text :as text]\n            [quo2.foundations.colors :as colors]))\n\n(def container\n  {:min-height         40\n   :flex               1\n   :padding-vertical   4\n   :padding-horizontal 20})\n\n(defn input\n  []\n  (assoc (text/text-style {})\n         :height              32\n         :flex-grow           1\n         :padding-vertical    5\n         :text-align-vertical :top))\n\n(defn placeholder-color\n  [input-state override-theme blur?]\n  (cond\n    (and (= input-state :focused) blur?)\n    (colors/theme-colors colors/neutral-80-opa-20 colors/white-opa-20 override-theme)\n\n    (= input-state :focused) ; Not blur\n    (colors/theme-colors colors/neutral-30 colors/neutral-60 override-theme)\n\n    blur? ; :default & blur\n    (colors/theme-colors colors/neutral-80-opa-40 colors/white-opa-30 override-theme)\n\n    :else ; :default & not blur\n    (colors/theme-colors colors/neutral-40 colors/neutral-50 override-theme)))\n\n(defn cursor-color\n  [customization-color override-theme]\n  (colors/theme-colors (colors/custom-color customization-color 50)\n                       (colors/custom-color customization-color 60)\n                       override-theme))\n\n(defn error-word\n  []\n  {:height             22\n   :padding-horizontal 20\n   :background-color   colors/danger-50-opa-10\n   :color              (colors/theme-colors colors/danger-50 colors/danger-60)})\n"]}