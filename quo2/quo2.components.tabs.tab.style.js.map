{"version":3,"sources":["quo2/components/tabs/tab/style.cljs"],"mappings":"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","names":["quo2.components.tabs.tab.style/tab-background-opacity","quo2.components.tabs.tab.style/size->padding-left","size","G__19322","quo2.components.tabs.tab.style/size->border-radius","G__19323","quo2.components.tabs.tab.style/notification-dot","quo2.components.tabs.tab.style/container","p__19327","map__19329","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.tabs.tab.style/tab","background-color","disabled","segmented?","show-notification-dot?","border-radius","padding","cljs.core/merge","quo2.components.tabs.tab.style/themes","quo2.foundations.colors/neutral-10","quo2.foundations.colors/neutral-50","quo2.foundations.colors/neutral-100","quo2.foundations.colors/white","quo2.foundations.colors/neutral-90","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-60","quo2.components.tabs.tab.style/themes-for-blur-background","quo2.foundations.colors/neutral-80-opa-5","quo2.foundations.colors/neutral-80-opa-40","quo2.foundations.colors/neutral-80-opa-60","quo2.foundations.colors/white-opa-5","quo2.foundations.colors/white-opa-20","p__19335","map__19336","quo2.components.tabs.tab.style/by-theme","active","blur?","theme","state","cljs.core/get-in"],"sourcesContent":["(ns quo2.components.tabs.tab.style\n  (:require [quo2.foundations.colors :as colors]))\n\n(def tab-background-opacity 0.3)\n\n(defn size->padding-left\n  [size]\n  (case size\n    32 12\n    28 12\n    24 8\n    20 8\n    nil))\n\n(defn size->border-radius\n  [size]\n  (case size\n    32 10\n    28 8\n    24 8\n    20 6\n    nil))\n\n(def notification-dot\n  {:position :absolute\n   :top      -2\n   :right    -2})\n\n(def container\n  {:flex-direction :row})\n\n(defn tab\n  [{:keys [background-color\n           disabled\n           segmented?\n           show-notification-dot?\n           size]}]\n  (let [border-radius (size->border-radius size)\n        padding       (size->padding-left size)]\n    (merge {:height                    size\n            :align-items               :center\n            :justify-content           :center\n            :flex-direction            :row\n            :border-top-left-radius    border-radius\n            :border-bottom-left-radius border-radius\n            :background-color          background-color\n            :padding-left              padding}\n           ;; The minimum padding right of 1 is a mandatory workaround. Without\n           ;; it, the SVG rendered besides the tab will have a 1px margin. This\n           ;; issue still exists in the latest react-native-svg versions.\n           (if show-notification-dot?\n             {:padding-right 1}\n             {:border-radius border-radius\n              :padding-right padding})\n           (when segmented?\n             {:flex 1})\n           (when disabled\n             {:opacity tab-background-opacity}))))\n\n(def themes\n  {:light {:default  {:background-color colors/neutral-10\n                      :icon-color       colors/neutral-50\n                      :label            {:style {:color colors/neutral-100}}}\n           :active   {:background-color colors/neutral-50\n                      :icon-color       colors/white\n                      :label            {:style {:color colors/white}}}\n           :disabled {:background-color colors/neutral-10\n                      :icon-color       colors/neutral-50\n                      :label            {:style {:color colors/neutral-100}}}}\n   :dark  {:default  {:background-color colors/neutral-90\n                      :icon-color       colors/neutral-40\n                      :label            {:style {:color colors/white}}}\n           :active   {:background-color colors/neutral-60\n                      :icon-color       colors/white\n                      :label            {:style {:color colors/white}}}\n           :disabled {:background-color colors/neutral-90\n                      :icon-color       colors/neutral-40\n                      :label            {:style {:color colors/white}}}}})\n\n(def themes-for-blur-background\n  {:light {:default  {:background-color colors/neutral-80-opa-5\n                      :icon-color       colors/neutral-80-opa-40\n                      :label            {:style {:color colors/neutral-100}}}\n           :active   {:background-color colors/neutral-80-opa-60\n                      :icon-color       colors/white\n                      :label            {:style {:color colors/white}}}\n           :disabled {:background-color colors/neutral-80-opa-5\n                      :icon-color       colors/neutral-80-opa-40\n                      :label            {:style {:color colors/neutral-100}}}}\n   :dark  {:default  {:background-color colors/white-opa-5\n                      :icon-color       colors/white\n                      :label            {:style {:color colors/white}}}\n           :active   {:background-color colors/white-opa-20\n                      :icon-color       colors/white\n                      :label            {:style {:color colors/white}}}\n           :disabled {:background-color colors/white-opa-5\n                      :icon-color       colors/neutral-40\n                      :label            {:style {:color colors/white}}}}})\n\n(defn by-theme\n  [{:keys [disabled active blur? theme]}]\n  (let [state (cond disabled :disabled\n                    active   :active\n                    :else    :default)]\n\n    (get-in (if blur? themes-for-blur-background themes)\n            [theme state])))\n"]}