{"version":3,"sources":["quo/components/text.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AACgBO;AADhB,AAAAH,AAAAJ,AAAA,AACsBQ;AADtB,AAAAJ,AAAAJ,AAAA,AAC6BS;AAD7B,AAAAL,AAAAJ,AAAA,AACuCU;AADvC,AAAAN,AAAAJ,AAAA,AAC6CW;AAD7C,AAGE,AAACC,AAAM,AAAIH,AAEFI,AACA,AAAAC,AAAM,AAAAG,AAAIT;AAAJ,AAAA,AAAAS;AAAAA;;AAAA;;;AAANH,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACaI;;;AADb;AAEaC;;;AAFb;AAGaC;;;AAHb;AAIaC;;;AAJb;AAKaR;;;AALb;AAAA;;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAAF;;;AAOF,AAAAQ,AAAM,AAAAL,AAAIP;AAAJ,AAAA,AAAAO;AAAAA;;AAAA;;;AAANK,AAAA,AAAA,AAAAA,AAAAP,AAAA,AAAAO,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA,AAC6B,AAAA,AAAA,AAAAC,AAAWC;;;AADxC;AAAA,AAAA,AAE6B,AAAA,AAAA,AAAAD,AAAWC;;;AAFxC;AAAA,AAAA,AAG6B,AAAA,AAAA,AAAAD,AAAWC;;;AAHxC;AAAA,AAAA,AAI6B,AAAA,AAAA,AAAAD,AAAWC;;;AAJxC;AAAA,AAAA,AAK6B,AAAA,AAAA,AAAAD,AAAWC;;;AALxC;AAAA,AAAA,AAM6B,AAAA,AAAA,AAAAD,AAAeC;;;AAN5C;AAAA,AAAA,AAO6B,AAAA,AAAA,AAAAD,AAAeC;;;AAP5C;AAAA;;;;AAAA,AAAA,AAAAR,AAAA,AAAA,AAAAM;;;AASA,AAAAG,AAAM,AAAAR,AAAIX;AAAJ,AAAA,AAAAW;AAAAA;;AAAA;;;AAANQ,AAAA,AAAA,AAAAA,AAAAV,AAAA,AAAAU,AAAA;AAAA,AAAA,AAAAA;AAAA;AACYC;;;AADZ;AAEYC;;;AAFZ;AAGYC;;;AAHZ;AAIYC;;;AAJZ;AAKYC;;;AALZ;AAMYC;;;AANZ;AAOYC;;;AAPZ;AAAA;;;;AAAA,AAAA,AAAAhB,AAAA,AAAA,AAAAS;;;AAnBP,AAAA,AA4BoB,AAAAR,AAAIV;AAAJ,AAAA,AAAAU;AAAAA;;AAAA;;AACbN;;AAET,AAAA,AAAMsB;AAAN,AAEE,AAAMC,AAAU,AAACC;AACXC,AAAU,AAACC,AAAcH;AACzBI,AAAU,AAAI,AAAA,AAAYF,AAAOG,AAAcC;AAFrD,AAGE,AAAA,AAACC,AAAMH,AACA,AAAA,AAAA,AAAC1B,AAAc,AAACP,AAAW+B,AACpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACM,AAAON,AAOhB,AAACO,AAAiBT","names":["p__18081","map__18082","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo.components.text/text-style","size","align","weight","monospace","color","style","cljs.core/merge","quo.design-system.typography/monospace","G__18086","cljs.core/Keyword","js/Error","or__4126__auto__","quo.design-system.typography/font-regular","quo.design-system.typography/font-medium","quo.design-system.typography/font-semi-bold","quo.design-system.typography/font-bold","G__18090","cljs.core/deref","quo.design-system.colors/theme","G__18099","quo.design-system.typography/tiny","quo.design-system.typography/x-small","quo.design-system.typography/small","quo.design-system.typography/base","quo.design-system.typography/large","quo.design-system.typography/x-large","quo.design-system.typography/xx-large","quo.components.text/text","this","reagent.core/current-component","props","reagent.core/props","component","quo.animated/text","quo.react-native/text","cljs.core/into","cljs.core/dissoc","reagent.core/children"],"sourcesContent":["(ns quo.components.text\n  (:require [quo.animated :as animated]\n            [quo.design-system.colors :as colors]\n            [quo.design-system.typography :as typography]\n            [quo.react-native :as rn]\n            [reagent.core :as reagent]))\n\n(defn text-style\n  [{:keys [size align weight monospace color style]}]\n  ;; NOTE(Ferossgo): or in destructoring will keep nil as a value\n  (merge (if monospace\n           ;; TODO(Ferossgp): Add all weights for monospace\n           typography/monospace\n           (case (or weight :regular)\n             :regular   typography/font-regular\n             :medium    typography/font-medium\n             :semi-bold typography/font-semi-bold\n             :bold      typography/font-bold\n             :monospace typography/monospace ; DEPRECATED\n             :inherit   nil))\n         (case (or color :main)\n           :main              {:color (:text-01 @colors/theme)}\n           :secondary         {:color (:text-02 @colors/theme)}\n           :secondary-inverse {:color (:text-03 @colors/theme)}\n           :link              {:color (:text-04 @colors/theme)}\n           :inverse           {:color (:text-05 @colors/theme)}\n           :positive          {:color (:positive-01 @colors/theme)}\n           :negative          {:color (:negative-01 @colors/theme)}\n           :inherit           nil)\n         (case (or size :base)\n           :tiny     typography/tiny\n           :x-small  typography/x-small\n           :small    typography/small\n           :base     typography/base\n           :large    typography/large\n           :x-large  typography/x-large\n           :xx-large typography/xx-large\n           :inherit  nil)\n         {:text-align (or align :auto)}\n         style))\n\n(defn text\n  []\n  (let [this      (reagent/current-component)\n        props     (reagent/props this)\n        component (if (:animated? props) animated/text rn/text)]\n    (into [component\n           (merge {:style (text-style props)}\n                  (dissoc props\n                   :style\n                   :size\n                   :weight\n                   :color\n                   :align\n                   :animated?))]\n          (reagent/children this))))\n"]}