{"version":3,"sources":["quo2/components/profile/select_profile/view.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,AAAA,AAAOA,AACJC,AAAUC;AADb,AAEE,AAACC,AAAMF,AAAUG;;AACjB,AAAMF;AAAN,AAAgB,AAAA,AAAAG,AAACH,AAAWD;;AAA5B;;;AAEF;;;;;;;;;;AAAA,AAAAK,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AASWM;AATX,AAUE,AAAMC,AAAmB,AAACC,AAAa,AAAAC,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAA;;;AAAvC,AACE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAA,AAAAP,AAAAO,AAAA,AAAajB;AAAb,AAAAU,AAAAO,AAAA,AACaC;AADb,AAAAR,AAAAO,AAAA,AAEaE;AAFb,AAAAT,AAAAO,AAAA,AAGaG;AAHb,AAAAV,AAAAO,AAAA,AAAA,AAIaI;AAJb,AAAAX,AAAAO,AAAA,AAKahB;AALb,AAOE,AAAMqB,AAAiB,AAAA,AAAA,AAAIJ;AACrBK,AAAiB,AAAAR,AAAIG;AAAJ,AAAA,AAAAH;AAAAA;;AAAoBI;;;AAD3C,AAEE,AAAM,AAAK,AAAK,AAAA,AAAMnB,AAAY,AAAA,AAAAI,AAACoB,AAAMX,AAAmBb;AAA5D,AACE,AAACyB,AAAOZ,AAAmBb;;AAD7B;;AAFF,AAAA,AAAA,AAAA,AAAA,AAIG0B,AACsB,AAAA,AAAAtB,AAACuB,AAAgBN,AAAqBR;AAL/D,AAM0B,AAACd,AAAkBc,AAAmBZ;AANhE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASI2B,AAAgBC,AACfC,AACoBV,AAGnBE,AAAmBC,AACpBK,AAAgB,AAAA,AAAAxB,AAAC2B,AAAoBlB,AACrC,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAOS,AAAoBe,AAAgBI,AAC5CC,AAGSC,AACTd","names":["quo2.components.profile.select-profile.view/on-change-handler","selected?","on-change","cljs.core/swap!","cljs.core/not","cljs.core/deref","p__19166","map__19168","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.profile.select-profile.view/view","default-selected?","internal-selected?","reagent.core/atom","or__4126__auto__","p__19172","map__19173","profile-picture","ring-background","name","customization-color","avatar-image-key","picture","cljs.core/not=","cljs.core/reset!","react-native.core/touchable-opacity","quo2.components.profile.select-profile.style/container","react-native.core/view","quo2.components.profile.select-profile.style/header","quo2.components.avatars.user-avatar.view/user-avatar","quo2.components.profile.select-profile.style/select-radio","quo2.components.profile.select-profile.style/select-radio-inner","quo2.components.markdown.text/text","quo2.components.profile.select-profile.style/profile-name"],"sourcesContent":["(ns quo2.components.profile.select-profile.view\n  (:require\n    [quo2.components.profile.select-profile.style :as style]\n    [react-native.core :as rn]\n    [quo2.components.markdown.text :as text]\n    [quo2.components.avatars.user-avatar.view :as user-avatar]\n    [reagent.core :as reagent]))\n\n(defn- on-change-handler\n  [selected? on-change]\n  (swap! selected? not)\n  (when on-change (on-change @selected?)))\n\n(defn view\n  \"Options\n   - `default-selected?` The default selected state. Use when the component is not controlled.\n   - `selected?` Selected state. Use when the component is controlled.\n   - `name` Full name\n   - `profile-picture` Profile picture\n   - `customization-color` Customization color\n   - `(on-change selected?)` On change event handler\n   \"\n  [{:keys [default-selected?]}]\n  (let [internal-selected? (reagent/atom (or default-selected? false))]\n    (fn [{:keys [selected?\n                 profile-picture\n                 ring-background\n                 name\n                 customization-color\n                 on-change]\n          :or   {customization-color :turquoise}}]\n      (let [avatar-image-key (if profile-picture :profile-picture :ring-background)\n            picture          (or profile-picture ring-background)]\n        (when (and (not (nil? selected?)) (not= @internal-selected? selected?))\n          (reset! internal-selected? selected?))\n        [rn/touchable-opacity\n         {:style               (style/container customization-color @internal-selected?)\n          :on-press            #(on-change-handler internal-selected? on-change)\n          :active-opacity      1\n          :accessibility-label :select-profile}\n         [rn/view {:style style/header}\n          [user-avatar/user-avatar\n           {:full-name         name\n            :status-indicator? false\n            :size              :medium\n            avatar-image-key   picture}]\n          [rn/view {:style (style/select-radio @internal-selected?)}\n           (when @internal-selected? [rn/view {:style style/select-radio-inner}])]]\n         [text/text\n          {:size   :heading-2\n           :weight :semi-bold\n           :style  style/profile-name}\n          name]]))))\n\n"]}