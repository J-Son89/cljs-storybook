{"version":3,"sources":["clojure/string.cljs"],"mappings":"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","names":["clojure.string/seq-reverse","coll","cljs.core/reduce","cljs.core/conj","clojure.string/re-surrogate-pair","js/RegExp","clojure.string/reverse","s","clojure.string/replace-all","re","replacement","r","G__8151","clojure.string/replace-with","f","args","matches","cljs.core/drop-last","cljs.core/=","cljs.core/count","cljs.core/first","cljs.core/vec","clojure.string/replace","match","goog.string/regExpEscape","clojure.string/replace-first","var_args","G__8159","clojure.string/join","js/Error","sb","js/goog.string.StringBuffer","cljs.core/seq","cljs.core/next","separator","clojure.string/upper-case","clojure.string/lower-case","clojure.string/capitalize","goog.string/capitalize","clojure.string/pop-last-while-empty","v","cljs.core/peek","cljs.core/pop","clojure.string/discard-trailing-if-needed","limit","clojure.string/split-with-empty-regex","cljs.core/cons","cljs.core/map","cljs.core/str","pred__8173","expr__8174","cljs.core/==","cljs.core/PersistentVector","c","cljs.core/subvec","cljs.core/subs","G__8187","clojure.string/split","parts","m","cljs.core/re-find","index","clojure.string/split-lines","clojure.string/trim","goog.string/trim","clojure.string/triml","goog.string/trimLeft","clojure.string/trimr","goog.string/trimRight","clojure.string/trim-newline","ch","cljs.core/get","clojure.string/blank?","goog.string/isEmptyOrWhitespace","goog.string/makeSafe","clojure.string/escape","cmap","buffer","length","G__8198","clojure.string/index-of","value","result","from-index","G__8203","clojure.string/last-index-of","clojure.string/starts-with?","substr","goog.string/startsWith","clojure.string/ends-with?","goog.string/endsWith","clojure.string/includes?","goog.string/contains"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.string\n  (:refer-clojure :exclude [replace reverse])\n  (:require [goog.string :as gstring])\n  (:import [goog.string StringBuffer]))\n\n(defn- seq-reverse\n  [coll]\n  (reduce conj () coll))\n\n(def ^:private re-surrogate-pair\n  (js/RegExp. \"([\\\\uD800-\\\\uDBFF])([\\\\uDC00-\\\\uDFFF])\" \"g\"))\n\n(defn ^string reverse\n  \"Returns s with its characters reversed.\"\n  [s]\n  (-> (.replace s re-surrogate-pair \"$2$1\")\n      (.. (split \"\") (reverse) (join \"\"))))\n\n(defn- replace-all\n  [s re replacement]\n  (let [r (js/RegExp. (.-source re)\n                      (cond-> \"g\"\n                        (.-ignoreCase re) (str \"i\")\n                        (.-multiline re) (str \"m\")\n                        (.-unicode re) (str \"u\")))]\n    (.replace s r replacement)))\n\n(defn- replace-with\n  [f]\n  (fn [& args]\n    (let [matches (drop-last 2 args)]\n      (if (= (count matches) 1)\n        (f (first matches))\n        (f (vec matches))))))\n\n(defn ^string replace\n  \"Replaces all instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace-first.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace \\\"Almost Pig Latin\\\" #\\\"\\\\b(\\\\w)(\\\\w+)\\\\b\\\" \\\"$2$1ay\\\")\n   -> \\\"lmostAay igPay atinLay\\\"\"\n  [s match replacement]\n  (cond\n    (string? match)\n    (.replace s (js/RegExp. (gstring/regExpEscape match) \"g\") replacement)\n\n    (instance? js/RegExp match)\n    (if (string? replacement)\n      (replace-all s match replacement)\n      (replace-all s match (replace-with replacement)))\n\n    :else (throw (str \"Invalid match arg: \" match))))\n\n(defn ^string replace-first\n  \"Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace-first \\\"swap first two words\\\"\n                                 #\\\"(\\\\w+)(\\\\s+)(\\\\w+)\\\" \\\"$3$2$1\\\")\n   -> \\\"first swap two words\\\"\"\n  [s match replacement]\n  (.replace s match replacement))\n\n(defn join\n  \"Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator.\"\n  ([coll]\n   (loop [sb (StringBuffer.) coll (seq coll)]\n     (if-not (nil? coll)\n       (recur (. sb (append (str (first coll)))) (next coll))\n       ^string (.toString sb))))\n  ([separator coll]\n   (loop [sb (StringBuffer.) coll (seq coll)]\n     (if-not (nil? coll)\n       (do\n         (. sb (append (str (first coll))))\n         (let [coll (next coll)]\n           (when-not (nil? coll)\n             (. sb (append separator)))\n           (recur sb coll)))\n       ^string (.toString sb)))))\n\n(defn ^string upper-case\n  \"Converts string to all upper-case.\"\n  [s]\n  (.toUpperCase s))\n\n(defn ^string lower-case\n  \"Converts string to all lower-case.\"\n  [s]\n  (.toLowerCase s))\n\n(defn ^string capitalize\n  \"Converts first character of the string to upper-case, all other\n  characters to lower-case.\"\n  [s]\n  (gstring/capitalize s))\n\n;; The JavaScript split function takes a limit argument but the return\n;; value is not the same as the Java split function.\n;;\n;; Java: (.split \"a-b-c\" #\"-\" 2) => [\"a\" \"b-c\"]\n;; JavaScript: (.split \"a-b-c\" #\"-\" 2) => [\"a\" \"b\"]\n;;\n;; For consistency, the three arg version has been implemented to\n;; mimic Java's behavior.\n\n(defn- pop-last-while-empty\n  [v]\n  (loop [v v]\n    (if (identical? \"\" (peek v))\n      (recur (pop v))\n      v)))\n\n(defn- discard-trailing-if-needed\n  [limit v]\n  (if (and (== 0 limit) (< 1 (count v)))\n    (pop-last-while-empty v)\n    v))\n\n(defn- split-with-empty-regex\n  [s limit]\n  (if (or (<= limit 0) (>= limit (+ 2 (count s))))\n    (conj (vec (cons \"\" (map str (seq s)))) \"\")\n    (condp == limit\n      1 (vector s)\n      2 (vector \"\" s)\n      (let [c (- limit 2)]\n        (conj (vec (cons \"\" (subvec (vec (map str (seq s))) 0 c))) (subs s c))))))\n\n(defn split\n  \"Splits string on a regular expression. Optional argument limit is\n  the maximum number of splits. Not lazy. Returns vector of the splits.\"\n  ([s re]\n     (split s re 0))\n    ([s re limit]\n     (discard-trailing-if-needed limit\n       (if (identical? \"/(?:)/\" (str re))\n         (split-with-empty-regex s limit)\n         (if (< limit 1)\n           (vec (.split (str s) re))\n           (loop [s s\n                  limit limit\n                  parts []]\n             (if (== 1 limit)\n               (conj parts s)\n               (let [m (re-find re s)]\n                 (if-not (nil? m)\n                   (let [index (.indexOf s m)]\n                     (recur (.substring s (+ index (count m)))\n                       (dec limit)\n                       (conj parts (.substring s 0 index))))\n                   (conj parts s))))))))))\n\n(defn split-lines\n  \"Splits s on \\\\n or \\\\r\\\\n.\"\n  [s]\n  (split s #\"\\n|\\r\\n\"))\n\n(defn ^string trim\n  \"Removes whitespace from both ends of string.\"\n  [s]\n  (gstring/trim s))\n\n(defn ^string triml\n  \"Removes whitespace from the left side of string.\"\n  [s]\n  (gstring/trimLeft s))\n\n(defn ^string trimr\n  \"Removes whitespace from the right side of string.\"\n  [s]\n  (gstring/trimRight s))\n\n(defn ^string trim-newline\n  \"Removes all trailing newline \\\\n or return \\\\r characters from\n  string.  Similar to Perl's chomp.\"\n  [s]\n  (loop [index (.-length s)]\n    (if (zero? index)\n      \"\"\n      (let [ch (get s (dec index))]\n        (if (or (identical? \\newline ch)\n                (identical? \\return ch))\n          (recur (dec index))\n          (.substring s 0 index))))))\n\n(defn ^boolean blank?\n  \"True is s is nil, empty, or contains only whitespace.\"\n  [s]\n  (gstring/isEmptyOrWhitespace (gstring/makeSafe s)))\n\n(defn ^string escape\n  \"Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead.\"\n  [s cmap]\n  (let [buffer (StringBuffer.)\n        length (.-length s)]\n    (loop [index 0]\n      (if (== length index)\n        (. buffer (toString))\n        (let [ch (.charAt s index)\n              replacement (get cmap ch)]\n          (if-not (nil? replacement)\n            (.append buffer (str replacement))\n            (.append buffer ch))\n          (recur (inc index)))))))\n\n(defn index-of\n  \"Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found.\"\n  ([s value]\n   (let [result (.indexOf s value)]\n     (if (neg? result)\n       nil\n       result)))\n  ([s value from-index]\n   (let [result (.indexOf s value from-index)]\n     (if (neg? result)\n       nil\n       result))))\n\n(defn last-index-of\n  \"Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found.\"\n  ([s value]\n   (let [result (.lastIndexOf s value)]\n     (if (neg? result)\n       nil\n       result)))\n  ([s value from-index]\n   (let [result (.lastIndexOf s value from-index)]\n     (if (neg? result)\n       nil\n       result))))\n\n(defn ^boolean starts-with?\n  \"True if s starts with substr.\"\n  [s substr]\n  (gstring/startsWith s substr))\n\n(defn ^boolean ends-with?\n  \"True if s ends with substr.\"\n  [s substr]\n  (gstring/endsWith s substr))\n\n(defn ^boolean includes?\n  \"True if s includes substr.\"\n  [s substr]\n  (gstring/contains s substr))\n"]}