{"version":3,"sources":["quo2/foundations/colors.cljs"],"mappings":"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","names":["quo2.foundations.colors/alpha","value","opacity","clojure.string/starts-with?","hex","clojure.string/replace","r","js/parseInt","cljs.core/subs","g","b","rgb","clojure.string/split","clojure.string/join","cljs.core/butlast","quo2.foundations.colors/alpha-opaque","cljs.core/get","quo2.foundations.colors/theme-alpha","cljs.core/memoize","color","light-opacity","dark-opacity","light-color","dark-color","quo2.theme/dark?","quo2.foundations.colors/neutral-5","quo2.foundations.colors/neutral-10","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-30","quo2.foundations.colors/neutral-40","quo2.foundations.colors/neutral-50","quo2.foundations.colors/neutral-60","quo2.foundations.colors/neutral-70","quo2.foundations.colors/neutral-80","quo2.foundations.colors/neutral-90","quo2.foundations.colors/neutral-95","quo2.foundations.colors/neutral-100","quo2.foundations.colors/neutral-80-opa-5","quo2.foundations.colors/neutral-80-opa-10","quo2.foundations.colors/neutral-80-opa-15","quo2.foundations.colors/neutral-80-opa-20","quo2.foundations.colors/neutral-80-opa-30","quo2.foundations.colors/neutral-80-opa-40","quo2.foundations.colors/neutral-80-opa-50","quo2.foundations.colors/neutral-80-opa-60","quo2.foundations.colors/neutral-80-opa-70","quo2.foundations.colors/neutral-80-opa-80","quo2.foundations.colors/neutral-80-opa-90","quo2.foundations.colors/neutral-80-opa-95","quo2.foundations.colors/neutral-90-opa-0","quo2.foundations.colors/neutral-95-opa-0","quo2.foundations.colors/neutral-95-opa-60","quo2.foundations.colors/neutral-95-opa-70","quo2.foundations.colors/neutral-95-opa-80","quo2.foundations.colors/neutral-95-opa-90","quo2.foundations.colors/neutral-95-opa-95","quo2.foundations.colors/neutral-100-opa-0","quo2.foundations.colors/neutral-100-opa-5","quo2.foundations.colors/neutral-100-opa-10","quo2.foundations.colors/neutral-100-opa-30","quo2.foundations.colors/neutral-100-opa-60","quo2.foundations.colors/neutral-100-opa-70","quo2.foundations.colors/neutral-100-opa-80","quo2.foundations.colors/neutral-100-opa-90","quo2.foundations.colors/neutral-100-opa-95","quo2.foundations.colors/neutral-100-opa-100","quo2.foundations.colors/neutral-80-opa-5-opaque","quo2.foundations.colors/white","quo2.foundations.colors/white-opa-0","quo2.foundations.colors/white-opa-5","quo2.foundations.colors/white-opa-10","quo2.foundations.colors/white-opa-20","quo2.foundations.colors/white-opa-30","quo2.foundations.colors/white-opa-40","quo2.foundations.colors/white-opa-50","quo2.foundations.colors/white-opa-60","quo2.foundations.colors/white-opa-70","quo2.foundations.colors/white-opa-80","quo2.foundations.colors/white-opa-90","quo2.foundations.colors/white-opa-95","quo2.foundations.colors/white-70-blur","quo2.foundations.colors/neutral-80-opa-1-blur","quo2.foundations.colors/neutral-5-opa-70-blur","quo2.foundations.colors/neutral-80-opa-80-blur","quo2.foundations.colors/neutral-90-opa-70-blur","quo2.foundations.colors/neutral-95-opa-70-blur","quo2.foundations.colors/neutral-100-opa-70-blur","quo2.foundations.colors/black","quo2.foundations.colors/black-opa-0","quo2.foundations.colors/onboarding-header-black","quo2.foundations.colors/primary-50","quo2.foundations.colors/primary-60","quo2.foundations.colors/primary-50-opa-5","quo2.foundations.colors/primary-50-opa-10","quo2.foundations.colors/primary-50-opa-20","quo2.foundations.colors/primary-50-opa-30","quo2.foundations.colors/primary-50-opa-40","quo2.foundations.colors/success-50","quo2.foundations.colors/success-60","quo2.foundations.colors/success-50-opa-5","quo2.foundations.colors/success-50-opa-10","quo2.foundations.colors/success-50-opa-20","quo2.foundations.colors/success-50-opa-30","quo2.foundations.colors/success-50-opa-40","quo2.foundations.colors/success-60-opa-5","quo2.foundations.colors/success-60-opa-10","quo2.foundations.colors/success-60-opa-20","quo2.foundations.colors/success-60-opa-30","quo2.foundations.colors/success-60-opa-40","quo2.foundations.colors/danger","quo2.foundations.colors/danger-opa-40","quo2.foundations.colors/danger-50","quo2.foundations.colors/danger-60","quo2.foundations.colors/danger-50-opa-5","quo2.foundations.colors/danger-50-opa-10","quo2.foundations.colors/danger-50-opa-20","quo2.foundations.colors/danger-50-opa-30","quo2.foundations.colors/danger-50-opa-40","quo2.foundations.colors/customization","quo2.foundations.colors/colors-map","cljs.core/merge","quo2.foundations.colors/custom-color","suffix","color-keyword","cljs.core/keyword","base-color","cljs.core/get-in","var_args","G__16565","quo2.foundations.colors/custom-color-by-theme","js/Error","suffix-light","suffix-dark","opacity-light","opacity-dark","quo2.foundations.colors/shadow","quo2.foundations.colors/divider-light","quo2.foundations.colors/divider-dark","G__16567","quo2.foundations.colors/theme-colors","light","dark","override-theme","theme","or__4126__auto__","quo2.theme/get-theme","cljs.core/=","quo2.foundations.colors/dark?"],"sourcesContent":["(ns quo2.foundations.colors\n  (:require [clojure.string :as string]\n            [quo2.theme :as theme]))\n\n(defn alpha\n  [value opacity]\n  (when value\n    (if (string/starts-with? value \"#\")\n      (let [hex (string/replace value #\"#\" \"\")\n            r   (js/parseInt (subs hex 0 2) 16)\n            g   (js/parseInt (subs hex 2 4) 16)\n            b   (js/parseInt (subs hex 4 6) 16)]\n        (str \"rgba(\" r \",\" g \",\" b \",\" opacity \")\"))\n      (let [rgb (string/split value #\",\")]\n        (str (string/join \",\" (butlast rgb)) \",\" opacity \")\")))))\n\n(defn- alpha-opaque\n  [value opacity]\n  (when value\n    (if (string/starts-with? value \"#\")\n      (let [hex (string/replace value #\"#\" \"\")\n            r   (- 255 (* opacity (- 255 (js/parseInt (subs hex 0 2) 16))))\n            g   (- 255 (* opacity (- 255 (js/parseInt (subs hex 2 4) 16))))\n            b   (- 255 (* opacity (- 255 (js/parseInt (subs hex 4 6) 16))))]\n        (str \"rgb(\" r \",\" g \",\" b \")\"))\n      (let [rgb (string/split value #\",\")\n            r   (- 255 (* opacity (- 255 (get rgb 0))))\n            g   (- 255 (* opacity (- 255 (get rgb 1))))\n            b   (- 255 (* opacity (- 255 (get rgb 2))))]\n        (str \"rgb(\" r \",\" g \",\" b \")\")))))\n\n(def theme-alpha\n  (memoize\n   (fn\n     ([color light-opacity dark-opacity]\n      (theme-alpha color light-opacity color dark-opacity))\n     ([light-color light-opacity dark-color dark-opacity]\n      (if (theme/dark?)\n        (alpha light-color light-opacity)\n        (alpha dark-color dark-opacity))))))\n\n\n;;;;Neutral\n\n;;Solid\n\n\n(def neutral-5 \"#F5F6F8\")\n(def neutral-10 \"#F0F2F5\")\n(def neutral-20 \"#E7EAEE\")\n(def neutral-30 \"#DCE0E5\")\n(def neutral-40 \"#A1ABBD\")\n(def neutral-50 \"#647084\")\n(def neutral-60 \"#303D55\")\n(def neutral-70 \"#202C42\")\n(def neutral-80 \"#1B273D\")\n(def neutral-90 \"#131D2F\")\n(def neutral-95 \"#0D1625\")\n(def neutral-100 \"#09101C\")\n\n;;80 with transparency\n(def neutral-80-opa-5 (alpha neutral-80 0.05))\n(def neutral-80-opa-10 (alpha neutral-80 0.1))\n(def neutral-80-opa-15 (alpha neutral-80 0.15))\n(def neutral-80-opa-20 (alpha neutral-80 0.2))\n(def neutral-80-opa-30 (alpha neutral-80 0.3))\n(def neutral-80-opa-40 (alpha neutral-80 0.4))\n(def neutral-80-opa-50 (alpha neutral-80 0.4))\n(def neutral-80-opa-60 (alpha neutral-80 0.6))\n(def neutral-80-opa-70 (alpha neutral-80 0.7))\n(def neutral-80-opa-80 (alpha neutral-80 0.8))\n(def neutral-80-opa-90 (alpha neutral-80 0.9))\n(def neutral-80-opa-95 (alpha neutral-80 0.95))\n\n;;90 with transparency\n(def neutral-90-opa-0 (alpha neutral-90 0))\n\n;;95 with transparency\n(def neutral-95-opa-0 (alpha neutral-95 0))\n(def neutral-95-opa-60 (alpha neutral-95 0.6))\n(def neutral-95-opa-70 (alpha neutral-95 0.7))\n(def neutral-95-opa-80 (alpha neutral-95 0.8))\n(def neutral-95-opa-90 (alpha neutral-95 0.9))\n(def neutral-95-opa-95 (alpha neutral-95 0.95))\n\n;;100 with transparency\n(def neutral-100-opa-0 (alpha neutral-100 0))\n(def neutral-100-opa-5 (alpha neutral-100 0.05))\n(def neutral-100-opa-10 (alpha neutral-100 0.1))\n(def neutral-100-opa-30 (alpha neutral-100 0.3))\n(def neutral-100-opa-60 (alpha neutral-100 0.6))\n(def neutral-100-opa-70 (alpha neutral-100 0.7))\n(def neutral-100-opa-80 (alpha neutral-100 0.8))\n(def neutral-100-opa-90 (alpha neutral-100 0.9))\n(def neutral-100-opa-95 (alpha neutral-100 0.95))\n(def neutral-100-opa-100 (alpha neutral-100 1))\n\n;;80 with transparency opaque\n(def neutral-80-opa-5-opaque (alpha-opaque neutral-80 0.05))\n\n;;;;White\n\n;;Solid\n(def white \"#ffffff\")\n\n;; with transparency\n(def white-opa-0 (alpha white 0))\n(def white-opa-5 (alpha white 0.05))\n(def white-opa-10 (alpha white 0.1))\n(def white-opa-20 (alpha white 0.2))\n(def white-opa-30 (alpha white 0.3))\n(def white-opa-40 (alpha white 0.4))\n(def white-opa-50 (alpha white 0.5))\n(def white-opa-60 (alpha white 0.6))\n(def white-opa-70 (alpha white 0.7))\n(def white-opa-80 (alpha white 0.8))\n(def white-opa-90 (alpha white 0.9))\n(def white-opa-95 (alpha white 0.95))\n\n;;;;Blur\n(def white-70-blur (alpha white 0.7))\n(def neutral-80-opa-1-blur (alpha \"#192438\" 0.1))\n(def neutral-5-opa-70-blur (alpha neutral-5 0.7))\n(def neutral-80-opa-80-blur (alpha \"#192438\" 0.8))\n(def neutral-90-opa-70-blur (alpha neutral-90 0.7))\n(def neutral-95-opa-70-blur neutral-95-opa-70)\n(def neutral-100-opa-70-blur neutral-100-opa-70)\n\n;;;;Black\n\n;;Solid\n(def black \"#000000\")\n(def black-opa-0 (alpha black 0))\n(def onboarding-header-black \"#000716\")\n\n;;;;Primary\n\n;;Solid\n(def primary-50 \"#4360DF\")\n(def primary-60 \"#354DB2\")\n\n;;50 with transparency\n(def primary-50-opa-5 (alpha primary-50 0.05))\n(def primary-50-opa-10 (alpha primary-50 0.1))\n(def primary-50-opa-20 (alpha primary-50 0.2))\n(def primary-50-opa-30 (alpha primary-50 0.3))\n(def primary-50-opa-40 (alpha primary-50 0.4))\n\n;;;;Success\n\n;;Solid\n(def success-50 \"#23ADA0\")\n(def success-60 \"#1C8A80\")\n\n;;50 with transparency\n(def success-50-opa-5 (alpha success-50 0.05))\n(def success-50-opa-10 (alpha success-50 0.1))\n(def success-50-opa-20 (alpha success-50 0.2))\n(def success-50-opa-30 (alpha success-50 0.3))\n(def success-50-opa-40 (alpha success-50 0.4))\n\n(def success-60-opa-5 (alpha success-60 0.05))\n(def success-60-opa-10 (alpha success-60 0.1))\n(def success-60-opa-20 (alpha success-60 0.2))\n(def success-60-opa-30 (alpha success-60 0.3))\n(def success-60-opa-40 (alpha success-60 0.4))\n\n;;;;Danger\n(def danger \"#E95460\")\n\n;; Danger with transparency\n(def danger-opa-40 (alpha danger 0.4))\n\n;;Solid\n(def danger-50 \"#E95460\")\n(def danger-60 \"#BA434D\")\n\n;;50 with transparency\n(def danger-50-opa-5 (alpha danger-50 0.05))\n(def danger-50-opa-10 (alpha danger-50 0.1))\n(def danger-50-opa-20 (alpha danger-50 0.2))\n(def danger-50-opa-30 (alpha danger-50 0.3))\n(def danger-50-opa-40 (alpha danger-50 0.4))\n\n\n;; Colors for customizing users account\n(def customization\n  {:blue      {50 \"#2A4AF5\"\n               60 \"#223BC4\"}\n   :yellow    {50 \"#F6B03C\"\n               60 \"#C58D30\"}\n   :turquoise {50 \"#2A799B\"\n               60 \"#22617C\"}\n   :copper    {50 \"#CB6256\"\n               60 \"#A24E45\"}\n   :sky       {50 \"#1992D7\"\n               60 \"#1475AC\"}\n   :camel     {50 \"#C78F67\"\n               60 \"#9F7252\"}\n   :orange    {50 \"#FF7D46\"\n               60 \"#CC6438\"}\n   :army      {50 \"#216266\"\n               60 \"#1A4E52\"}\n   :pink      {50 \"#F66F8F\"\n               60 \"#C55972\"}\n   :purple    {50 \"#7140FD\"\n               60 \"#5A33CA\"}\n   :magenta   {50 \"#EC266C\"\n               60 \"#BD1E56\"}})\n\n(def colors-map\n  (merge {:primary {50 primary-50 ;; User can also use primary color as customisation color\n                    60 primary-60}\n          :beige   {50 \"#CAAE93\"\n                    60 \"#AA927C\"}\n          :green   {50 \"#5BCC95\"\n                    60 \"#4CAB7D\"}\n          :brown   {50 \"#99604D\"\n                    60 \"#805141\"}\n          :red     {50 \"#F46666\"\n                    60 \"#CD5656\"}\n          :magenta {50 \"#EC266C\"\n                    60 \"#BD1E56\"}\n          :indigo  {50 \"#496289\"\n                    60 \"#3D5273\"}\n          :danger  {50 danger-50\n                    60 danger-60}\n          :success {50 success-50\n                    60 success-60}}\n         customization))\n\n(def custom-color\n  \"(custom-color color suffix opacity)\n   color   :primary/:purple/...\n   suffix  50/60\n   opacity 0-100 (optional)\"\n  (memoize\n   (fn\n     ([color suffix]\n      (custom-color color suffix nil))\n     ([color suffix opacity]\n      (let [color-keyword (keyword color)\n            base-color    (get-in colors-map\n                                  [color-keyword suffix])]\n        (if opacity (alpha base-color (/ opacity 100)) base-color))))))\n\n(defn custom-color-by-theme\n  \"(custom-color-by-theme color suffix-light suffix-dark opacity-light opacity-dark)\n   color         :primary/:purple/...\n   suffix-light  50/60\n   suffix-dark   50/60\n   opacity-light 0-100 (optional)\n   opacity-dark  0-100 (optional)\"\n  ([color suffix-light suffix-dark]\n   (custom-color-by-theme color suffix-light suffix-dark nil nil))\n  ([color suffix-light suffix-dark opacity-light opacity-dark]\n   (if (theme/dark?)\n     (custom-color color suffix-dark opacity-dark)\n     (custom-color color suffix-light opacity-light))))\n\n(def shadow \"rgba(9,16,28,0.08)\")\n\n;;General\n\n;; divider\n(def divider-light \"#EDF2f4\")\n(def divider-dark \"#0E1620\")\n\n(defn theme-colors\n  \"(theme-colors light dark override-theme)\"\n  ([light dark]\n   (theme-colors light dark nil))\n  ([light dark override-theme]\n   (let [theme (or override-theme (theme/get-theme))]\n     (if (= theme :light) light dark))))\n\n(defn dark?\n  []\n  (theme/dark?))\n"]}