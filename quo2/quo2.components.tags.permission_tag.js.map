{"version":3,"sources":["quo2/components/tags/permission_tag.cljs"],"mappings":"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","names":["quo2.components.tags.permission-tag/outer-resource-container","size","background-color","G__16746","js/Error","quo2.components.tags.permission-tag/extra-count-styles","quo2.foundations.colors/theme-colors","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-70","G__16748","G__16751","quo2.components.tags.permission-tag/extra-count","total-group-count","selected-count","extra-group-count","react-native.core/view","quo2.components.markdown.text/text","quo2.foundations.colors/neutral-50","quo2.foundations.colors/neutral-40","quo2.components.icon/icon","quo2.components.tags.permission-tag/selected-token-count","group","cljs.core/=","cljs.core/count","quo2.components.tags.permission-tag/token-group","p__16760","map__16761","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","last-group","tokens-count","selected-tokens","cljs.core/take","iter__4529__auto__","s__16768","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__16770","cljs.core/chunk-buffer","i__16769","map__16774","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__16767","cljs.core/chunk-rest","map__16788","cljs.core/first","cljs.core/cons","cljs.core/rest","token-icon","react-native.core/image","G__16779","G__16791","G__16781","G__16793","G__16798","G__16799","quo2.components.tags.permission-tag/selected-group-count","tokens","quo2.components.tags.permission-tag/tag-tokens","p__16800","map__16801","selected-groups","last-group-id","cljs.core/last","s__16804","b__16806","i__16805","map__16807","iter__16803","map__16809","id","quo2.components.tags.permission-tag/tag","_","p__16811","map__16812","locked?","on-press","quo2.components.tags.base-tag/base-tag","G__16817","G__16818","G__16819","cljs.core/chunk-first"],"sourcesContent":["(ns quo2.components.tags.permission-tag\n  (:require [quo2.components.icon :as icons]\n            [quo2.components.markdown.text :as text]\n            [quo2.components.tags.base-tag :as base-tag]\n            [quo2.foundations.colors :as colors]\n            [react-native.core :as rn]))\n\n(defn outer-resource-container\n  [size background-color]\n  {:background-color background-color\n   :border-radius    size\n   :width            size\n   :height           size\n   :margin-left      (case size\n                       32 -12\n                       24 -8)\n   :align-items      :center\n   :justify-content  :center})\n\n(defn extra-count-styles\n  [size]\n  {:background-color (colors/theme-colors\n                      colors/neutral-20\n                      colors/neutral-70)\n   :height           (case size\n                       32 28\n                       24 20)\n   :width            (case size\n                       32 28\n                       24 20)\n   :border-radius    size\n   :justify-content  :center\n   :align-items      :center})\n\n(defn extra-count\n  [total-group-count selected-count size background-color]\n  (let [extra-group-count (- total-group-count selected-count)]\n    (when (> extra-group-count 0)\n      [rn/view (outer-resource-container size background-color)\n       [rn/view (extra-count-styles size)\n        (if (< extra-group-count 4)\n          [text/text\n           {:size  :label\n            :style {:align-items :center\n                    :color       (colors/theme-colors\n                                  colors/neutral-50\n                                  colors/neutral-40)}}\n           (str \"+\" extra-group-count)]\n          [icons/icon :i/pending-default\n           {:container-style {:align-items     :center\n                              :justify-content :center}\n            :color           (colors/theme-colors\n                              colors/neutral-50\n                              colors/neutral-40)\n            :size            12}])]])))\n\n(defn selected-token-count\n  [group]\n  (cond\n    (= (count group) 3) 3\n\n    (> (count group) 3) 2\n\n    :else\n    (count group)))\n\n(defn token-group\n  []\n  (fn [{:keys [group size last-group background-color]\n        :or   {size 24}}]\n    (let [tokens-count    (count group)\n          selected-tokens (take (selected-token-count group) group)]\n      [rn/view\n       {:flex-direction :row\n        :align-items    :center}\n       (for [{:keys [token-icon]} selected-tokens]\n         ^{:key token-icon}\n         [rn/view {:flex-direction :row}\n          [rn/view (outer-resource-container size background-color)\n           [rn/image\n            {:source token-icon\n             :style  {:height        (case size\n                                       32 28\n                                       24 20)\n                      :width         (case size\n                                       32 28\n                                       24 20)\n                      :border-radius size}}]]])\n\n       [extra-count tokens-count (count selected-tokens) size]\n       (when-not last-group\n         [rn/view {:align-items :center}\n          [text/text\n           {:weight :medium\n            :size   (case size\n                      32 :paragraph-2\n                      24 :label)\n            :style  {:color          (colors/theme-colors\n                                      colors/neutral-50\n                                      colors/neutral-40)\n                     :padding-left   4\n                     :text-transform :lowercase\n                     :padding-right  (case size\n                                       32 16\n                                       24 12)}}\n           \"or\"]])])))\n\n(defn selected-group-count\n  [tokens]\n  (cond\n    (> (count tokens) 3) 3\n\n    :else\n    (count tokens)))\n\n(defn tag-tokens\n  []\n  (fn [{:keys [tokens size background-color]\n        :or   {size 24}}]\n    (let [selected-groups (take (selected-group-count tokens) tokens)\n          last-group-id   ((last selected-groups) :id)]\n      [rn/view\n       {:flex-direction :row\n        :align-items    :center}\n       (for [{:keys [id group]} selected-groups]\n         ^{:key id}\n         [token-group\n          {:group            group\n           :size             size\n           :last-group       (if (= id last-group-id) true false)\n           :background-color background-color}])])))\n\n(defn tag\n  [_ _]\n  (fn [{:keys [locked? tokens size background-color on-press]\n        :or   {size 24}}]\n    [base-tag/base-tag\n     {:background-color background-color\n      :size             size\n      :type             :permission\n      :on-press         on-press}\n     [rn/view\n      {:flex-direction  :row\n       :align-items     :center\n       :justify-content :flex-end}\n      [rn/view\n       {:padding-left  (case 32\n                         8 24\n                         6)\n        :padding-right (case size\n                         32 16\n                         24 12)}\n       [icons/icon\n        (if locked?\n          :i/locked\n          :i/unlocked)\n        {:resize-mode :center\n         :size        (case size\n                        32 20\n                        24 16)\n         :color       (colors/theme-colors\n                       colors/neutral-50\n                       colors/neutral-40)}]]\n      [tag-tokens\n       {:tokens           tokens\n        :size             size\n        :background-color background-color}]]]))\n"]}