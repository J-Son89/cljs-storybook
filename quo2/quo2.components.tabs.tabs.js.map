{"version":3,"sources":["quo2/components/tabs/tabs.cljs"],"mappings":"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","names":["quo2.components.tabs.tabs/default-tab-size","quo2.components.tabs.tabs/unread-count-offset","p__19439","map__19440","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.tabs.tabs/calculate-fade-end-percentage","offset-x","content-width","layout-width","max-fade-percentage","fade-percentage","x__4214__auto__","y__4215__auto__","utils.number/naive-round","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","quo2.components.tabs.tabs/masked-view-wrapper","p__19458","map__19460","seq19446","G__19448","cljs.core/first","cljs.core/next","self__4723__auto__","fade-end-percentage","fade-end?","children","cljs.core/into","react-native.masked-view/masked-view","reagent.core/as-element","react-native.linear-gradient/linear-gradient","p__19490","map__19491","quo2.components.tabs.tabs/on-scroll-handler","on-scroll","fading","e","target-obj-19500","*runtime-state*-orig-val__19505","oops.state/*runtime-state*","*runtime-state*-temp-val__19506","oops.state/prepare-state","js/Error","next-obj-19501","oops.core/validate-object-access-dynamically","next-obj-19502","next-obj-19503","target-obj-19509","*runtime-state*-orig-val__19522","*runtime-state*-temp-val__19523","next-obj-19514","next-obj-19515","next-obj-19516","target-obj-19528","*runtime-state*-orig-val__19533","*runtime-state*-temp-val__19534","next-obj-19530","next-obj-19531","next-obj-19532","new-percentage","cljs.core/not=","cljs.core/deref","cljs.core/swap!","cljs.core/assoc","p__19543","p__19544","map__19545","map__19546","quo2.components.tabs.tabs/render-tab","active-tab-id","blur?","flat-list-ref","number-of-items","on-change","scroll-on-press?","size","style","id","label","notification-dot?","accessibility-label","index","react-native.core/view","cljs.core/=","quo2.components.tabs.tab.view/view","cljs.core/reset!","and__4115__auto__","p__19568","map__19569","quo2.components.tabs.tabs/tabs","default-active","reagent.core/atom","cljs.core/atom","p__19571","map__19572","data","scrollable?","in-scroll-view?","props","react-native.gesture/flat-list","react-native.core/flat-list","p1__19562#","cljs.core/merge","cljs.core/dissoc","p1__19561#","utils.collection/first-index","cljs.core/comp","cljs.core/str","cljs.core/identity","cljs.core/partial","cljs.core/count","cljs.core/map-indexed","item"],"sourcesContent":["(ns quo2.components.tabs.tabs\n  (:require [oops.core :refer [oget]]\n            [quo2.components.tabs.tab.view :as tab]\n            [react-native.core :as rn]\n            [react-native.linear-gradient :as linear-gradient]\n            [react-native.masked-view :as masked-view]\n            [reagent.core :as reagent]\n            [utils.collection :as utils.collection]\n            [utils.number :as utils.number]\n            [react-native.gesture :as gesture]))\n\n(def default-tab-size 32)\n(def unread-count-offset 3)\n\n(defn- calculate-fade-end-percentage\n  [{:keys [offset-x content-width layout-width max-fade-percentage]}]\n  (let [fade-percentage (max max-fade-percentage\n                             (/ (+ layout-width offset-x)\n                                content-width))]\n    ;; Truncate to avoid unnecessary rendering.\n    (if (> fade-percentage 0.99)\n      0.99\n      (utils.number/naive-round fade-percentage 2))))\n\n(defn- masked-view-wrapper\n  [{:keys [fade-end-percentage fade-end?]} & children]\n  (if fade-end?\n    (into [masked-view/masked-view\n           {:mask-element\n            (reagent/as-element\n             [linear-gradient/linear-gradient\n              {:colors         [:black :transparent]\n               :locations      [fade-end-percentage 1]\n               :start          {:x 0 :y 0}\n               :end            {:x 1 :y 0}\n               :pointer-events :none\n               :style          {:width  \"100%\"\n                                :height \"100%\"}}])}]\n          children)\n    (into [:<>] children)))\n\n(defn- on-scroll-handler\n  [{:keys [on-scroll fading fade-end-percentage fade-end?]} ^js e]\n  (when fade-end?\n    (let [offset-x       (oget e \"nativeEvent.contentOffset.x\")\n          content-width  (oget e \"nativeEvent.contentSize.width\")\n          layout-width   (oget e \"nativeEvent.layoutMeasurement.width\")\n          new-percentage (calculate-fade-end-percentage\n                          {:offset-x            offset-x\n                           :content-width       content-width\n                           :layout-width        layout-width\n                           :max-fade-percentage fade-end-percentage})]\n      ;; Avoid unnecessary re-rendering.\n      (when (not= new-percentage\n                  (get @fading :fade-end-percentage))\n        (swap! fading assoc\n          :fade-end-percentage\n          new-percentage))))\n  (when on-scroll\n    (on-scroll e)))\n\n(defn- render-tab\n  [{:keys [active-tab-id\n           blur?\n           flat-list-ref\n           number-of-items\n           on-change\n           scroll-on-press?\n           size\n           style]}\n   {:keys [id label notification-dot? accessibility-label]}\n   index]\n  [rn/view\n   {:style {:margin-right  (if (= size default-tab-size) 12 8)\n            :padding-right (when (= index (dec number-of-items))\n                             (:padding-left style))}}\n   [tab/view\n    {:id                  id\n     :notification-dot?   notification-dot?\n     :accessibility-label accessibility-label\n     :size                size\n     :blur?               blur?\n     :active              (= id @active-tab-id)\n     :on-press            (fn [id]\n                            (reset! active-tab-id id)\n                            (when (and scroll-on-press? @flat-list-ref)\n                              (.scrollToIndex ^js @flat-list-ref\n                                              #js\n                                               {:animated     true\n                                                :index        index\n                                                :viewPosition 0.5}))\n                            (when on-change\n                              (on-change id)))}\n    label]])\n\n(defn tabs\n  \" Common options (for scrollable and non-scrollable tabs):\n\n  - `blur?` Boolean passed down to `quo2.components.tabs.tab/tab`.\n  - `data` Vector of tab items.\n  - `on-change` Callback called after a tab is selected.\n  - `size` 32/24\n  - `style` Style map passed to View wrapping tabs or to the FlatList when tabs\n    are scrollable.\n\n  Options for scrollable tabs:\n  - `fade-end-percentage` Percentage where fading starts relative to the total\n    layout width of the `flat-list` data.\n  - `fade-end?` When non-nil, causes the end of the scrollable view to fade out.\n  - `on-scroll` Callback called on the on-scroll event of the FlatList. Only\n    used when `scrollable?` is non-nil.\n  - `scrollable?` When non-nil, use a scrollable flat-list to render tabs.\n  - `scroll-on-press?` When non-nil, clicking on a tag centers it the middle\n    (with animation enabled).\n  \"\n  [{:keys [default-active fade-end-percentage]\n    :or   {fade-end-percentage 0.8}}]\n  (let [active-tab-id (reagent/atom default-active)\n        fading        (reagent/atom {:fade-end-percentage fade-end-percentage})\n        flat-list-ref (atom nil)]\n    (fn\n      [{:keys [data\n               fade-end-percentage\n               fade-end?\n               on-change\n               on-scroll\n               scroll-on-press?\n               scrollable?\n               style\n               size\n               blur?\n               in-scroll-view?]\n        :or   {fade-end-percentage fade-end-percentage\n               fade-end?           false\n               scrollable?         false\n               scroll-on-press?    false\n               size                default-tab-size}\n        :as   props}]\n      (if scrollable?\n        [rn/view {:style {:margin-top (- (dec unread-count-offset))}}\n         [masked-view-wrapper\n          {:fade-end-percentage (get @fading :fade-end-percentage) :fade-end? fade-end?}\n          [(if in-scroll-view?\n             gesture/flat-list\n             rn/flat-list)\n           (merge\n            (dissoc props\n             :default-active\n             :fade-end-percentage\n             :fade-end?\n             :on-change\n             :scroll-on-press?\n             :size)\n            (when scroll-on-press?\n              {:initial-scroll-index (utils.collection/first-index #(= @active-tab-id (:id %)) data)})\n            {:ref                               #(reset! flat-list-ref %)\n             :style                             style\n             ;; The padding-top workaround is needed because on Android\n             ;; {:overflow :visible} doesn't work on components inheriting\n             ;; from ScrollView (e.g. FlatList). There are open issues, here's\n             ;; just one about this topic:\n             ;; https://github.com/facebook/react-native/issues/31218\n             :content-container-style           {:padding-top (dec unread-count-offset)}\n             :extra-data                        (str @active-tab-id)\n             :horizontal                        true\n             :scroll-event-throttle             64\n             :shows-horizontal-scroll-indicator false\n             :data                              data\n             :key-fn                            (comp str :id)\n             :on-scroll-to-index-failed         identity\n             :on-scroll                         (partial on-scroll-handler\n                                                         {:fade-end-percentage fade-end-percentage\n                                                          :fade-end?           fade-end?\n                                                          :fading              fading\n                                                          :on-scroll           on-scroll})\n             :render-fn                         (partial render-tab\n                                                         {:active-tab-id    active-tab-id\n                                                          :blur?            blur?\n                                                          :flat-list-ref    flat-list-ref\n                                                          :number-of-items  (count data)\n                                                          :on-change        on-change\n                                                          :scroll-on-press? scroll-on-press?\n                                                          :size             size\n                                                          :style            style})})]]]\n        [rn/view (merge style {:flex-direction :row})\n         (map-indexed (fn [index item]\n                        ^{:key (:id item)}\n                        [render-tab\n                         {:active-tab-id   active-tab-id\n                          :blur?           blur?\n                          :number-of-items (count data)\n                          :on-change       on-change\n                          :size            size\n                          :style           style}\n                         item\n                         index])\n                      data)]))))\n"]}