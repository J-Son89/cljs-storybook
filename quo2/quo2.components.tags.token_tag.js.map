{"version":3,"sources":["quo2/components/tags/token_tag.cljs"],"mappings":"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","names":["quo2.components.tags.token-tag/themes","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-80","quo2.components.tags.token-tag/get-value-from-size","size","big-option","small-option","cljs.core/=","quo2.components.tags.token-tag/icon-container-styles","quo2.components.tags.token-tag/tag-container","quo2.components.tags.token-tag/tag","_","p__16883","map__16884","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","img-src","img-style","border-color","overlay","label","react-native.core/view","cljs.core/merge","quo2.theme/get-theme","react-native.core/image","quo2.components.markdown.text/text","quo2.components.tags.token-tag/loading-icon","quo2.components.icon/icon","quo2.components.tags.token-tag/icon","sufficient?","quo2.foundations.colors/neutral-100","quo2.foundations.colors/white","quo2.components.tags.token-tag/token-tag","p__16892","map__16893","symbol","value","purchasable?","loading?","quo2.foundations.colors/success-50","or__4126__auto__"],"sourcesContent":["(ns quo2.components.tags.token-tag\n  (:require [quo2.components.icon :as icons]\n            [quo2.components.markdown.text :as text]\n            [quo2.foundations.colors :as colors]\n            [quo2.theme :as theme]\n            [react-native.core :as rn]))\n\n(def themes\n  {:light {:background-color colors/neutral-20}\n   :dark  {:background-color colors/neutral-80}})\n\n(defn get-value-from-size\n  [size big-option small-option]\n  (if (= size :big) big-option small-option))\n\n(def icon-container-styles\n  {:display         :flex\n   :align-items     :center\n   :justify-content :center\n   :position        :absolute\n   :border-radius   20\n   :margin-left     2})\n\n(defn tag-container\n  [size]\n  {:height         (get-value-from-size size 32 24)\n   :align-items    :center\n   :flex-direction :row\n   :border-radius  20})\n\n(defn tag\n  \"[tag opts \\\"label\\\"]]\n   opts\n   {\n    :size :small/:big\n    :token-img-src :token-img-src\n    :token-img-style {}\n    :border-color :color\n    :overlay child-elements\n    }\"\n  [_ _]\n  (fn [{:keys [size img-src img-style border-color overlay]\n        :or   {size :small}}\n       label]\n    [rn/view\n     {:style (when border-color\n               {:border-color  border-color\n                :border-radius 20\n                :border-width  1})}\n     [rn/view\n      {:style (merge (tag-container size) (get themes (theme/get-theme)))}\n      [rn/image\n       {:src   img-src\n        :style (merge\n                {:height       (get-value-from-size size 28 20)\n                 :width        (get-value-from-size size 28 20)\n                 :margin-left  2\n                 :margin-right (get-value-from-size size 8 6)}\n                img-style)}]\n      [text/text\n       {:weight :medium\n        :number-of-lines 1\n        :style\n        {:margin-right (get-value-from-size size 12 11)}\n        :size (get-value-from-size size :paragraph-2 :label)} label]\n      overlay]]))\n\n(defn loading-icon\n  []\n  [rn/view\n   {:style {:align-items     :center\n            :justify-content :center\n            :position        :absolute\n            :right           -8\n            :top             -8}}\n   [icons/icon :t/checktoken\n    {:no-color true\n     :size     20}]])\n\n(defn icon\n  [size border-color sufficient?]\n  [rn/view\n   {:style (merge\n            icon-container-styles\n            {:background-color border-color\n             :border-color     (if (= (theme/get-theme) :dark) colors/neutral-100 colors/white)\n             :border-width     1\n             :right            (get-value-from-size size -3.75 -5.75)\n             :bottom           (get-value-from-size size (- 32 7.75 4) (- 24 7.75 2))})}\n   [icons/icon (if sufficient? :i/hold :i/add)\n    {:no-color true\n     :size     12}]])\n\n(defn token-tag\n  \"[token-tag opts]\n   opts\n   {\n    :symbol string\n    :value string\n    :size :small/:big\n    :token-img-src :token-img-src\n    :border-color :color\n    :sufficient? true/false\n    :purchasable? true/false\n    :loading? true/false\n    }\"\n  [_ _]\n  (fn [{:keys [symbol value size img-src border-color purchasable? sufficient? loading?]\n        :or\n        {size :small}}]\n    (let [sufficient?  (when-not loading? sufficient?)\n          border-color (if sufficient? colors/success-50 border-color)]\n      [tag\n       {:size size\n        :img-src img-src\n        :border-color (if sufficient? colors/success-50 border-color)\n        :overlay\n        (if loading?\n          [loading-icon]\n          (when (or purchasable? sufficient?)\n            [icon size border-color sufficient?]))}\n       (str value \" \" symbol)])))\n"]}