{"version":3,"sources":["utils/number.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;AAAA,AAAMA,AASHC,AAAEC;AATL,AAUE,AAAMC,AAAM,AAAA,AAACC,AAAYF;AAAzB,AACE,AAAG,AAACG,AAAW,AAAGJ,AAAEE,AACjBA;;AAEP,AAAA;;;AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFP;AAFJ,AAGG,AAAA,AAACO,AAAUP;;;AAHd,AAAA,AAAA,AAAMO,AAIFP,AAAES;AAJN,AAKG,AAAMC,AAAU,AAAA,AAACC,AAAYX;AAA7B,AACE,AAAI,AAACY,AAASF;AACZA;;AACAD;;;;AARP,AAAA,AAAA,AAAMF;;AAAN","names":["utils.number/naive-round","n","decimal-places","scale","Math/pow","Math/round","var_args","G__16620","utils.number/parse-int","js/Error","default","maybe-int","js/parseInt","cljs.core/integer?"],"sourcesContent":["(ns utils.number)\n\n(defn naive-round\n  \"Quickly and naively round number `n` up to `decimal-places`.\n\n  Example usage: use it to avoid re-renders caused by floating-point number\n  changes in Reagent atoms. Such numbers can be rounded up to a certain number\n  of `decimal-places` in order to avoid re-rendering due to tiny fractional\n  changes.\n\n  Don't use this function for arbitrary-precision arithmetic.\"\n  [n decimal-places]\n  (let [scale (Math/pow 10 decimal-places)]\n    (/ (Math/round (* n scale))\n       scale)))\n\n(defn parse-int\n  \"Parses `n` as an integer. Defaults to zero or `default` instead of NaN.\"\n  ([n]\n   (parse-int n 0))\n  ([n default]\n   (let [maybe-int (js/parseInt n 10)]\n     (if (integer? maybe-int)\n       maybe-int\n       default))))\n"]}