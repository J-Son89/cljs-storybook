{"version":3,"sources":["quo2/components/info/info_message.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA,AACeC,AACAC,AACAC,AACAC,AACAC,AACAC;AAEpB,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAACC,AAAOT,AAAQ,AAACU,AAAiBF;;AAEpC;;;;;;;;;;AAAA,AAAAG,AAAMM,AASiEQ;AATvE,AAAA,AAAAb,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AASWM;AATX,AAAAF,AAAAJ,AAAA,AASgBO;AAThB,AAAAH,AAAAJ,AAAA,AASqBQ;AATrB,AAAAJ,AAAAJ,AAAA,AAS0BS;AAT1B,AAAAL,AAAAJ,AAAA,AASqCU;AATrC,AAAAN,AAAAJ,AAAA,AASgDW;AAThD,AAAAP,AAAAJ,AAAA,AAS+DY;AAT/D,AAUE,AAAME,AAAW,AAAA,AAAA,AAAI,AAAA,AAACC,AAAER;AAClBS,AAAW,AAAA,AAAA,AAAI,AAAA,AAACD,AAAER;AAClBA,AAAW,AAAA,AAAA,AAAI,AAAA,AAACQ,AAAER;AAClBE,AAAW,AAAAQ,AAAIR;AAAJ,AAAA,AAAAQ;AAAAA;;AAAe,AAACtB,AAAUW;;;AACrCI,AAAW,AAAAO,AAAIP;AAAJ,AAAA,AAAAO;AAAAA;;AAAeR;;;AAJhC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKGS,AACQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAEMP,AACdQ,AAAgBZ,AACLE,AACAC,AACAK,AACXK,AACSd,AACAO,AACoBL,AACII","names":["quo2.components.info.info-message/themes","quo2.foundations.colors/neutral-50","quo2.foundations.colors/success-50","quo2.foundations.colors/danger-50","quo2.foundations.colors/neutral-40","quo2.foundations.colors/success-60","quo2.foundations.colors/danger-60","quo2.components.info.info-message/get-color","key","cljs.core/get-in","quo2.theme/get-theme","p__16675","map__16676","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.info.info-message/info-message","type","size","icon","text-color","icon-color","no-icon-color?","style","message","weight","cljs.core/=","icon-size","or__4126__auto__","react-native.core/view","cljs.core/merge","quo2.components.icon/icon","quo2.components.markdown.text/text"],"sourcesContent":["(ns quo2.components.info.info-message\n  (:require [quo2.components.icon :as quo2.icons]\n            [quo2.components.markdown.text :as text]\n            [quo2.foundations.colors :as colors]\n            [quo2.theme :as theme]\n            [react-native.core :as rn]))\n\n(def themes\n  {:light {:default colors/neutral-50\n           :success colors/success-50\n           :error   colors/danger-50}\n   :dark  {:default colors/neutral-40\n           :success colors/success-60\n           :error   colors/danger-60}})\n\n(defn get-color\n  [key]\n  (get-in themes [(theme/get-theme) key]))\n\n(defn info-message\n  \"[info-message opts \\\"message\\\"]\n  opts\n  {:type           :default/:success/:error\n   :size           :default/:tiny\n   :icon           :i/info       ;; info message icon\n   :text-color     colors/white  ;; text color override\n   :icon-color     colors/white  ;; icon color override\n   :no-icon-color? false         ;; disable tint color for icon\"\n  [{:keys [type size icon text-color icon-color no-icon-color? style]} message]\n  (let [weight     (if (= size :default) :regular :medium)\n        icon-size  (if (= size :default) 16 12)\n        size       (if (= size :default) :paragraph-2 :label)\n        text-color (or text-color (get-color type))\n        icon-color (or icon-color text-color)]\n    [rn/view\n     {:style (merge {:flex-direction :row\n                     :align-items    :center}\n                    style)}\n     [quo2.icons/icon icon\n      {:color    icon-color\n       :no-color no-icon-color?\n       :size     icon-size}]\n     [text/text\n      {:size   size\n       :weight weight\n       :style  {:color             text-color\n                :margin-horizontal 4}} message]]))\n"]}