{"version":3,"sources":["quo2/components/tags/status_tags.cljs"],"mappings":"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","names":["quo2.components.tags.status-tags/default-container-style","quo2.components.tags.status-tags/small-container-style","cljs.core/merge","quo2.components.tags.status-tags/large-container-style","quo2.components.tags.status-tags/base-tag","_","p__18976","map__18977","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","size","border-color","background-color","icon","text-color","label","accessibility-label","paragraph-size","cljs.core/=","react-native.core/view","cljs.core/assoc","quo2.components.icon/icon","quo2.components.markdown.text/text","quo2.components.tags.status-tags/positive","theme","no-icon?","quo2.foundations.colors/success-50-opa-10","quo2.foundations.colors/success-50-opa-20","quo2.foundations.colors/success-60","quo2.foundations.colors/success-50","quo2.components.tags.status-tags/negative","quo2.foundations.colors/danger-50-opa-10","quo2.foundations.colors/danger-50-opa-20","quo2.foundations.colors/danger-50","quo2.foundations.colors/danger-60","quo2.components.tags.status-tags/pending","blur?","quo2.foundations.colors/white-opa-5","quo2.foundations.colors/theme-colors","quo2.foundations.colors/neutral-10","quo2.foundations.colors/neutral-80-opa-40","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-80","quo2.foundations.colors/white-opa-70","quo2.foundations.colors/neutral-50","quo2.foundations.colors/neutral-40","p__18996","map__18997","quo2.components.tags.status-tags/status-tag","status","override-theme","temp__5735__auto__","status-component","G__19002","cljs.core/Keyword","or__4126__auto__","quo2.theme/get-theme"],"sourcesContent":["(ns quo2.components.tags.status-tags\n  (:require [quo2.components.icon :as icon]\n            [quo2.components.markdown.text :as text]\n            [quo2.foundations.colors :as colors]\n            [quo2.theme :as quo2.theme]\n            [react-native.core :as rn]))\n\n(def default-container-style\n  {:border-radius 20\n   :border-width  1})\n\n(def small-container-style\n  (merge default-container-style\n         {:min-height         24\n          :padding-horizontal 8\n          :padding-vertical   1}))\n\n(def large-container-style\n  (merge default-container-style\n         {:min-height         32\n          :padding-horizontal 11\n          :padding-vertical   4}))\n\n(defn base-tag\n  [_]\n  (fn\n    [{:keys [size\n             border-color\n             background-color\n             icon\n             text-color\n             label\n             accessibility-label]}]\n    (let [paragraph-size (if (= size :small) :paragraph-2 :paragraph-1)]\n      [rn/view\n       {:accessible          true\n        :accessibility-label accessibility-label\n        :style               (assoc (if (= size :small)\n                                      small-container-style\n                                      large-container-style)\n                                    :align-self       :flex-start\n                                    :border-width     1\n                                    :border-color     border-color\n                                    :background-color background-color)}\n       [rn/view\n        {:flex-direction :row\n         :flex           1}\n        [rn/view\n         {:style {:justify-content :center\n                  :align-items     :center}}\n         (when icon\n           [icon/icon\n            icon\n            {:no-color true\n             :size     (if (= size :large) 20 12)}])]\n        [text/text\n         {:size   paragraph-size\n          :weight :medium\n          :style  {:padding-left 5\n                   :color        text-color}} label]]])))\n\n(defn- positive\n  [size theme label _ no-icon?]\n  [base-tag\n   {:accessibility-label :status-tag-positive\n    :size                size\n    :icon                (when-not no-icon? :i/positive-state)\n    :background-color    colors/success-50-opa-10\n    :border-color        colors/success-50-opa-20\n    :label               label\n    ;; The positive tag uses the same color for `light` and `dark blur` variant\n    :text-color          (if (= theme :dark) colors/success-60 colors/success-50)}])\n\n(defn- negative\n  [size theme label _ no-icon?]\n  [base-tag\n   {:accessibility-label :status-tag-negative\n    :size                size\n    :icon                (when-not no-icon? :i/negative-state)\n    :background-color    colors/danger-50-opa-10\n    :border-color        colors/danger-50-opa-20\n    :label               label\n    ;; The negative tag uses the same color for `dark` and `dark blur` variant\n    :text-color          (if (= theme :light) colors/danger-50 colors/danger-60)}])\n\n(defn- pending\n  [size theme label blur? no-icon?]\n  [base-tag\n   {:accessibility-label :status-tag-pending\n    :size                size\n    :label               label\n    :icon                (when-not no-icon?\n                           (if blur?\n                             :i/pending-dark-blur\n                             (if (= theme :light) :i/pending-light :i/pending-dark)))\n    :background-color    (if blur?\n                           colors/white-opa-5\n                           (colors/theme-colors colors/neutral-10 colors/neutral-80-opa-40 theme))\n    :border-color        (if blur?\n                           colors/white-opa-5\n                           (colors/theme-colors colors/neutral-20 colors/neutral-80 theme))\n\n    :text-color          (if blur?\n                           colors/white-opa-70\n                           (colors/theme-colors colors/neutral-50 colors/neutral-40 theme))}])\n\n(defn status-tag\n  [{:keys [status size override-theme label blur? no-icon?]}]\n  (when status\n    (when-let [status-component (case (:type status)\n                                  :positive positive\n                                  :negative negative\n                                  :pending  pending\n                                  nil)]\n      [status-component\n       size\n       (or override-theme (quo2.theme/get-theme))\n       label\n       blur?\n       no-icon?])))\n"]}