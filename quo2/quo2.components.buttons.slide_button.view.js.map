{"version":3,"sources":["quo2/components/buttons/slide_button/view.cljs"],"mappings":"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","names":["p__16814","map__16815","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.buttons.slide-button.view/f-slider","disabled?","track-width","reagent.core/atom","sliding-complete?","gestures-disabled?","on-track-layout","evt","width","target-obj-16820","*runtime-state*-orig-val__16827","oops.state/*runtime-state*","*runtime-state*-temp-val__16828","oops.state/prepare-state","js/Error","next-obj-16824","oops.core/validate-object-access-dynamically","next-obj-16825","next-obj-16826","cljs.core/reset!","p__16833","map__16834","on-complete","track-text","track-icon","customization-color","size","x-pos","react-native.reanimated/use-shared-value","dimensions","cljs.core/partial","quo2.components.buttons.slide-button.utils/get-dimensions","or__4126__auto__","cljs.core/deref","quo2.components.buttons.slide-button.constants/default-width","interpolate-track","quo2.components.buttons.slide-button.animations/interpolate-track","react-native.core/use-effect","react-native.gesture/gesture-detector","quo2.components.buttons.slide-button.animations/drag-gesture","react-native.reanimated/view","quo2.components.buttons.slide-button.style/track","quo2.components.buttons.slide-button.style/track-cover","react-native.core/view","quo2.components.buttons.slide-button.style/track-cover-text-container","quo2.components.icon/icon","quo2.components.buttons.slide-button.utils/slider-color","react-native.core/text","quo2.components.buttons.slide-button.style/track-text","quo2.components.buttons.slide-button.style/thumb-container","quo2.components.buttons.slide-button.style/arrow-icon-container","quo2.foundations.colors/white","quo2.components.buttons.slide-button.style/action-icon","quo2.components.buttons.slide-button.view/view","props"],"sourcesContent":["(ns quo2.components.buttons.slide-button.view\n  (:require\n    [quo2.components.icon :as icon]\n    [quo2.foundations.colors :as colors]\n    [quo2.components.buttons.slide-button.style :as style]\n    [quo2.components.buttons.slide-button.utils :as utils]\n    [quo2.components.buttons.slide-button.animations :as animations]\n    [react-native.gesture :as gesture]\n    [react-native.core :as rn]\n    [reagent.core :as reagent]\n    [oops.core :as oops]\n    [react-native.reanimated :as reanimated]\n    [quo2.components.buttons.slide-button.constants :as constants]))\n\n(defn- f-slider\n  [{:keys [disabled?]}]\n  (let [track-width        (reagent/atom nil)\n        sliding-complete?  (reagent/atom false)\n        gestures-disabled? (reagent/atom disabled?)\n        on-track-layout    (fn [evt]\n                             (let [width (oops/oget evt \"nativeEvent.layout.width\")]\n                               (reset! track-width width)))]\n\n    (fn [{:keys [on-complete\n                 track-text\n                 track-icon\n                 disabled?\n                 customization-color\n                 size]}]\n      (let [x-pos             (reanimated/use-shared-value 0)\n            dimensions        (partial utils/get-dimensions\n                                       (or @track-width constants/default-width)\n                                       size)\n            interpolate-track (partial animations/interpolate-track\n                                       x-pos\n                                       (dimensions :usable-track)\n                                       (dimensions :thumb))]\n\n        (rn/use-effect (fn []\n                         (when @sliding-complete?\n                           (on-complete)))\n                       [@sliding-complete?])\n\n        [gesture/gesture-detector\n         {:gesture (animations/drag-gesture x-pos\n                                            gestures-disabled?\n                                            disabled?\n                                            (dimensions :usable-track)\n                                            sliding-complete?)}\n         [reanimated/view\n          {:test-ID   :slide-button-track\n           :style     (style/track disabled? customization-color (dimensions :track-height))\n           :on-layout (when-not (some? @track-width)\n                        on-track-layout)}\n          [reanimated/view {:style (style/track-cover interpolate-track)}\n           [rn/view {:style (style/track-cover-text-container @track-width)}\n            [icon/icon track-icon\n             {:color (utils/slider-color :main customization-color)\n              :size  20}]\n            [rn/view {:width 4}]\n            [rn/text {:style (style/track-text customization-color)} track-text]]]\n          [reanimated/view\n           {:style (style/thumb-container interpolate-track\n                                          (dimensions :thumb)\n                                          customization-color)}\n           [reanimated/view {:style (style/arrow-icon-container interpolate-track)}\n            [icon/icon :arrow-right\n             {:color colors/white\n              :size  20}]]\n           [reanimated/view\n            {:style (style/action-icon interpolate-track\n                                       (dimensions :thumb))}\n            [icon/icon track-icon\n             {:color colors/white\n              :size  20}]]]]]))))\n\n(defn view\n  \"Options\n  - `on-complete`         Callback called when the sliding is complete\n  - `disabled?`           Boolean that disables the button\n                          (_and gestures_)\n  - `size`                `:small`/`:large`\n  - `track-text`          Text that is shown on the track\n  - `track-icon`          Key of the icon shown on the track\n                          (e.g. `:face-id`)\n  - `customization-color` Customization color\n  \"\n  [props]\n  [:f> f-slider props])\n"]}