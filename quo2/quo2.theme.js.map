{"version":3,"sources":["quo2/theme.cljs"],"mappings":"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","names":["js/quo2","js/quo2.theme","js/quo2.theme.theme-context","quo2.theme/theme-context","js/shadow.js.shim.module$react.createContext","js/quo2.theme.theme-state","quo2.theme/theme-state","reagent.core/atom","quo2.theme/dark?","cljs.core/deref","cljs.core/=","quo2.theme/get-theme","quo2.theme/set-theme","value","cljs.core/reset!","var_args","G__16548","quo2.theme/theme-value","js/Error","light-value","dark-value","override-theme","theme","or__4126__auto__","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","quo2.theme/provider","seq16549","G__16550","cljs.core/first","cljs.core/next","self__4723__auto__","options","children","cljs.core/into","quo2.theme/use-theme","utils.transforms/js->clj","react-native.core/use-context","quo2.theme/f-with-theme","seq16551","G__16552","G__16553","component","props","args","cljs.core/keyword","cljs.core/assoc","quo2.theme/with-theme"],"sourcesContent":["(ns quo2.theme\n  (:require [react-native.core :as rn]\n            [\"react\" :as react]\n            [reagent.core :as reagent]\n            utils.transforms))\n\n(defonce ^:private theme-context (react/createContext :light))\n(defonce ^:private theme-state (reagent/atom :light))\n\n(defn dark?\n  []\n  (= :dark @theme-state))\n\n(defn get-theme\n  []\n  @theme-state)\n\n(defn set-theme\n  [value]\n  (reset! theme-state value))\n\n(defn theme-value\n  \"Returns a value based on the current/override-theme theme.\"\n  ([light-value dark-value]\n   (theme-value light-value dark-value nil))\n  ([light-value dark-value override-theme]\n   (let [theme (or override-theme (get-theme))]\n     (if (= theme :light) light-value dark-value))))\n\n(defn provider\n  \"Wrap `children` in a React Provider using `quo2.theme/theme-context` as the\n  context.\n\n  `options`: Clojure map. Currently we only use the `:theme` key. In the future\n  we may support other settings.\n  \"\n  [options & children]\n  (into [:> (.-Provider theme-context) {:value options}]\n        children))\n\n(defn use-theme\n  \"A hook that returns the current theme context.\"\n  []\n  (utils.transforms/js->clj (rn/use-context theme-context)))\n\n(defn ^:private f-with-theme\n  [component props & args]\n  (let [theme (-> (use-theme) :theme keyword)]\n    (into [component (assoc props :theme theme)] args)))\n\n(defn with-theme\n  \"Create a functional component that assoc `:theme` into the first arg of\n  `component`. The theme value is taken from the nearest `quo2.theme/provider`.\"\n  [component]\n  (fn [& args]\n    (into [:f> f-with-theme component] args)))\n"]}