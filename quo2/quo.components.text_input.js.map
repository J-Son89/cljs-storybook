{"version":3,"sources":["quo/components/text_input.cljs"],"mappings":"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","names":["js/quo","js/quo.components","js/quo.components.text-input","js/quo.components.text-input.text-input-refs","quo.components.text-input/text-input-refs","cljs.core/atom","cljs.spec.alpha/def-impl","cljs.core/boolean?","cljs.spec.alpha/nilable-impl","cljs.spec.alpha/or-spec-impl","cljs.core/string?","cljs.core/vector?","cljs.core/keyword?","cljs.core/fn?","cljs.spec.alpha/map-spec-impl","G__19033","cljs.core/map?","G__19046","quo.components.text-input/check-spec","spec","prop","cljs.spec.alpha/valid?","cljs.spec.alpha/explain","quo.components.text-input/height","quo.components.text-input/multiline-height","quo.components.text-input/label-style","quo.design-system.spacing/spacing","quo.components.text-input/text-input-row-style","quo.components.text-input/text-input-view-style","style","cljs.core/merge","cljs.core/deref","quo.design-system.colors/theme","quo.components.text-input/text-input-style","multiline","input-style","monospace","before","after","quo.design-system.typography/monospace","quo.design-system.typography/font-regular","quo.components.text-input/cancel-style","quo.components.text-input/accessory-style","quo.design-system.spacing/padding-horizontal","p__19068","map__19069","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo.components.text-input/accessory-element","icon","component","icon-opts","accessibility-label","on-press","el","quo.react-native/touchable-opacity","quo.react-native/view","status-im.ui.components.icons.icons/icon","quo.components.text-input/text-input-raw","focused","reagent.core/atom","visible","ref","blur","G__19084","target-obj-19093","*runtime-state*-orig-val__19097","oops.state/*runtime-state*","*runtime-state*-temp-val__19098","oops.state/prepare-state","js/Error","call-info-19095","next-obj-19096","oops.core/validate-object-access-dynamically","fn-19094","oops.core/validate-fn-call-dynamically","oops.state/get-last-access-modifier","p__19099","map__19101","label","error","keyboard-type","cancel-label","on-focus","on-blur","show-cancel","bottom-value","secure-text-entry","container-style","get-ref","on-cancel","auto-complete-type","auto-correct","props","quo.platform/ios?","and__4115__auto__","cljs.core/reset!","cljs.core/not","secure","cljs.core/boolean","auto-complete","cljs.core/=","cljs.core/not=","quo.platform/android?","quo.components.text/text","quo.react-native/text-input","r","evt","quo.react-native/configure-next","quo.react-native/layout-animation-presets","cljs.core/dissoc","quo.components.tooltip/tooltip","cljs.core/name","p__19129","map__19130","quo.components.text-input/text-input","preserve-input?","id","cljs.core/random-uuid","reagent.core/create-class","cljs.core/swap!","p__19141","map__19142","default-value","cljs.core/assoc"],"sourcesContent":["(ns quo.components.text-input\n  (:require [clojure.spec.alpha :as s]\n            [oops.core :refer [ocall]]\n            [quo.components.text :as text]\n            [quo.components.tooltip :as tooltip]\n            [quo.design-system.colors :as colors]\n            [quo.design-system.spacing :as spacing]\n            [quo.design-system.typography :as typography]\n            [quo.platform :as platform]\n            [quo.react-native :as rn] ;; TODO(Ferossgp): Move icon component to lib\n            [reagent.core :as reagent]\n            [status-im.ui.components.icons.icons :as icons]))\n\n;; NOTE(Ferossgp): Refactor with hooks when available\n;; We track all currently mounted text input refs\n;; in a ref-to-defaultValue map\n;; so that we can clear them (restore their default values)\n;; when global react-navigation's onWillBlur event is invoked\n(defonce text-input-refs (atom {}))\n\n(s/def ::multiline boolean?)\n(s/def ::secure-text-entry boolean?)\n(s/def ::show-cancel boolean?)\n(s/def ::label\n  (s/nilable (s/or :string    string?\n                   :component vector?)))\n(s/def ::cancel-label (s/nilable string?))\n(s/def ::default-value (s/nilable string?))\n(s/def ::placeholder (s/nilable string?))\n(s/def ::keyboard-type\n  (s/nilable (s/or :string  string?\n                   :keyword keyword?))) ; TODO: make set\n(s/def ::accessibility-label\n  (s/nilable (s/or :string  string?\n                   :keyword keyword?)))\n(s/def ::on-focus fn?)\n(s/def ::on-blur fn?)\n(s/def ::on-press fn?)\n\n(s/def ::accessory\n  (s/keys :opt-un [::on-press\n                   ::icon\n                   ::component]))\n(s/def ::after (s/nilable ::accessory))\n(s/def ::before (s/nilable ::accessory))\n\n(s/def ::style (s/nilable map?))\n(s/def ::input-style ::style)\n(s/def ::container-style ::style)\n\n(s/def ::text-input\n  (s/keys :opt-un\n          [::label\n           ::multiline\n           ::error\n           ::style\n           ::input-style\n           ::keyboard-type\n           ::before\n           ::after\n           ::cancel-label\n           ::on-focus\n           ::on-blur\n           ::container-style\n           ::show-cancel\n           ::accessibility-label\n           ::bottom-value\n           ::secure-text-entry]))\n\n(defn check-spec\n  [spec prop]\n  (if (s/valid? spec prop)\n    true\n    (do\n      (s/explain spec prop)\n      false)))\n\n(def height 44)                         ; 22 line-height + 11*2 vertical padding\n(def multiline-height 88)               ; 3 * 22 three line-height + 11* vertical padding\n\n(defn label-style\n  []\n  {:margin-bottom (:tiny spacing/spacing)})\n\n(defn text-input-row-style\n  []\n  {:flex-direction :row\n   :align-items    :center})\n\n(defn text-input-view-style\n  [style]\n  (merge {:border-radius    8\n          :flex-direction   :row\n          :flex             1\n          :align-items      :center\n          :background-color (:ui-01 @colors/theme)}\n         style))\n\n(defn text-input-style\n  [multiline input-style monospace before after]\n  (merge (if monospace\n           typography/monospace\n           typography/font-regular)\n         {:padding-top         11\n          :padding-bottom      11\n          :font-size           15\n          :margin              0\n          :text-align-vertical :center\n          :flex                1\n          :color               (:text-01 @colors/theme)\n          :height              height}\n         (when-not before\n           {:padding-left (:base spacing/spacing)})\n         (when-not after\n           {:padding-right (:base spacing/spacing)})\n         (when multiline\n           {:text-align-vertical :top\n            :line-height         22\n            :height              multiline-height})\n         input-style))\n\n(defn cancel-style\n  []\n  {:margin-left     (:tiny spacing/spacing)\n   :padding-left    (:tiny spacing/spacing)\n   :justify-content :center\n   :align-self      :stretch})\n\n(defn accessory-style\n  []\n  (merge (:base spacing/padding-horizontal)\n         {:flex            1\n          :justify-content :center}))\n\n(defn accessory-element\n  [{:keys [icon component icon-opts style accessibility-label on-press]}]\n  (let [el (if on-press\n             rn/touchable-opacity\n             rn/view)]\n    [el\n     (merge {:style {:align-self :stretch}}\n            (when on-press\n              {:on-press on-press}))\n     [rn/view\n      (merge {:style (merge (accessory-style)\n                            style)}\n             (when accessibility-label\n               {:accessibility-label accessibility-label}))\n      (cond\n        icon\n        [icons/icon icon\n         (merge {:color (:icon-01 @colors/theme)}\n                icon-opts)]\n        component\n        component\n\n        :else\n        nil)]]))\n\n(defn text-input-raw\n  []\n  (let [focused (reagent/atom nil)\n        visible (reagent/atom false)\n        ref     (atom nil)\n        blur    (fn []\n                  (some-> @ref\n                          (ocall \"blur\")))]\n    (fn\n      [{:keys [label multiline error style input-style keyboard-type before after\n               cancel-label on-focus on-blur show-cancel accessibility-label\n               bottom-value secure-text-entry container-style get-ref on-cancel\n               monospace auto-complete-type auto-correct]\n        :or   {cancel-label \"Cancel\"}\n        :as   props}]\n      {:pre [(check-spec ::text-input props)]}\n      (let [show-cancel   (if (nil? show-cancel)\n                            ;; Enabled by default on iOs and disabled on Android\n                            platform/ios?\n                            show-cancel)\n            after         (cond\n                            (and secure-text-entry @visible)\n                            {:icon     :main-icons/hide\n                             :on-press #(reset! visible false)}\n\n                            (and secure-text-entry (not @visible))\n                            {:icon     :main-icons/show\n                             :on-press #(reset! visible true)}\n\n                            :else after)\n            secure        (boolean (and secure-text-entry (not @visible))) ; must be a boolean to work on\n                                                                           ; iOS\n            auto-complete (cond\n                            (= keyboard-type :visible-password)\n                            :off\n\n                            secure-text-entry\n                            :password\n\n                            :else\n                            auto-complete-type)\n            auto-correct  (and (not= keyboard-type :visible-password)\n                               (not secure-text-entry)\n                               auto-correct)\n            on-cancel     (fn []\n                            (when on-cancel\n                              (on-cancel))\n                            (blur))\n            keyboard-type (cond\n                            (and platform/ios? (= keyboard-type :visible-password))\n                            :default\n\n                            ; the correct approach on Android would be keep secure-text-entry on set\n                            ; keyboard type\n                            ; to visible-password. But until\n                            ; https://github.com/facebook/react-native/issues/27946\n                            ; is solved that's the second best way.\n                            (and platform/android? secure-text-entry)\n                            :default\n\n                            :else\n                            keyboard-type)]\n        [rn/view {:style container-style}\n         (when label\n           [text/text {:style (label-style)}\n            label])\n         [rn/view {:style (text-input-row-style)}\n          [rn/view\n           {:style                       (text-input-view-style style)\n            :important-for-accessibility (if secure-text-entry\n                                           :no-hide-descendants\n                                           :auto)}\n           (when before\n             [accessory-element before])\n           [rn/text-input\n            (merge\n             {:style                   (text-input-style multiline input-style monospace before after)\n              :ref                     (fn [r]\n                                         (reset! ref r)\n                                         (when get-ref (get-ref r)))\n              :placeholder-text-color  (:text-02 @colors/theme)\n              :underline-color-android :transparent\n              :auto-capitalize         :none\n              :secure-text-entry       secure\n              :auto-correct            auto-correct\n              :auto-complete-type      auto-complete\n              :on-focus                (fn [evt]\n                                         (when on-focus (on-focus evt))\n                                         (when show-cancel\n                                           (rn/configure-next (:ease-in-ease-out\n                                                               rn/layout-animation-presets)))\n                                         (reset! focused true))\n              :on-blur                 (fn [evt]\n                                         (when on-blur (on-blur evt))\n                                         (when show-cancel\n                                           (rn/configure-next (:ease-in-ease-out\n                                                               rn/layout-animation-presets)))\n                                         (reset! focused false))\n              :keyboard-type           keyboard-type}\n             (when (and platform/ios? (not after))\n               {:clear-button-mode :while-editing})\n             (dissoc props\n              :style\n              :keyboard-type\n              :on-focus\n              :on-blur\n              :secure-text-entry\n              :ref\n              :get-ref\n              :auto-correct\n              :auto-complete-type))]\n           (when after\n             [accessory-element after])]\n          (when (and show-cancel\n                     (not multiline)\n                     @focused)\n            [rn/touchable-opacity\n             {:style    (cancel-style)\n              :on-press on-cancel}\n             [text/text {:color :link} cancel-label]])\n          (when error\n            [tooltip/tooltip\n             (merge {:bottom-value (if bottom-value bottom-value 0)}\n                    (when accessibility-label\n                      {:accessibility-label (str (name accessibility-label) \"-error\")}))\n             [text/text\n              {:color :negative\n               :align :center\n               :size  :small}\n              error]])]]))))\n\n;; TODO(Ferossgp): Refactor me when hooks available\n(defn text-input\n  [{:keys [preserve-input?]\n    :as   props}]\n  (if preserve-input?\n    [text-input-raw props]\n    (let [id (random-uuid)]\n      (reagent/create-class\n       {:component-will-unmount\n        (fn []\n          (swap! text-input-refs dissoc id))\n        :reagent-render\n        (fn [{:keys [get-ref default-value]\n              :as   props}]\n          [text-input-raw\n           (merge props\n                  {:get-ref (fn [r]\n                              ;; Store input and its defaultValue\n                              ;; one we receive a non-nil ref\n                              (when r\n                                (swap! text-input-refs assoc id {:ref r :value default-value}))\n                              (when get-ref (get-ref r)))})])}))))\n"]}