{"version":3,"sources":["quo2/components/inputs/recovery_phrase/view.cljs"],"mappings":"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","names":["quo2.components.inputs.recovery-phrase.view/custom-props","quo2.components.inputs.recovery-phrase.view/error-word","text","react-native.core/text","quo2.components.inputs.recovery-phrase.style/error-word","quo2.components.inputs.recovery-phrase.view/mark-error-words","pred-last-word","pred-previous-words","word-limit","last-index","cljs.core/count","clojure.string/split","words","p1__17075#","cljs.core/map","cljs.core/apply","cljs.core/str","p1__17076#","cljs.core/partition-by","cljs.core/=","cljs.core/reduce","p__17083","map__17084","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core/get","idx","acc","word","error-pred","invalid-word?","and__4115__auto__","or__4126__auto__","clojure.string/blank?","not-blank-spaces?","G__17100","cljs.core/update","cljs.core/inc","cljs.core/conj","quo2.components.inputs.recovery-phrase.view/recovery-phrase-input","_","state","reagent.core/atom","set-focused","cljs.core/reset!","set-default","p__17131","map__17132","customization-color","override-theme","blur?","on-focus","on-blur","mark-errors?","error-pred-current-word","error-pred-written-words","cljs.core/constantly","props","extra-props","cljs.core/dissoc","react-native.core/view","quo2.components.inputs.recovery-phrase.style/container","react-native.core/text-input","cljs.core/merge","quo2.components.inputs.recovery-phrase.style/input","cljs.core/deref","quo2.components.inputs.recovery-phrase.style/placeholder-color","quo2.components.inputs.recovery-phrase.style/cursor-color","quo2.theme/theme-value"],"sourcesContent":["(ns quo2.components.inputs.recovery-phrase.view\n  (:require [clojure.string :as string]\n            [quo2.components.inputs.recovery-phrase.style :as style]\n            [react-native.core :as rn]\n            [reagent.core :as reagent]\n            [quo2.theme :as theme]))\n\n(def ^:private custom-props\n  [:customization-color :override-theme :blur? :cursor-color :multiline :on-focus :on-blur\n   :placeholder-text-color :mark-errors? :error-pred :word-limit])\n\n(defn- error-word\n  [text]\n  [rn/text {:style (style/error-word)}\n   text])\n\n(defn- mark-error-words\n  [pred-last-word pred-previous-words text word-limit]\n  (let [last-index (dec (count (string/split text #\"\\s+\")))\n        words      (map #(apply str %)\n                        (partition-by #(= \" \" %) text))]\n    (->> words\n         (reduce (fn [{:keys [idx] :as acc} word]\n                   (let [error-pred        (if (= last-index idx) pred-last-word pred-previous-words)\n                         invalid-word?     (and (or (error-pred word)\n                                                    (>= idx word-limit))\n                                                (not (string/blank? word)))\n                         not-blank-spaces? (not (string/blank? word))]\n                     (cond-> acc\n                       not-blank-spaces? (update :idx inc)\n                       :always           (update :result\n                                                 conj\n                                                 (if invalid-word?\n                                                   [error-word word]\n                                                   word)))))\n                 {:result [:<>]\n                  :idx    0})\n         :result)))\n\n(defn recovery-phrase-input\n  [_ _]\n  (let [state       (reagent/atom :default)\n        set-focused #(reset! state :focused)\n        set-default #(reset! state :default)]\n    (fn [{:keys [customization-color override-theme blur? on-focus on-blur mark-errors?\n                 error-pred-current-word error-pred-written-words word-limit]\n          :or   {customization-color      :blue\n                 word-limit               ##Inf\n                 error-pred-current-word  (constantly false)\n                 error-pred-written-words (constantly false)}\n          :as   props}\n         text]\n      (let [extra-props (apply dissoc props custom-props)]\n        [rn/view {:style style/container}\n         [rn/text-input\n          (merge {:accessibility-label    :recovery-phrase-input\n                  :style                  (style/input)\n                  :placeholder-text-color (style/placeholder-color @state override-theme blur?)\n                  :cursor-color           (style/cursor-color customization-color override-theme)\n                  :keyboard-appearance    (theme/theme-value :light :dark override-theme)\n                  :multiline              true\n                  :on-focus               (fn []\n                                            (set-focused)\n                                            (when on-focus (on-focus)))\n                  :on-blur                (fn []\n                                            (set-default)\n                                            (when on-blur (on-blur)))}\n                 extra-props)\n          (if mark-errors?\n            (mark-error-words error-pred-current-word error-pred-written-words text word-limit)\n            text)]]))))\n"]}