{"version":3,"sources":["quo2/components/inputs/input/view.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,AAAA,AAAAA,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AACiBO;AADjB,AAAAH,AAAAJ,AAAA,AAC+BQ;AAD/B,AAAAJ,AAAAJ,AAAA,AAC0CS;AAD1C,AAEE,AAAMC,AAAW,AAAA,AAAA,AAAMF,AAAW,AAAA,AAAKD,AAAkBC;AAAzD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGG,AAEsBC,AACrBD,AAAgBE,AACfC,AACS,AAACC,AAAkBN,AAG5BH,AACDK,AAAgBK,AACfF,AACS,AAACG,AAAoBV,AAAcC,AAAWC,AAGvDC;;AAEP,AAAA,AAAAQ,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAAC,AAAAgB,AAAAA;AAAA,AAAAf,AAAAe,AAAA,AACWV;AADX,AAAAL,AAAAe,AAAA,AAC0BE;AAD1B,AAAAjB,AAAAe,AAAA,AACiCG;AADjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGX,AAEsB,AAACY,AAA0BF,AAChDG,AAAUF,AAAU,AAACG,AAAWhB;;AAEpC,AAAA,AAAAiB,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAA,AAAAvB,AAAAuB,AAAA,AACWlB;AADX,AAAAL,AAAAuB,AAAA,AAC0BN;AAD1B,AAAAjB,AAAAuB,AAAA,AACiCE;AADjC,AAAAzB,AAAAuB,AAAA,AAC2CG;AAD3C,AAAA1B,AAAAuB,AAAA,AACoDI;AADpD,AAAA3B,AAAAuB,AAAA,AACkEL;AADlE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGU,AAEsB,AAACC,AAAgCZ,AACjCQ,AACAC,AACrBN,AAAUF,AAAU,AAACS,AAActB;;AAEvC,AAAA,AAAAyB,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlC,AAAA,AAAAkC,AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAAC,AAAAgC,AAAAA;AAAA,AAAA/B,AAAA+B,AAAA,AACW1B;AADX,AAAAL,AAAA+B,AAAA,AAC0BE;AAD1B,AAAAjC,AAAA+B,AAAA,AAC2Cd;AAD3C,AAAAjB,AAAA+B,AAAA,AACkDN;AADlD,AAAAzB,AAAA+B,AAAA,AAC4DL;AAD5D,AAAA1B,AAAA+B,AAAA,AACqEG;AADrE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGN,AAEsB,AAACO,AAAa9B,AAAeY,AAC7BQ,AACAC,AACrBU,AAAgB,AAACC,AAAkBJ,AACnCC;;AAEJ;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeI;AAKf,AAAA,AAAAC,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3C,AAAA,AAAA2C,AAAA,AAAA,AAAA,AAAA,AAAA1C,AAAAC,AAAAyC,AAAAA;AAAA,AAAAxC,AAAAwC,AAAA,AACWE;AADX,AAAA1C,AAAAwC,AAAA,AAC0BG;AAD1B,AAEE,AAAME,AAAoB,AAAA,AAACC;AAA3B,AACMC;AADN,AAC2B,AAAA,AAACC,AAAOH;;AADnC,AAEMI;AAFN,AAE2B,AAAA,AAACD,AAAOH;;AAC7BK,AAAoB,AAAA,AAACJ;AAH3B,AAAAF,AAIMO;AAJN,AAI2B,AAAMC,AAAO,AAAAC,AAAAT;AAAA,AAAA,AAAAU,AAAAC;AAAAC,AAAA,AAAAC,AAAAJ,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAH,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAAC,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAQ,AAAA,AAAA,AAAAD,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAAF,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAP,AAAAD;;AAAb,AACE,AAAI,AAAA,AAAGF;AACL,AAAA,AAACJ,AAAOE;;AACR,AAAA,AAACF,AAAOE;;;AACjCa,AAAoB,AAAA,AAACjB;AACrBkB,AAAoB,AAAKC,AAAS7D;AAAd,AACE,AAAMsC;AAAN,AAAqB,AAACA,AAAeuB;;AAArC;;AACA,AAAMC,AAAa,AAACC,AAAMF;AAA1B,AACE,AAACjB,AAAOe,AAAWG;;AACnB,AAAM,AAAIA,AAAa9D;AAAvB,AACE,AAACuC,AAAoBuB;;AADvB;;;AAb9B,AAeE,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxE,AAAA,AAAAwE,AAAA,AAAA,AAAA,AAAA,AAAAvE,AAAAC,AAAAsE,AAAAA;AAAAA,AAEYW;AAFZ,AAAAhF,AAAAqE,AAAA,AAAkCG;AAAlC,AAAAxE,AAAAqE,AAAA,AAA8D5C;AAA9D,AAAAzB,AAAAqE,AAAA,AAAmBE;AAAnB,AAAAvE,AAAAqE,AAAA,AAAaC;AAAb,AAAAtE,AAAAqE,AAAA,AACyCQ;AADzC,AAAA7E,AAAAqE,AAAA,AAC8BO;AAD9B,AAAA5E,AAAAqE,AAAA,AAA+EM;AAA/E,AAAA3E,AAAAqE,AAAA,AACoDS;AADpD,AAAA9E,AAAAqE,AAAA,AAC6DU;AAD7D,AAAA/E,AAAAqE,AAAA,AAAwEpD;AAAxE,AAAAjB,AAAAqE,AAAA,AACmBjE;AADnB,AAAAJ,AAAAqE,AAAA,AACanE;AADb,AAAAF,AAAAqE,AAAA,AAAyCI;AAAzC,AAAAzE,AAAAqE,AAAA,AAAoDK;AAApD,AAGE,AAAMO,AAAiB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AACEzD,AACA+C,AACW3B;;AAC9BZ,AAAiB,AAACkD,AAAoBF,AAAUX,AAAMC;AACtDlE,AAAiB,AAAC+E,AAAsBd,AAAMC;AAC9Cc,AAAiB,AAACvF,AAAMwF,AAAON,AAAM1C;AAN3C,AAAA,AAAA,AAQG,AAAM,AAAAiD,AAAIrF;AAAJ,AAAA,AAAAqF;AAAAA;;AAAUnF;;AARnB,AAAA,AAAA,AAQG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA8E,AAAA,AAAA,AACGjF,AACiBI,AACAH,AACC6D,AACD3D,AACnBG,AAAgB,AAACiF,AAAsBvD,AAAiBhB,AAAOQ,AAC/D,AAAAgE,AAA+Bf;AAA/B,AAAA,AAAAe;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7F,AAAA,AAAA6F,AAAA,AAAA,AAAA,AAAA,AAAA5F,AAAAC,AAAA2F,AAAAA;AAAA,AAAA1F,AAAA0F,AAAA,AAAmBxE;AAAnB,AAAA,AAAA,AAAA,AAAA,AAAA,AACGF,AACiBX,AACAY,AACAC;;AAJpB;;AAfJ,AAoBKyE,AACA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAiC,AAAA,AAAAV,AAACW,AAAY5D,AAAiBhB,AAAQiC,AAEtC,AAAA,AAAcjB,AACd,AAAA,AAAA,AAAC6D,AAA+BvB,AAChC,AAAA,AAASlE,AACT,AAAC0F,AAAItE,AACL;AAAA,AACE,AAAMqD;AAAN,AAAe,AAACA;;AAAhB;;AACA,AAAC/B;AARpC,AASiC;AAAA,AACE,AAAMgC;AAAN,AAAc,AAACA;;AAAf;;AACA,AAAC9B;;AAXpC2C,AAAA,AAYa,AAAAA,AAACI,AAAMX;;AAZpBO,AAAA,AAAAA,AAaEhB,AAAW,AAAAgB,AAAA,AAAA,AAAA,AAACK,AAC8B9C;AAd5C,AAAA,AAeE/C;AAAW,AAAAwF,AAAA,AAAA,AAAAM,AAACD;AAAD,AAAwB,AAAAC,AAAClC,AAAqB5D;;;AAf3DwF;;AAgBD,AAAAH,AAAiDhB;AAAjD,AAAA,AAAAgB;AAAA,AAAA,AAAAU,AAAAV;AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtG,AAAA,AAAAsG,AAAA,AAAA,AAAA,AAAA,AAAArG,AAAAC,AAAAoG,AAAAA;AAAA,AAAAnG,AAAAmG,AAAA,AAAmBzE;AAAnB,AAAA1B,AAAAmG,AAAA,AAA4BjF;AAA5B,AAAAlB,AAAAmG,AAAA,AAAsCC;AAAtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACG5E,AACiBnB,AACAY,AACAQ,AACA2E,AACAlF,AACA;AAAA,AACE,AAAM2D;AAAN,AAAiB,AAAA,AAAC7B,AAAOe;;AAAzB;;AACA,AAACrC;;;AATvB;;AAUA,AAAA+D,AAAmCd;AAAnC,AAAA,AAAAc;AAAA,AAAA,AAAAY,AAAAZ;AAAAY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxG,AAAA,AAAAwG,AAAA,AAAA,AAAA,AAAA,AAAAvG,AAAAC,AAAAsG,AAAAA;AAAA,AAAArG,AAAAqG,AAAA,AAAmB3E;AAAnB,AAAA1B,AAAAqG,AAAA,AAA4BnE;AAA5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGF,AACmBC,AACA5B,AACAY,AACAQ,AACAC,AACAQ;;AAPtB;;;;;AASV,AAAA,AAAAoE,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1G,AAAA,AAAA0G,AAAA,AAAA,AAAA,AAAA,AAAAzG,AAAAC,AAAAwG,AAAAA;AAAA,AAAAvG,AAAAuG,AAAA,AAAA,AACWE;AADX,AAGE,AAAMC,AAAgB,AAAC5D,AAAa2D;AAApC,AACE,AAAKzB;AAAL,AAAA,AACGvC,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwD,AAAMjB,AAIqB,AAAA,AAAAE,AAACa,AAAKW,AACMC,AACA,AAAA,AAAAzB,AAAA,AAAA,AAAKwB;AAN7C,AAOyC,AAACE,AAAMF,AAAgBX;;;;AAEvE;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAAc,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA,AAAAhH,AAAAC,AAAA+G,AAAAA;AAAAA,AA0BU9B;AA1BV,AAAAhF,AAAA8G,AAAA,AAAA,AAwBWE;AAxBX,AAAAhH,AAAA8G,AAAA,AAwBgBjC;AAxBhB,AAAA7E,AAAA8G,AAAA,AAwB2BG;AAxB3B,AAAAjH,AAAA8G,AAAA,AAwBoCpE;AAxBpC,AAAA1C,AAAA8G,AAAA,AAwBmD5F;AAxBnD,AA2BE,AAAMgG,AAAW,AAAAC,AAAQnC;AAARmC,AAAA,AAAAA,AACEjG,AAAe,AAAAiG,AAAA,AAAA,AAAA,AAACC,AAAiClG;AADnDiG,AAAA,AAEEtC,AAAe,AAAAsC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAClB,AACkBoB;AADnB,AAGoB,AAAMJ;AAAN,AAAe,AAACA;;AAAhB;;AALrCE;AAAA,AAAA,AAMEzE;AAAe,AAAAyE,AAAA,AAAClB,AACM,AAAKhC;AAAL,AACE,AAACvB,AAAeuB;;AAChB,AAACqD;;;AAT3BH;;;AAAjB,AAUE,AAAI,AAAA,AAACI,AAAEP;AAAP,AACGR,AAAeU;;AADlB,AAEGzE,AAAWyE","names":["p__17060","map__17061","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.inputs.input.view/label-&-counter","label","current-chars","char-limit","variant-colors","count-text","react-native.core/view","quo2.components.inputs.input.style/texts-container","quo2.components.inputs.input.style/label-container","quo2.components.markdown.text/text","quo2.components.inputs.input.style/label-color","quo2.components.inputs.input.style/counter-container","quo2.components.inputs.input.style/counter-color","p__17063","map__17064","quo2.components.inputs.input.view/left-accessory","small?","icon-name","quo2.components.inputs.input.style/left-icon-container","quo2.components.icon/icon","quo2.components.inputs.input.style/icon","p__17069","map__17070","quo2.components.inputs.input.view/right-accessory","disabled?","on-press","icon-style-fn","react-native.core/touchable-opacity","quo2.components.inputs.input.style/right-icon-touchable-area","p__17072","map__17073","quo2.components.inputs.input.view/right-button","colors-by-status","text","quo2.components.inputs.input.style/button","react-native.core/text","quo2.components.inputs.input.style/button-text","quo2.components.inputs.input.view/custom-props","p__17079","map__17080","quo2.components.inputs.input.view/base-input","on-change-text","on-char-limit-reach","p1__17077#","status","reagent.core/atom","internal-on-focus","cljs.core/reset!","internal-on-blur","multiple-lines?","set-multiple-lines!","height","target-obj-17082","*runtime-state*-orig-val__17089","oops.state/*runtime-state*","*runtime-state*-temp-val__17090","oops.state/prepare-state","js/Error","next-obj-17086","oops.core/validate-object-access-dynamically","next-obj-17087","next-obj-17088","char-count","update-char-limit!","new-text","amount-chars","cljs.core/count","p__17104","map__17105","blur?","override-theme","error?","right-icon","left-icon","button","multiline?","clearable?","on-focus","on-blur","props","status-kw","cljs.core/deref","quo2.components.inputs.input.style/status-colors","quo2.components.inputs.input.style/variants-colors","clean-props","cljs.core/dissoc","or__4126__auto__","quo2.components.inputs.input.style/input-container","temp__5735__auto__","map__17123","react-native.core/text-input","G__17130","quo2.components.inputs.input.style/input","quo2.theme/theme-value","cljs.core/not","cljs.core/merge","cljs.core/assoc","p1__17078#","map__17136","style-fn","map__17144","p__17148","map__17149","quo2.components.inputs.input.view/password-input","default-shown?","password-shown?","quo2.components.inputs.input.style/password-icon","cljs.core/swap!","p__17153","map__17154","quo2.components.inputs.input.view/input","type","on-clear","base-props","G__17165","cljs.core/assoc-in","quo2.components.inputs.input.style/clear-icon","reagent.core/flush","cljs.core/="],"sourcesContent":["(ns quo2.components.inputs.input.view\n  (:require [oops.core :as oops]\n            [quo2.components.icon :as icon]\n            [quo2.components.inputs.input.style :as style]\n            [quo2.components.markdown.text :as text]\n            [react-native.core :as rn]\n            [reagent.core :as reagent]\n            [quo2.theme :as theme]))\n\n(defn- label-&-counter\n  [{:keys [label current-chars char-limit variant-colors]}]\n  (let [count-text (when char-limit (str current-chars \"/\" char-limit))]\n    [rn/view\n     {:accessibility-label :input-labels\n      :style               style/texts-container}\n     [rn/view {:style style/label-container}\n      [text/text\n       {:style  (style/label-color variant-colors)\n        :weight :medium\n        :size   :paragraph-2}\n       label]]\n     [rn/view {:style style/counter-container}\n      [text/text\n       {:style  (style/counter-color current-chars char-limit variant-colors)\n        :weight :regular\n        :size   :paragraph-2}\n       count-text]]]))\n\n(defn- left-accessory\n  [{:keys [variant-colors small? icon-name]}]\n  [rn/view\n   {:accessibility-label :input-icon\n    :style               (style/left-icon-container small?)}\n   [icon/icon icon-name (style/icon variant-colors)]])\n\n(defn- right-accessory\n  [{:keys [variant-colors small? disabled? on-press icon-style-fn icon-name]}]\n  [rn/touchable-opacity\n   {:accessibility-label :input-right-icon\n    :style               (style/right-icon-touchable-area small?)\n    :disabled            disabled?\n    :on-press            on-press}\n   [icon/icon icon-name (icon-style-fn variant-colors)]])\n\n(defn- right-button\n  [{:keys [variant-colors colors-by-status small? disabled? on-press text]}]\n  [rn/touchable-opacity\n   {:accessibility-label :input-button\n    :style               (style/button variant-colors small?)\n    :disabled            disabled?\n    :on-press            on-press}\n   [rn/text {:style (style/button-text colors-by-status)}\n    text]])\n\n(def ^:private custom-props\n  \"Custom properties that must be removed from properties map passed to InputText.\"\n  [:type :blur? :override-theme :error? :right-icon :left-icon :disabled? :small? :button\n   :label :char-limit :on-char-limit-reach :icon-name :multiline? :on-focus :on-blur])\n\n(defn- base-input\n  [{:keys [on-change-text on-char-limit-reach]}]\n  (let [status              (reagent/atom :default)\n        internal-on-focus   #(reset! status :focus)\n        internal-on-blur    #(reset! status :default)\n        multiple-lines?     (reagent/atom false)\n        set-multiple-lines! #(let [height (oops/oget % \"nativeEvent.contentSize.height\")]\n                               (if (> height 57)\n                                 (reset! multiple-lines? true)\n                                 (reset! multiple-lines? false)))\n        char-count          (reagent/atom 0)\n        update-char-limit!  (fn [new-text char-limit]\n                              (when on-change-text (on-change-text new-text))\n                              (let [amount-chars (count new-text)]\n                                (reset! char-count amount-chars)\n                                (when (>= amount-chars char-limit)\n                                  (on-char-limit-reach amount-chars))))]\n    (fn [{:keys [blur? override-theme error? right-icon left-icon disabled? small? button\n                 label char-limit multiline? clearable? on-focus on-blur]\n          :as   props}]\n      (let [status-kw        (cond\n                               disabled? :disabled\n                               error?    :error\n                               :else     @status)\n            colors-by-status (style/status-colors status-kw blur? override-theme)\n            variant-colors   (style/variants-colors blur? override-theme)\n            clean-props      (apply dissoc props custom-props)]\n        [:<>\n         (when (or label char-limit)\n           [label-&-counter\n            {:variant-colors variant-colors\n             :label          label\n             :current-chars  @char-count\n             :char-limit     char-limit}])\n         [rn/view {:style (style/input-container colors-by-status small? disabled?)}\n          (when-let [{:keys [icon-name]} left-icon]\n            [left-accessory\n             {:variant-colors variant-colors\n              :small?         small?\n              :icon-name      icon-name}])\n          [rn/text-input\n           (cond-> {:style                  (style/input colors-by-status small? @multiple-lines?)\n                    :accessibility-label    :input\n                    :placeholder-text-color (:placeholder colors-by-status)\n                    :keyboard-appearance    (theme/theme-value :light :dark override-theme)\n                    :cursor-color           (:cursor variant-colors)\n                    :editable               (not disabled?)\n                    :on-focus               (fn []\n                                              (when on-focus (on-focus))\n                                              (internal-on-focus))\n                    :on-blur                (fn []\n                                              (when on-blur (on-blur))\n                                              (internal-on-blur))}\n             :always    (merge clean-props)\n             multiline? (assoc :multiline              true\n                               :on-content-size-change set-multiple-lines!)\n             char-limit (assoc :on-change-text #(update-char-limit! % char-limit)))]\n          (when-let [{:keys [on-press icon-name style-fn]} right-icon]\n            [right-accessory\n             {:variant-colors variant-colors\n              :small?         small?\n              :disabled?      disabled?\n              :icon-style-fn  style-fn\n              :icon-name      icon-name\n              :on-press       (fn []\n                                (when clearable? (reset! char-count 0))\n                                (on-press))}])\n          (when-let [{:keys [on-press text]} button]\n            [right-button\n             {:colors-by-status colors-by-status\n              :variant-colors   variant-colors\n              :small?           small?\n              :disabled?        disabled?\n              :on-press         on-press\n              :text             text}])]]))))\n\n(defn- password-input\n  [{:keys [default-shown?]\n    :or   {default-shown? false}}]\n  (let [password-shown? (reagent/atom default-shown?)]\n    (fn [props]\n      [base-input\n       (assoc props\n              :accessibility-label :password-input\n              :auto-capitalize     :none\n              :auto-complete       :password\n              :secure-text-entry   (not @password-shown?)\n              :right-icon          {:style-fn  style/password-icon\n                                    :icon-name (if @password-shown? :i/hide :i/reveal)\n                                    :on-press  #(swap! password-shown? not)})])))\n\n(defn input\n  \"This input supports the following properties:\n  - :type - Can be `:text`(default) or `:password`.\n  - :blur? - Boolean to set the blur color variant.\n  - :override-theme - Can be `light` or `:dark`.\n  - :small? - Boolean to specify if this input is rendered in its small version.\n  - :multiline? - Boolean to specify if this input support multiple lines.\n  - :icon-name - The name of an icon to display at the left of the input.\n  - :error? - Boolean to specify it this input marks an error.\n  - :disabled? - Boolean to specify if this input is disabled or not.\n  - :clearable? - Booolean to specify if this input has a clear button at the end.\n  - :on-clear - Function executed when the clear button is pressed.\n  - :button - Map containing `:on-press` & `:text` keys, if provided renders a button\n  - :label - A string to set as label for this input.\n  - :char-limit - A number to set a maximum char limit for this input.\n  - :on-char-limit-reach - Function executed each time char limit is reached or exceeded.\n  - :default-shown? - boolean to show password input initially\n  and supports the usual React Native's TextInput properties to control its behaviour:\n  - :value\n  - :default-value\n  - :on-change\n  - :on-change-text\n  ...\n  \"\n  [{:keys [type clearable? on-clear on-change-text icon-name]\n    :or   {type :text}\n    :as   props}]\n  (let [base-props (cond-> props\n                     icon-name      (assoc-in [:left-icon :icon-name] icon-name)\n                     clearable?     (assoc :right-icon\n                                           {:style-fn  style/clear-icon\n                                            :icon-name :i/clear\n                                            :on-press  #(when on-clear (on-clear))})\n                     on-change-text (assoc :on-change-text\n                                           (fn [new-text]\n                                             (on-change-text new-text)\n                                             (reagent/flush))))]\n    (if (= type :password)\n      [password-input base-props]\n      [base-input base-props])))\n"]}