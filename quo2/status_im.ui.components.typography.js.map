{"version":3,"sources":["status_im/ui/components/typography.cljs"],"mappings":"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","names":["status-im.ui.components.typography/default-font-family","status-im.ui.components.typography/default-style","quo.design-system.colors/black","status-im.ui.components.typography/typography-styles","p__17365","map__17366","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","js/Error","status-im.ui.components.typography/get-style","typography","style","cljs.core/contains?","map__17369","font-weight","font-style","cljs.core/merge","cljs.core/dissoc","cljs.core/assoc","G__17376","cljs.core/=","p__17377","map__17378","status-im.ui.components.typography/get-nested-style","map__17380","G__17382","or__4126__auto__","G__17384"],"sourcesContent":["(ns status-im.ui.components.typography\n  (:require [quo.design-system.colors :as colors]))\n\n(def default-font-family \"Inter\")\n(defn default-style\n  []\n  {:color       colors/black\n   :font-weight \"400\"\n   :font-size   15})\n\n(def typography-styles\n  {:header        {:font-weight \"700\"\n                   :font-size   22}\n\n   :title-bold    {:font-weight \"700\"\n                   :font-size   17}\n\n   :title         {:font-size 17}\n\n   :main-semibold {:font-weight \"600\"}\n\n   :main-medium   {:font-weight \"500\"}\n\n   :caption       {:font-size 12}\n\n   :timestamp     {:font-size      10\n                   :text-transform :uppercase}})\n\n(defn get-style\n  [{:keys [typography] :as style}]\n  {:pre [(or (nil? typography) (contains? typography-styles typography))]}\n  (let [{:keys [font-weight font-style]\n         :as   style}\n        (merge (default-style)\n               (get typography-styles\n                    typography)\n               (dissoc style :typography :nested?))]\n    (-> style\n        (assoc :font-family\n               (str default-font-family\n                    \"-\"\n                    (case font-weight\n                      \"400\" (when-not (= font-style :italic)\n                              \"Regular\")\n                      \"500\" \"Medium\"\n                      \"600\" \"SemiBold\"\n                      \"700\" \"Bold\")\n                    (when (= font-style :italic)\n                      \"Italic\")))\n        (dissoc :font-weight :font-style))))\n\n(defn get-nested-style\n  [{:keys [typography] :as style}]\n  {:pre [(or (nil? typography) (contains? typography-styles typography))]}\n  (let [{:keys [font-weight font-style] :as style}\n        (merge (get typography-styles\n                    typography)\n               (dissoc style :typography))]\n    (cond-> (dissoc style :font-weight :font-style)\n      (or font-weight font-style)\n      (assoc :font-family\n             (str default-font-family\n                  \"-\"\n                  (case font-weight\n                    \"500\" \"Medium\"\n                    \"600\" \"SemiBold\"\n                    \"700\" \"Bold\"\n                    (when-not (= font-style :italic)\n                      \"Regular\"))\n                  (when (= font-style :italic)\n                    \"Italic\"))))))\n"]}