{"version":3,"sources":["native_module/core.cljs"],"mappings":"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","names":["native-module.core/status","js/shadow.js.shim.module$react_native","native-module.core/init","handler","p1__18221#","react-native.core/device-event-emitter","native-module.core/clear-web-data","taoensso.timbre/-log!","taoensso.timbre/*config*","cljs.core/Delay","native-module.core/init-keystore","key-uid","callback","native-module.core/open-accounts","p1__18242#","utils.transforms/json->clj","native-module.core/prepare-dir-and-update-config","config","p1__18249#","native-module.core/save-account-and-login","multiaccount-data","hashed-password","settings","accounts-data","native-module.core/save-multiaccount-and-login-with-keycard","password","chat-key","native-module.core/login-with-config","account-data","utils.transforms/clj->json","p__18268","map__18271","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","native-module.core/login-account","keyUid","request","native-module.core/create-account-and-login","native-module.core/restore-account-and-login","native-module.core/export-db","native-module.core/import-db","native-module.core/logout","native-module.core/multiaccount-load-account","address","native-module.core/multiaccount-derive-addresses","account-id","paths","native-module.core/multiaccount-store-account","native-module.core/multiaccount-store-derived","native-module.core/multiaccount-generate-and-derive-addresses","n","mnemonic-length","native-module.core/multiaccount-import-mnemonic","mnemonic","native-module.core/multiaccount-import-private-key","private-key","native-module.core/verify","native-module.core/verify-database-password","p__18304","map__18305","native-module.core/login-with-keycard","native-module.core/set-soft-input-mode","mode","native-module.core/call-rpc","payload","native-module.core/call-private-rpc","native-module.core/hash-transaction","rpcParams","native-module.core/hash-message","message","native-module.core/local-pairing-preflight-outbound-check","react-native.platform/ios?","native-module.core/get-connection-string-for-bootstrapping-another-device","config-json","native-module.core/input-connection-string-for-bootstrapping","connection-string","native-module.core/deserialize-and-compress-key","key","native-module.core/compressed-key->public-key","public-key","deserialization-key","native-module.core/hash-typed-data","data","native-module.core/hash-typed-data-v4","native-module.core/send-transaction-with-signature","sig","native-module.core/sign-message","native-module.core/recover-message","native-module.core/send-transaction","native-module.core/sign-typed-data","account","native-module.core/sign-typed-data-v4","native-module.core/send-logs","dbJson","js-logs","native-module.core/close-application","native-module.core/connection-change","type","expensive?","cljs.core/boolean","native-module.core/app-state-change","state","native-module.core/start-local-notifications","native-module.core/set-blank-preview-flag","flag","native-module.core/get-device-model-info","temp__5735__auto__","status","native-module.core/get-node-config","native-module.core/toggle-webview-debug","on","native-module.core/rooted-device?","react-native.platform/android?","native-module.core/generate-gfycat","utils.validators/valid-public-key?","native-module.core/identicon","seed","native-module.core/encode-transfer","to-norm","amount-hex","native-module.core/decode-parameters","bytes-string","types","json-str","native-module.core/hex-to-number","hex","native-module.core/number-to-hex","num","native-module.core/sha3","str","native-module.core/utf8-to-hex","native-module.core/hex-to-utf8","native-module.core/check-address-checksum","result","native-module.core/address?","native-module.core/to-checksum-address","native-module.core/gfycat-identicon-async","native-module.core/validate-mnemonic","native-module.core/delete-multiaccount","native-module.core/delete-imported-key","native-module.core/reset-keyboard-input","input","selection","native-module.core/reset-password","current-password#","new-password#","p__18421","map__18423","native-module.core/convert-to-keycard-account","new-password","native-module.core/backup-disabled-data-dir","native-module.core/keystore-dir","native-module.core/log-file-directory","p__18436","map__18437","native-module.core/init-status-go-logging","enable?","mobile-system?","log-level"],"sourcesContent":["(ns native-module.core\n  (:require [\"react-native\" :as react-native]\n            [utils.validators :as validators]\n            [taoensso.timbre :as log]\n            [react-native.platform :as platform]\n            [react-native.core :as rn]\n            [utils.transforms :as types]))\n\n(defn status\n  []\n  (when (exists? (.-NativeModules react-native))\n    (.-Status ^js (.-NativeModules react-native))))\n\n(defn init\n  [handler]\n  (.addListener ^js rn/device-event-emitter \"gethEvent\" #(handler (.-jsonEvent ^js %))))\n\n(defn clear-web-data\n  []\n  (log/debug \"[native-module] clear-web-data\")\n  (when (status)\n    (.clearCookies ^js (status))\n    (.clearStorageAPIs ^js (status))))\n\n(defn init-keystore\n  [key-uid callback]\n  (log/debug \"[native-module] init-keystore\" key-uid)\n  (.initKeystore ^js (status) key-uid callback))\n\n(defn open-accounts\n  [callback]\n  (log/debug \"[native-module] open-accounts\")\n  (.openAccounts ^js (status) #(callback (types/json->clj %))))\n\n(defn prepare-dir-and-update-config\n  [key-uid config callback]\n  (log/debug \"[native-module] prepare-dir-and-update-config\")\n  (.prepareDirAndUpdateConfig ^js (status)\n                              key-uid\n                              config\n                              #(callback (types/json->clj %))))\n\n(defn save-account-and-login\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [key-uid multiaccount-data hashed-password settings config accounts-data]\n  (log/debug \"[native-module] save-account-and-login\"\n             \"multiaccount-data\"\n             multiaccount-data)\n  (clear-web-data)\n  (init-keystore\n   key-uid\n   #(.saveAccountAndLogin\n     ^js (status)\n     multiaccount-data\n     hashed-password\n     settings\n     config\n     accounts-data)))\n\n(defn save-multiaccount-and-login-with-keycard\n  \"NOTE: chat-key is a whisper private key sent from keycard\"\n  [key-uid multiaccount-data password settings config accounts-data chat-key]\n  (log/debug \"[native-module] save-account-and-login-with-keycard\")\n  (init-keystore\n   key-uid\n   #(.saveAccountAndLoginWithKeycard\n     ^js (status)\n     multiaccount-data\n     password\n     settings\n     config\n     accounts-data\n     chat-key)))\n\n(defn login-with-config\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [key-uid account-data hashed-password config]\n  (log/debug \"[native-module] loginWithConfig\")\n  (clear-web-data)\n  (let [config (if config (types/clj->json config) \"\")]\n    (init-keystore\n     key-uid\n     #(.loginWithConfig ^js (status) account-data hashed-password config))))\n\n(defn login-account\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [{:keys [keyUid] :as request}]\n  (log/debug \"[native-module] loginWithConfig\")\n  (clear-web-data)\n  (init-keystore\n   keyUid\n   #(.loginAccount ^js (status) (types/clj->json request))))\n\n(defn create-account-and-login\n  [request]\n  (.createAccountAndLogin ^js (status) (types/clj->json request)))\n\n(defn restore-account-and-login\n  [request]\n  (.restoreAccountAndLogin ^js (status) (types/clj->json request)))\n\n(defn export-db\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [key-uid account-data hashed-password callback]\n  (log/debug \"[native-module] export-db\")\n  (clear-web-data)\n  (init-keystore\n   key-uid\n   #(.exportUnencryptedDatabase ^js (status) account-data hashed-password callback)))\n\n(defn import-db\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [key-uid account-data hashed-password]\n  (log/debug \"[native-module] import-db\")\n  (clear-web-data)\n  (init-keystore\n   key-uid\n   #(.importUnencryptedDatabase ^js (status) account-data hashed-password)))\n\n(defn logout\n  []\n  (log/debug \"[native-module] logout\")\n  (clear-web-data)\n  (.logout ^js (status)))\n\n(defn multiaccount-load-account\n  \"NOTE: beware, the password has to be sha3 hashed\n\n   this function is used after storing an account when you still want to\n   derive accounts from it, because saving an account flushes the loaded keys\n   from memory\"\n  [address hashed-password callback]\n  (log/debug \"[native-module] multiaccount-load-account\")\n  (.multiAccountLoadAccount ^js (status)\n                            (types/clj->json {:address  address\n                                              :password hashed-password})\n                            callback))\n\n(defn multiaccount-derive-addresses\n  \"NOTE: this should be named derive-accounts\n   this only derive addresses, they still need to be stored\n   with `multiaccount-store-derived` if you want to be able to\n   reuse the derived addresses later\"\n  [account-id paths callback]\n  (log/debug \"[native-module]  multiaccount-derive-addresses\")\n  (when (status)\n    (.multiAccountDeriveAddresses ^js (status)\n                                  (types/clj->json {:accountID account-id\n                                                    :paths     paths})\n                                  callback)))\n\n(defn multiaccount-store-account\n  \"NOTE: beware, the password has to be sha3 hashed\n\n   this stores the account and flush keys in memory so\n   in order to also store derived accounts like initial wallet\n   and chat accounts, you need to load the account again with\n   `multiaccount-load-account` before using `multiaccount-store-derived`\n   and the id of the account stored will have changed\"\n  [account-id key-uid hashed-password callback]\n  (log/debug \"[native-module] multiaccount-store-account\")\n  (when (status)\n    (init-keystore\n     key-uid\n     #(.multiAccountStoreAccount ^js (status)\n                                 (types/clj->json {:accountID account-id\n                                                   :password  hashed-password})\n                                 callback))))\n\n(defn multiaccount-store-derived\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [account-id key-uid paths hashed-password callback]\n  (log/debug \"[native-module] multiaccount-store-derived\"\n             \"account-id\"\n             account-id)\n  (init-keystore\n   key-uid\n   #(.multiAccountStoreDerived ^js (status)\n                               (types/clj->json {:accountID account-id\n                                                 :paths     paths\n                                                 :password  hashed-password})\n                               callback)))\n\n(defn multiaccount-generate-and-derive-addresses\n  \"used to generate multiple multiaccounts for onboarding\n   NOTE: nothing is saved so you will need to use\n   `multiaccount-store-account` on the selected multiaccount\n   to store the key\"\n  [n mnemonic-length paths callback]\n  (log/debug \"[native-module]  multiaccount-generate-and-derive-addresses\")\n  (.multiAccountGenerateAndDeriveAddresses ^js (status)\n                                           (types/clj->json {:n                    n\n                                                             :mnemonicPhraseLength mnemonic-length\n                                                             :bip39Passphrase      \"\"\n                                                             :paths                paths})\n                                           callback))\n\n(defn multiaccount-import-mnemonic\n  [mnemonic password callback]\n  (log/debug \"[native-module] multiaccount-import-mnemonic\")\n  (.multiAccountImportMnemonic ^js (status)\n                               (types/clj->json {:mnemonicPhrase  mnemonic\n                                                 ;;NOTE this is not the multiaccount password\n                                                 :Bip39Passphrase password})\n                               callback))\n\n(defn multiaccount-import-private-key\n  [private-key callback]\n  (log/debug \"[native-module] multiaccount-import-private-key\")\n  (.multiAccountImportPrivateKey ^js (status)\n                                 (types/clj->json {:privateKey private-key})\n                                 callback))\n\n(defn verify\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [address hashed-password callback]\n  (log/debug \"[native-module] verify\")\n  (.verify ^js (status) address hashed-password callback))\n\n(defn verify-database-password\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [key-uid hashed-password callback]\n  (log/debug \"[native-module] verify-database-password\")\n  (.verifyDatabasePassword ^js (status) key-uid hashed-password callback))\n\n(defn login-with-keycard\n  [{:keys [key-uid multiaccount-data password chat-key]}]\n  (log/debug \"[native-module] login-with-keycard\")\n  (clear-web-data)\n  (init-keystore\n   key-uid\n   #(.loginWithKeycard ^js (status) multiaccount-data password chat-key)))\n\n(defn set-soft-input-mode\n  [mode]\n  (log/debug \"[native-module]  set-soft-input-mode\")\n  (.setSoftInputMode ^js (status) mode))\n\n(defn call-rpc\n  [payload callback]\n  (log/debug \"[native-module] call-rpc\")\n  (.callRPC ^js (status) payload callback))\n\n(defn call-private-rpc\n  [payload callback]\n  (.callPrivateRPC ^js (status) payload callback))\n\n(defn hash-transaction\n  \"used for keycard\"\n  [rpcParams callback]\n  (log/debug \"[native-module] hash-transaction\")\n  (.hashTransaction ^js (status) rpcParams callback))\n\n(defn hash-message\n  \"used for keycard\"\n  [message callback]\n  (log/debug \"[native-module] hash-message\")\n  (.hashMessage ^js (status) message callback))\n\n(defn local-pairing-preflight-outbound-check\n  \"Checks whether the device has allows connecting to the local server\"\n  [callback]\n  (log/info \"[native-module] Performing local pairing preflight check\")\n  (when platform/ios?\n    (.localPairingPreflightOutboundCheck ^js (status) callback)))\n\n(defn get-connection-string-for-bootstrapping-another-device\n  \"Generates connection string form status-go for the purpose of local pairing on the sender end\"\n  [config-json callback]\n  (log/info \"[native-module] Fetching Connection String\"\n            {:fn          :get-connection-string-for-bootstrapping-another-device\n             :config-json config-json})\n  (.getConnectionStringForBootstrappingAnotherDevice ^js (status) config-json callback))\n\n(defn input-connection-string-for-bootstrapping\n  \"Provides connection string to status-go for the purpose of local pairing on the receiver end\"\n  [connection-string config-json callback]\n  (log/info \"[native-module] Sending Connection String\"\n            {:fn                :input-connection-string-for-bootstrapping\n             :config-json       config-json\n             :connection-string connection-string})\n  (.inputConnectionStringForBootstrapping ^js (status) connection-string config-json callback))\n\n(defn deserialize-and-compress-key\n  \"Provides a community id (public key) to status-go which is first deserialized\n  and then compressed. Example input/output :\n  input key  = zQ3shTAten2v9CwyQD1Kc7VXAqNPDcHZAMsfbLHCZEx6nFqk9 and\n  output key = 0x025596a7ff87da36860a84b0908191ce60a504afc94aac93c1abd774f182967ce6\"\n  [key callback]\n  (log/info \"[native-module] Deserializing and then compressing public key\"\n            {:fn  :deserialize-and-compress-key\n             :key key})\n  (.deserializeAndCompressKey ^js (status) key callback))\n\n(defn compressed-key->public-key\n  \"Provides compressed key to status-go and gets back the uncompressed public key via deserialization\"\n  [public-key deserialization-key callback]\n  (log/info \"[native-module] Deserializing compressed key\"\n            {:fn         :compressed-key->public-key\n             :public-key public-key})\n  (.multiformatDeserializePublicKey ^js (status) public-key deserialization-key callback))\n\n(defn hash-typed-data\n  \"used for keycard\"\n  [data callback]\n  (log/debug \"[native-module] hash-typed-data\")\n  (.hashTypedData ^js (status) data callback))\n\n(defn hash-typed-data-v4\n  \"used for keycard\"\n  [data callback]\n  (log/debug \"[native-module] hash-typed-data-v4\")\n  (.hashTypedDataV4 ^js (status) data callback))\n\n(defn send-transaction-with-signature\n  \"used for keycard\"\n  [rpcParams sig callback]\n  (log/debug \"[native-module] send-transaction-with-signature\")\n  (.sendTransactionWithSignature ^js (status) rpcParams sig callback))\n\n(defn sign-message\n  \"NOTE: beware, the password in rpcParams has to be sha3 hashed\"\n  [rpcParams callback]\n  (log/debug \"[native-module] sign-message\")\n  (.signMessage ^js (status) rpcParams callback))\n\n(defn recover-message\n  [rpcParams callback]\n  (log/debug \"[native-module] recover\")\n  (.recover ^js (status) rpcParams callback))\n\n(defn send-transaction\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [rpcParams hashed-password callback]\n  (log/debug \"[native-module] send-transaction\")\n  (.sendTransaction ^js (status) rpcParams hashed-password callback))\n\n(defn sign-typed-data\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [data account hashed-password callback]\n  (log/debug \"[native-module] sign-typed-data\")\n  (.signTypedData ^js (status) data account hashed-password callback))\n\n(defn sign-typed-data-v4\n  \"NOTE: beware, the password has to be sha3 hashed\"\n  [data account hashed-password callback]\n  (log/debug \"[native-module] sign-typed-data-v4\")\n  (.signTypedDataV4 ^js (status) data account hashed-password callback))\n\n(defn send-logs\n  [dbJson js-logs callback]\n  (log/debug \"[native-module] send-logs\")\n  (.sendLogs ^js (status) dbJson js-logs callback))\n\n(defn close-application\n  []\n  (log/debug \"[native-module] close-application\")\n  (.closeApplication ^js (status)))\n\n(defn connection-change\n  [type expensive?]\n  (log/debug \"[native-module] connection-change\")\n  (.connectionChange ^js (status) type (boolean expensive?)))\n\n(defn app-state-change\n  [state]\n  (log/debug \"[native-module] app-state-change\")\n  (.appStateChange ^js (status) state))\n\n(defn start-local-notifications\n  []\n  (log/debug \"[native-module] start-local-notifications\")\n  (.startLocalNotifications ^js (status)))\n\n(defn set-blank-preview-flag\n  [flag]\n  (log/debug \"[native-module] set-blank-preview-flag\")\n  (.setBlankPreviewFlag ^js (status) flag))\n\n(defn get-device-model-info\n  []\n  (log/debug \"[native-module] get-device-model-info\")\n  ;;NOTE: we have to check for status module because of tests\n  (when-let [^js status (status)]\n    {:model     (.-model status)\n     :brand     (.-brand status)\n     :build-id  (.-buildId status)\n     :device-id (.-deviceId status)}))\n\n(defn get-node-config\n  [callback]\n  (log/debug \"[native-module] get-node-config\")\n  (.getNodeConfig ^js (status) callback))\n\n(defn toggle-webview-debug\n  [on]\n  (log/debug \"[native-module] toggle-webview-debug\" on)\n  (.toggleWebviewDebug ^js (status) on))\n\n(defn rooted-device?\n  [callback]\n  (log/debug \"[native-module] rooted-device?\")\n  (cond\n    ;; we assume that iOS is safe by default\n    platform/ios?\n    (callback false)\n\n    ;; we check root on android\n    platform/android?\n    (if (status)\n      (.isDeviceRooted ^js (status) callback)\n      ;; if module isn't initialized we return true to avoid degrading security\n      (callback true))\n\n    ;; in unknown scenarios we also consider the device rooted to avoid degrading security\n    :else (callback true)))\n\n(defn generate-gfycat\n  \"Generate a 3 words random name based on the user public-key, synchronously\"\n  [public-key]\n  (log/debug \"[native-module] generate-gfycat\")\n  (when (validators/valid-public-key? public-key)\n    (.generateAlias ^js (status) public-key)))\n\n(defn identicon\n  \"Generate a icon based on a string, synchronously\"\n  [seed]\n  (log/debug \"[native-module] identicon\")\n  (.identicon ^js (status) seed))\n\n(defn encode-transfer\n  [to-norm amount-hex]\n  (log/debug \"[native-module] encode-transfer\")\n  (.encodeTransfer ^js (status) to-norm amount-hex))\n\n(defn decode-parameters\n  [bytes-string types]\n  (log/debug \"[native-module] decode-parameters\")\n  (let [json-str (.decodeParameters ^js (status)\n                                    (types/clj->json {:bytesString bytes-string :types types}))]\n    (types/json->clj json-str)))\n\n(defn hex-to-number\n  [hex]\n  (log/debug \"[native-module] hex-to-number\")\n  (let [json-str (.hexToNumber ^js (status) hex)]\n    (types/json->clj json-str)))\n\n(defn number-to-hex\n  [num]\n  (log/debug \"[native-module] number-to-hex\")\n  (.numberToHex ^js (status) (str num)))\n\n(defn sha3\n  [str]\n  (log/debug \"[native-module] sha3\")\n  (.sha3 ^js (status) str))\n\n(defn utf8-to-hex\n  [str]\n  (log/debug \"[native-module] utf8-to-hex\")\n  (.utf8ToHex ^js (status) str))\n\n(defn hex-to-utf8\n  [str]\n  (log/debug \"[native-module] hex-to-utf8\")\n  (.hexToUtf8 ^js (status) str))\n\n(defn check-address-checksum\n  [address]\n  (log/debug \"[native-module] check-address-checksum\")\n  (let [result (.checkAddressChecksum ^js (status) address)]\n    (types/json->clj result)))\n\n(defn address?\n  [address]\n  (log/debug \"[native-module] address?\")\n  (let [result (.isAddress ^js (status) address)]\n    (types/json->clj result)))\n\n(defn to-checksum-address\n  [address]\n  (log/debug \"[native-module] to-checksum-address\")\n  (.toChecksumAddress ^js (status) address))\n\n(defn gfycat-identicon-async\n  \"Generate an icon based on a string and 3 words random name asynchronously\"\n  [seed callback]\n  (log/debug \"[native-module] gfycat-identicon-async\")\n  (.generateAliasAndIdenticonAsync ^js (status) seed callback))\n\n(defn validate-mnemonic\n  \"Validate that a mnemonic conforms to BIP39 dictionary/checksum standards\"\n  [mnemonic callback]\n  (log/debug \"[native-module] validate-mnemonic\")\n  (.validateMnemonic ^js (status) mnemonic callback))\n\n(defn delete-multiaccount\n  \"Delete multiaccount from database, deletes multiaccount's database and\n  key files.\"\n  [key-uid callback]\n  (log/debug \"[native-module] delete-multiaccount\")\n  (.deleteMultiaccount ^js (status) key-uid callback))\n\n(defn delete-imported-key\n  \"Delete imported key file.\"\n  [key-uid address hashed-password callback]\n  (log/debug \"[native-module] delete-imported-key\")\n  (.deleteImportedKey ^js (status) key-uid address hashed-password callback))\n\n(defn reset-keyboard-input\n  [input selection]\n  (log/debug \"[native-module] resetKeyboardInput\")\n  (when platform/android?\n    (.resetKeyboardInputCursor ^js (status) input selection)))\n\n;; passwords are hashed\n(defn reset-password\n  [key-uid current-password# new-password# callback]\n  (log/debug \"[native-module] change-database-password\")\n  (init-keystore\n   key-uid\n   #(.reEncryptDbAndKeystore ^js (status) key-uid current-password# new-password# callback)))\n\n(defn convert-to-keycard-account\n  [{:keys [key-uid] :as multiaccount-data} settings current-password# new-password callback]\n  (log/debug \"[native-module] convert-to-keycard-account\")\n  (.convertToKeycardAccount ^js (status)\n                            key-uid\n                            (types/clj->json multiaccount-data)\n                            (types/clj->json settings)\n                            \"\"\n                            current-password#\n                            new-password\n                            callback))\n\n(defn backup-disabled-data-dir\n  []\n  (.backupDisabledDataDir ^js (status)))\n\n(defn keystore-dir\n  []\n  (.keystoreDir ^js (status)))\n\n(defn log-file-directory\n  []\n  (.logFileDirectory ^js (status)))\n\n(defn init-status-go-logging\n  [{:keys [enable? mobile-system? log-level callback]}]\n  (.initLogging ^js (status) enable? mobile-system? log-level callback))\n"]}