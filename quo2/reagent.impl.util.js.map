{"version":3,"sources":["reagent/impl/util.cljs"],"mappings":"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","names":["reagent.impl.util/is-client","js/window","reagent.impl.util/*non-reactive*","reagent.impl.util/memoize-1","f","mem","cljs.core/atom","arg","v","cljs.core/deref","cljs.core/get","ret","cljs.core/swap!","cljs.core/assoc","reagent.impl.util/dont-camel-case","reagent.impl.util/capitalize","s","cljs.core/count","clojure.string/upper-case","cljs.core/subs","reagent.impl.util/dash-to-prop-name","dashed","vec__9143","seq__9144","cljs.core/seq","first__9145","cljs.core/first","cljs.core/next","name-str","cljs.core/name","start","parts","clojure.string/split","cljs.core/apply","cljs.core/str","cljs.core/map","reagent.impl.util/dash-to-method-name","vec__9151","seq__9152","first__9153","clojure.string/replace","reagent.impl.util/fun-name","n","or__4126__auto__","cljs.core/fn?","cljs.core/PROTOCOL_SENTINEL","m","cljs.core/meta","cljs.core/map?","self__","args9193","cljs.core/aclone","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","reagent.impl.util/PartialFn","reagent.impl.util/->PartialFn","pfn","args","_","a","b","c","d","e","g","h","i","j","k","l","o","p","q","r","t","rest","other","cljs.core/=","cljs.core/hash","reagent.impl.util/make-partial-fn","cljs.core/partial","reagent.impl.util/named?","x","cljs.core/Keyword","cljs.core/Symbol","var_args","G__9295","reagent.impl.util/class-names","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq9288","G__9289","G__9290","self__4723__auto__","class","cljs.core/coll?","classes","cljs.core/keep","clojure.string/join","rst","cljs.core/reduce","reagent.impl.util/merge-class","p1","p2","cljs.core/contains?","reagent.impl.util/merge-style","style","temp__5735__auto__","s1","s2","cljs.core/merge","G__9312","reagent.impl.util/merge-props","seq9308","G__9309","G__9310","temp__5733__auto__","js/Error","cljs.core/pr-str","ps","reagent.impl.util/*always-update*","reagent.impl.util/force-update","comp","deep","*always-update*-orig-val__9319","*always-update*-temp-val__9320","reagent.impl.util/shallow-obj-to-map","ks","cljs.core/js-keys","len","cljs.core/keyword","goog.object/get","reagent.impl.util/js-val?","goog/typeOf","reagent.impl.util/try-get-react-key","e9335","reagent.impl.util/get-react-key","reagent.impl.util/react-key-from-vec","G__9340","cljs.core/nth","G__9341","reagent.impl.util/str-coll","coll","clojure.walk/prewalk","G__9344","cljs.core/symbol","args__4742__auto__","argseq__4743__auto__","reagent.impl.util/hiccup-err","seq9349","G__9350","G__9351","comp-name","msg"],"sourcesContent":["(ns reagent.impl.util\n  (:require [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [goog.object :as gobj]\n            [reagent.debug :refer-macros [dev?]]))\n\n(def is-client (and (exists? js/window)\n                    (-> (.-document js/window) nil? not)))\n\n(def ^:dynamic ^boolean *non-reactive* false)\n\n;;; Props accessors\n\n;; Misc utilities\n\n(defn memoize-1 [f]\n  (let [mem (atom {})]\n    (fn [arg]\n      (let [v (get @mem arg)]\n        (if-not (nil? v)\n          v\n          (let [ret (f arg)]\n            (swap! mem assoc arg ret)\n            ret))))))\n\n(def dont-camel-case #{\"aria\" \"data\"})\n\n(defn capitalize [s]\n  (if (< (count s) 2)\n    (string/upper-case s)\n    (str (string/upper-case (subs s 0 1)) (subs s 1))))\n\n(defn dash-to-prop-name [dashed]\n  (if (string? dashed)\n    dashed\n    (let [name-str (name dashed)\n          [start & parts] (string/split name-str #\"-\")]\n      (if (dont-camel-case start)\n        name-str\n        (apply str start (map capitalize parts))))))\n\n(defn dash-to-method-name [dashed]\n  (if (string? dashed)\n    dashed\n    (let [name-str (name dashed)\n          name-str (string/replace name-str #\"(unsafe|UNSAFE)[-_]\" \"UNSAFE_\")\n          [start & parts] (string/split name-str #\"-\")]\n      (apply str start (map capitalize parts)))))\n\n(defn fun-name [f]\n  (let [n (or (and (fn? f)\n                   (or (.-displayName f)\n                       (let [n (.-name f)]\n                         (if (and (string? n) (seq n))\n                           n))))\n              (and (implements? INamed f)\n                   (name f))\n              (let [m (meta f)]\n                (if (map? m)\n                  (:name m))))]\n    (if n\n      (string/replace (str n) \"$\" \".\"))))\n\n(deftype PartialFn [pfn f args]\n  Fn\n  IFn\n  (-invoke [_]\n    (pfn))\n  (-invoke [_ a]\n    (pfn a))\n  (-invoke [_ a b]\n    (pfn a b))\n  (-invoke [_ a b c]\n    (pfn a b c))\n  (-invoke [_ a b c d]\n    (pfn a b c d))\n  (-invoke [_ a b c d e]\n    (pfn a b c d e))\n  (-invoke [_ a b c d e f]\n    (pfn a b c d e f))\n  (-invoke [_ a b c d e f g]\n    (pfn a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    (pfn a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    (pfn a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    (pfn a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    (pfn a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    (pfn a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    (pfn a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    (pfn a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    (pfn a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    (pfn a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    (pfn a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    (pfn a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    (pfn a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    (pfn a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply pfn a b c d e f g h i j k l m n o p q r s t rest))\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? PartialFn other)\n         (= f (.-f other))\n         (= args (.-args other))))\n  IHash\n  (-hash [_] (hash [f args])))\n\n(defn make-partial-fn [f args]\n  (->PartialFn (apply partial f args) f args))\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn class-names\n  ([])\n  ([class]\n   (if (coll? class)\n     (let [classes (keep (fn [c]\n                           (if c\n                             (if (named? c)\n                               (name c)\n                               c)))\n                         class)]\n       (if (seq classes)\n         (string/join \" \" classes)))\n     (if (named? class)\n       (name class)\n       class)))\n  ([a b]\n   (if a\n     (if b\n       (str (class-names a) \" \" (class-names b))\n       (class-names a))\n     (class-names b)))\n  ([a b & rst]\n   (reduce class-names\n           (class-names a b)\n           rst)))\n\n(defn- merge-class [p1 p2]\n  (if (or (contains? p1 :class) (contains? p2 :class))\n    (assoc p2 :class (class-names (:class p1) (:class p2)))\n    p2))\n\n(defn- merge-style [p1 p2]\n  (let [style (when-let [s1 (:style p1)]\n                (when-let [s2 (:style p2)]\n                  (merge s1 s2)))]\n    (if (nil? style)\n      p2\n      (assoc p2 :style style))))\n\n(defn merge-props\n  ([] nil)\n  ;; Normalize :class even if there are no merging\n  ([p]\n   (if-let [c (:class p)]\n     (assoc p :class (class-names c))\n     p))\n  ([p1 p2]\n   (if (nil? p1)\n     (if-let [c (:class p2)]\n       (assoc p2 :class (class-names c))\n       p2)\n     (do\n       (assert (map? p1)\n               (str \"Property must be a map, not \" (pr-str p1)))\n       (merge p1 (merge-style p1 (merge-class p1 p2))))))\n  ([p1 p2 & ps]\n   (reduce merge-props (merge-props p1 p2) ps)))\n\n;; TODO: Doesn't look like correct place for this\n(def ^:dynamic *always-update* false)\n\n(defn force-update [^js/React.Component comp deep]\n  (if deep\n    (binding [*always-update* true]\n      (.forceUpdate comp))\n    (.forceUpdate comp)))\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {}\n           i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (gobj/get o k))\n                 (inc i)))\n        m))))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n;; React key\n\n(defn try-get-react-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-react-key [x]\n  (when (map? x)\n    (try-get-react-key x)))\n\n;; NOTE: :r>/raw-element doesn't call this\n;; NOTE: :>/native-element doesn't call this\n;; But for both cases expand-seq-dev will use this for the dev time no-key\n;; warning.\n\n(defn react-key-from-vec [v]\n  ;; Meta is a map always and is safe to read\n  (let [k (:key (meta v))]\n    (if (some? k)\n      k\n      (case (nth v 0 nil)\n        ;; Handle special cases where properties map isn't the second children of the vector.\n        ;; Third item is Clj props map.\n        (:> :f>) (get-react-key (nth v 2 nil))\n        ;; Third item is the JS props object\n        :r> (some-> (nth v 2 nil) (.-key))\n        ;; Regular html element or such, second item is Clj props map.\n        ;; TODO: This is also called for component use, though the key won't be used?\n        (get-react-key (nth v 1 nil))))))\n\n;; Error messages\n\n(defn- str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (fun-name x)]\n                        (case n\n                          (\"\" nil) x\n                          (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v comp-name & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" comp-name))\n"]}