{"version":3,"sources":["quo2/components/counter/counter.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA,AACiBC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAA;AAEtB,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAACC,AAAOV,AAAQ,AAACW,AAAiBF;;AAEpC,AAAA,AAAAG,AAAMM,AAGHO;AAHH,AAAA,AAAAZ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AACgBO;AADhB,AAAAH,AAAAJ,AAAA,AACoCQ;AADpC,AAAAJ,AAAAJ,AAAA,AACsDS;AADtD,AAAAL,AAAAJ,AAAA,AAC4DU;AAD5D,AAAAN,AAAAJ,AAAA,AAAA,AACgFW;AADhF,AAIE,AAAML,AAAW,AAAAO,AAAIP;AAAJ,AAAA,AAAAO;AAAAA;;AAAA;;;AACXC,AAAW,AAAAD,AAAIN;AAAJ,AAAA,AAAAM;AAAAA;;AACI,AAAI,AACC,AAAA,AAACE,AAAE,AAACjB,AACJ,AAAA,AAACiB,AAAET;AACNU;;AACAC;;;;AACjBL,AAAW,AAACM,AAAuBN;AACnCO,AAAW,AAAI,AAAGP,AAAMD,AACX,AAAA,AAAKA,AACL,AAAKC;AAClBQ,AAAW,AAAAC,AAAM,AAAOF;AAAb,AAAA,AAAAE;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;;;;AAXjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAeGC,AAGsBZ,AACA,AAAAa,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAIkBJ,AAElBX;AANTc,AAAA,AAAAA,AAOE,AAAA,AAACR,AAAET,AACH,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAACC,AACqB,AAAC7B,AAAUW;AATnCiB,AAAA,AAWE,AAAA,AAACE,AAAKnB,AACN,AAAAiB,AAAA,AAACG,AACM,AAAAb,AAAIL;AAAJ,AAAA,AAAAK;AAAAA;;AACI,AAAClB,AAAUW;;AAdxBiB;AAAA,AAAA,AAgBE,AAAGX,AAAMD;AACT,AAAAY,AAAA,AAAA,AAACG;;AAjBHH;;AAnBzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAqCII,AAGiBb,AAAaK","names":["quo2.components.counter.counter/themes","quo2.foundations.colors/primary-50","quo2.foundations.colors/neutral-80-opa-5","quo2.foundations.colors/neutral-10","quo2.foundations.colors/neutral-20","quo2.foundations.colors/primary-60","quo2.foundations.colors/white-opa-5","quo2.foundations.colors/neutral-70","quo2.components.counter.counter/get-color","key","cljs.core/get-in","quo2.theme/get-theme","p__16636","map__16637","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.counter.counter/counter","type","override-text-color","override-bg-color","style","accessibility-label","max-value","value","or__4126__auto__","text-color","cljs.core/=","quo2.foundations.colors/white","quo2.foundations.colors/neutral-100","utils.number/parse-int","label","width","G__16644","react-native.core/view","G__16646","cljs.core/merge","cljs.core/not=","cljs.core/assoc","quo2.components.markdown.text/text"],"sourcesContent":["(ns quo2.components.counter.counter\n  (:require\n    [quo2.components.markdown.text :as text]\n    [quo2.foundations.colors :as colors]\n    [quo2.theme :as theme]\n    [react-native.core :as rn]\n    [utils.number]))\n\n(def themes\n  {:light {:default   colors/primary-50\n           :secondary colors/neutral-80-opa-5\n           :grey      colors/neutral-10\n           :outline   colors/neutral-20}\n   :dark  {:default   colors/primary-60\n           :secondary colors/white-opa-5\n           :grey      colors/neutral-70\n           :outline   colors/neutral-70}})\n\n(defn get-color\n  [key]\n  (get-in themes [(theme/get-theme) key]))\n\n(defn counter\n  [{:keys [type override-text-color override-bg-color style accessibility-label max-value]\n    :or   {max-value 99}}\n   value]\n  (let [type       (or type :default)\n        text-color (or override-text-color\n                       (if (or\n                            (= (theme/get-theme) :dark)\n                            (= type :default))\n                         colors/white\n                         colors/neutral-100))\n        value      (utils.number/parse-int value)\n        label      (if (> value max-value)\n                     (str max-value \"+\")\n                     (str value))\n        width      (case (count label)\n                     1 16\n                     2 20\n                     28)]\n    [rn/view\n     {:test-ID             :counter-component\n      :accessible          true\n      :accessibility-label accessibility-label\n      :style               (cond-> (merge\n                                    {:align-items     :center\n                                     :justify-content :center\n                                     :border-radius   6\n                                     :width           width\n                                     :height          16}\n                                    style)\n                             (= type :outline)\n                             (merge {:border-width 1\n                                     :border-color (get-color type)})\n\n                             (not= type :outline)\n                             (assoc :background-color\n                                    (or override-bg-color\n                                        (get-color type)))\n\n                             (> value max-value)\n                             (assoc :padding-left 0.5))}\n     [text/text\n      {:weight :medium\n       :size   :label\n       :style  {:color text-color}} label]]))\n"]}