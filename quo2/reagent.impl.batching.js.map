{"version":3,"sources":["reagent/impl/batching.cljs"],"mappings":"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","names":["js/reagent","js/reagent.impl","js/reagent.impl.batching","js/reagent.impl.batching.mount-count","reagent.impl.batching/mount-count","reagent.impl.batching/next-mount-count","reagent.impl.batching/fake-raf","f","js/setTimeout","reagent.impl.batching/next-tick","reagent.impl.util/is-client","w","js/window","or__4126__auto__","reagent.impl.batching/compare-mount-order","c1","c2","reagent.impl.batching/run-queue","a","n__4613__auto__","i","c","js/reagent.impl.batching.ratom-flush","reagent.impl.batching/ratom-flush","reagent.impl.batching/run-funs","fs","reagent.impl.batching/enqueue","queue","js/Error","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","reagent.impl.batching/RenderQueue","reagent.impl.batching/->RenderQueue","scheduled?","this","temp__5739__auto__","js/reagent.impl.batching.render-queue","reagent.impl.batching/render-queue","reagent.impl.batching/flush","reagent.impl.batching/flush-after-render","reagent.impl.batching/queue-render","reagent.impl.batching/mark-rendered","reagent.impl.batching/do-before-flush","reagent.impl.batching/do-after-render","reagent.impl.batching/schedule"],"sourcesContent":["(ns reagent.impl.batching\n  (:refer-clojure :exclude [flush])\n  (:require [reagent.debug :refer-macros [assert-some]]\n            [reagent.impl.util :refer [is-client]]))\n\n;;; Update batching\n\n(defonce mount-count 0)\n\n(defn next-mount-count []\n  (set! mount-count (inc mount-count)))\n\n(defn fake-raf [f]\n  (js/setTimeout f 16))\n\n(def next-tick\n  (if-not is-client\n    fake-raf\n    (let [w js/window]\n      (.bind (or (.-requestAnimationFrame w)\n                 (.-webkitRequestAnimationFrame w)\n                 (.-mozRequestAnimationFrame w)\n                 (.-msRequestAnimationFrame w)\n                 fake-raf)\n             w))))\n\n(defn compare-mount-order\n  [^clj c1 ^clj c2]\n  (- (.-cljsMountOrder c1)\n     (.-cljsMountOrder c2)))\n\n(defn run-queue [a]\n  ;; sort components by mount order, to make sure parents\n  ;; are rendered before children\n  (.sort a compare-mount-order)\n  (dotimes [i (alength a)]\n    (let [^js/React.Component c (aget a i)]\n      (when (true? (.-cljsIsDirty c))\n        (.forceUpdate c)))))\n\n\n;; Set from ratom.cljs\n(defonce ratom-flush (fn []))\n\n(defn run-funs [fs]\n  (dotimes [i (alength fs)]\n    ((aget fs i))))\n\n(defn enqueue [^clj queue fs f]\n  (assert-some f \"Enqueued function\")\n  (.push fs f)\n  (.schedule queue))\n\n(deftype RenderQueue [^:mutable ^boolean scheduled?]\n  Object\n  (schedule [this]\n    (when-not scheduled?\n      (set! scheduled? true)\n      (next-tick #(.run-queues this))))\n\n  (queue-render [this c]\n    (when (nil? (.-componentQueue this))\n      (set! (.-componentQueue this) #js []))\n    (enqueue this (.-componentQueue this) c))\n\n  (add-before-flush [this f]\n    (when (nil? (.-beforeFlush this))\n      (set! (.-beforeFlush this) #js []))\n    (enqueue this (.-beforeFlush this) f))\n\n  (add-after-render [this f]\n    (when (nil? (.-afterRender this))\n      (set! (.-afterRender this) #js []))\n    (enqueue this (.-afterRender this) f))\n\n  (run-queues [this]\n    (set! scheduled? false)\n    (.flush-queues this))\n\n  (flush-before-flush [this]\n    (when-some [fs (.-beforeFlush this)]\n      (set! (.-beforeFlush this) nil)\n      (run-funs fs)))\n\n  (flush-render [this]\n    (when-some [fs (.-componentQueue this)]\n      (set! (.-componentQueue this) nil)\n      (run-queue fs)))\n\n  (flush-after-render [this]\n    (when-some [fs (.-afterRender this)]\n      (set! (.-afterRender this) nil)\n      (run-funs fs)))\n\n  (flush-queues [this]\n    (.flush-before-flush this)\n    (ratom-flush)\n    (.flush-render this)\n    (.flush-after-render this)))\n\n(defonce render-queue (->RenderQueue false))\n\n(defn flush []\n  (.flush-queues render-queue))\n\n(defn flush-after-render []\n  (.flush-after-render render-queue))\n\n(defn queue-render [^clj c]\n  (when-not (.-cljsIsDirty c)\n    (set! (.-cljsIsDirty c) true)\n    (.queue-render render-queue c)))\n\n(defn mark-rendered [^clj c]\n  (set! (.-cljsIsDirty c) false))\n\n(defn do-before-flush [f]\n  (.add-before-flush render-queue f))\n\n(defn do-after-render [f]\n  (.add-after-render render-queue f))\n\n(defn schedule []\n  (when (false? (.-scheduled? render-queue))\n    (.schedule render-queue)))\n"]}