{"version":3,"sources":["quo2/components/counter/step/style.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAML,AAAA,AAAMC,AACHC,AAAcC;AADjB,AAEE,AAAID;AACF,AAACE,AAAoBC,AAAwBC,AAAoBH;;AACjE,AAACC,AAAoBG,AAAkBC,AAAkBL;;;AAE7D,AAAKM,AAAwB,AAAA,AAAA,AAAA,AAACC;AAC9B,AAAKC,AAA0B,AAAA,AAAA,AAACD;AAEhC,AAAA,AAAME,AACHC,AAAKC,AAAKZ,AAAcC;AAD3B,AAEE,AAAAY,AAAQf;AAARe,AAAA,AAAAA,AACE,AAAA,AAAA,AAAA,AAAQF,AAAM,AAAAE,AAAA,AAAA,AAACC;AADjBD,AAAA,AAAAA,AAEE,AAAA,AAACE,AAAEJ,AAAQ,AAAAE,AAAA,AAAA,AAACC;AAFdD,AAAA,AAAAA,AAIE,AAAA,AAACE,AAAEH,AACH,AAAAC,AAAA,AAAA,AAAA,AAACC,AACoB,AAACf,AAAqBC,AAAcC;AAN3DY,AAAA,AAAAA,AAQE,AAAA,AAACE,AAAEH,AACH,AAAAC,AAAA,AAACC,AAAwBP;AAT3B,AAAA,AAWE,AAAA,AAACQ,AAAEH;AACH,AAAAC,AAAA,AAACC,AAAwBL;;AAZ3BI;;;AAcF,AAAA,AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFN;AADJ,AACU,AAAA,AAACM,AAAWN;;;AADtB,AAAA,AAAA,AAAMM,AAEFN,AAAKX;AAFT,AAGG,AAAAmB,AAAMR;AAANQ,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA;AACqB,AAAClB,AAAoBoB,AAA2BC,AAAatB;;;AADlF;AAEqBsB;;;;AAFrB,AAAA,AAAAJ,AAAA,AAAA,AAAAC;;;;;AAHH,AAAA,AAAA,AAAMF;;AAAN","names":["quo2.components.counter.step.style/container-base","quo2.components.counter.step.style/neutral-border-color","in-blur-view?","override-theme","quo2.foundations.colors/theme-colors","quo2.foundations.colors/neutral-80-opa-5","quo2.foundations.colors/white-opa-10","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-80","quo2.components.counter.step.style/active-background-color","quo2.foundations.colors/custom-color","quo2.components.counter.step.style/complete-background-color","quo2.components.counter.step.style/container","size","type","G__16910","cljs.core/assoc","cljs.core/=","var_args","G__16915","quo2.components.counter.step.style/text-color","js/Error","G__16916","cljs.core/Keyword","quo2.foundations.colors/neutral-100-opa-100","quo2.foundations.colors/white"],"sourcesContent":["(ns quo2.components.counter.step.style\n  (:require\n    [quo2.foundations.colors :as colors]))\n\n(def container-base\n  {:align-items     :center\n   :justify-content :center\n   :border-radius   6\n   :height          20})\n\n(defn neutral-border-color\n  [in-blur-view? override-theme]\n  (if in-blur-view?\n    (colors/theme-colors colors/neutral-80-opa-5 colors/white-opa-10 override-theme)\n    (colors/theme-colors colors/neutral-20 colors/neutral-80 override-theme)))\n\n(def active-background-color (colors/custom-color :blue 50 10))\n(def complete-background-color (colors/custom-color :blue 50))\n\n(defn container\n  [size type in-blur-view? override-theme]\n  (cond-> container-base\n    (#{1 2} size) (assoc :width 20)\n    (= size 3) (assoc :width 28)\n\n    (= type :neutral)\n    (assoc :border-width 1\n           :border-color (neutral-border-color in-blur-view? override-theme))\n\n    (= type :active)\n    (assoc :background-color active-background-color)\n\n    (= type :complete)\n    (assoc :background-color complete-background-color)))\n\n(defn text-color\n  ([type] (text-color type nil))\n  ([type override-theme]\n   (case type\n     (:neutral :active) (colors/theme-colors colors/neutral-100-opa-100 colors/white override-theme)\n     :complete          colors/white)))\n"]}