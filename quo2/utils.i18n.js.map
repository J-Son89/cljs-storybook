{"version":3,"sources":["utils/i18n.cljs"],"mappings":"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","names":["utils.i18n/setup","default-device-language","translations-by-locale","js/shadow.js.shim.module$i18n_js","utils.i18n/get-translations","utils.i18n/set-language","lang","utils.i18n/delimeters","n","js/Number","delimiter?","cljs.core/=","cljs.core/count","cljs.core/subs","utils.i18n/label-number","number","map__16931","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","delimiter","separator","clojure.string/replace","cljs.core/clj->js","utils.i18n/default-option-value","utils.i18n/label-options","options","cljs.core/into","iter__4529__auto__","s__16934","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__16936","cljs.core/chunk-buffer","i__16935","vec__16937","cljs.core/-nth","cljs.core/nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__16933","cljs.core/chunk-rest","vec__16941","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","or__4126__auto__","var_args","G__16945","utils.i18n/label-fn","js/Error","path","cljs.core/update","cljs.core/name","utils.i18n/label","cljs.core/memoize","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","utils.i18n/label-pluralize","seq16947","G__16948","cljs.core/next","G__16949","self__4723__auto__","count","utils.i18n/locale","utils.i18n/format-currency","utils.i18n-goog/format-currency","cljs.core/chunk-first"],"sourcesContent":["(ns utils.i18n\n  (:require [\"i18n-js\" :as i18n]\n            [clojure.string :as string]\n            [utils.i18n-goog :as i18n-goog]))\n\n(defn setup\n  [default-device-language translations-by-locale]\n  (set! (.-fallbacks i18n) true)\n  (set! (.-defaultSeparator i18n) \"/\")\n  (set! (.-locale i18n) default-device-language)\n  (set! (.-translations i18n) translations-by-locale))\n\n(defn get-translations\n  []\n  (.-translations i18n))\n\n(defn set-language\n  [lang]\n  (set! (.-locale i18n) lang))\n\n;;:zh, :zh-hans-xx, :zh-hant-xx have been added until this bug will be fixed\n;;https://github.com/fnando/i18n-js/issues/460\n\n(def delimeters\n  \"This function is a hack: mobile Safari doesn't support toLocaleString(), so we need to pass\n  this map to WKWebView to make number formatting work.\"\n  (let [n          (.toLocaleString ^js (js/Number 1000.1))\n        delimiter? (= (count n) 7)]\n    (if delimiter?\n      {:delimiter (subs n 1 2)\n       :separator (subs n 5 6)}\n      {:delimiter \"\"\n       :separator (subs n 4 5)})))\n\n(defn label-number\n  [number]\n  (when number\n    (let [{:keys [delimiter separator]} delimeters]\n      (.toNumber i18n\n                 (string/replace number #\",\" \".\")\n                 (clj->js {:precision                 10\n                           :strip_insignificant_zeros true\n                           :delimiter                 delimiter\n                           :separator                 separator})))))\n\n(def default-option-value \"<no value>\")\n\n(defn label-options\n  [options]\n  ;; i18n ignores nil value, leading to misleading messages\n  (into {} (for [[k v] options] [k (or v default-option-value)])))\n\n(defn label-fn\n  ([path] (label-fn path {}))\n  ([path options]\n   (if (exists? (.t i18n))\n     (let [options (update options :amount label-number)]\n       (.t i18n (name path) (clj->js (label-options options))))\n     (name path))))\n\n(def label (memoize label-fn))\n\n(defn label-pluralize\n  [count path & options]\n  (if (exists? (.t i18n))\n    (.p i18n count (name path) (clj->js options))\n    (name path)))\n\n(def locale\n  (.-locale i18n))\n\n(def format-currency i18n-goog/format-currency)\n"]}