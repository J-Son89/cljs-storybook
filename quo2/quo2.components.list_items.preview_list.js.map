{"version":3,"sources":["quo2/components/list_items/preview_list.cljs"],"mappings":"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","names":["quo2.components.list-items.preview-list/params","quo2.components.list-items.preview-list/avatar","item","type","size","border-radius","G__17150","cljs.core/Keyword","js/Error","quo2.components.avatars.user-avatar.view/user-avatar","cljs.core/merge","G__17152","react-native.fast-image/fast-image","quo2.components.list-items.preview-list/list-item","index","list-size","margin-left","hole-size","hole-radius","hole-x","hole-y","last-item?","cljs.core/=","react-native.hole-view/hole-view","quo2.components.list-items.preview-list/get-overflow-color","transparent?","transparent-color","light-color","dark-color","override-theme","quo2.foundations.colors/theme-colors","quo2.components.list-items.preview-list/overflow-label","label","more-than-99-label","react-native.core/view","quo2.foundations.colors/white-opa-10","quo2.foundations.colors/neutral-20","quo2.foundations.colors/neutral-70","quo2.components.icon/icon","quo2.foundations.colors/white-opa-70","quo2.foundations.colors/neutral-50","quo2.foundations.colors/neutral-40","quo2.components.markdown.text/text","quo2.foundations.colors/neutral-60","quo2.components.list-items.preview-list/border-type","G__17181","p__17182","map__17183","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.list-items.preview-list/preview-list","items","items-arr","cljs.core/into","or__4126__auto__","cljs.core/count","cljs.core/get-in","iter__4529__auto__","s__17186","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__17188","cljs.core/chunk-buffer","i__17187","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__17185","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/range","cljs.core/chunk-first"],"sourcesContent":["(ns quo2.components.list-items.preview-list\n  (:require [quo2.components.avatars.user-avatar.view :as user-avatar]\n            [quo2.components.icon :as quo2.icons]\n            [quo2.components.markdown.text :as quo2.text]\n            [quo2.foundations.colors :as colors]\n            [react-native.core :as rn]\n            [react-native.fast-image :as fast-image]\n            [react-native.hole-view :as hole-view]))\n\n(def params\n  {32 {:border-radius {:circular 16 :rounded 10}\n       :hole-radius   {:circular 18 :rounded 12}\n       :margin-left   -8\n       :hole-size     36\n       :hole-x        22\n       :hole-y        -2}\n   24 {:border-radius {:circular 12 :rounded 8}\n       :hole-radius   {:circular 13 :rounded 9}\n       :margin-left   -4\n       :hole-size     26\n       :hole-x        19\n       :hole-y        -1}\n   16 {:border-radius {:circular 8 :rounded 8}\n       :hole-radius   {:circular 9 :rounded 9}\n       :margin-left   -4\n       :hole-size     18\n       :hole-x        11\n       :hole-y        -1}})\n\n;; TODO - Add avatar components for other types once implemented\n(defn avatar\n  [item type size border-radius]\n  (case type\n    :user                 [user-avatar/user-avatar\n                           (merge {:ring?             false\n                                   :status-indicator? false\n                                   :size              (case size\n                                                        32 :small\n                                                        24 :xs\n                                                        16 :xxxs)}\n                                  item)]\n    (:photo :collectible) [fast-image/fast-image\n                           {:source (:source item)\n                            :style  {:width         size\n                                     :height        size\n                                     :border-radius border-radius}}]))\n\n(defn list-item\n  [index type size item list-size margin-left\n   hole-size hole-radius hole-x hole-y border-radius]\n  (let [last-item? (= index (- list-size 1))]\n    [hole-view/hole-view\n     {:style {:margin-left (if (= index 0) 0 margin-left)}\n      :holes (if last-item?\n               []\n               [{:x            hole-x\n                 :y            hole-y\n                 :width        hole-size\n                 :height       hole-size\n                 :borderRadius hole-radius}])}\n     [avatar item type size border-radius]]))\n\n(defn get-overflow-color\n  [transparent? transparent-color light-color dark-color override-theme]\n  (if transparent?\n    transparent-color\n    (colors/theme-colors light-color dark-color override-theme)))\n\n(defn overflow-label\n  [label size transparent? border-radius margin-left override-theme more-than-99-label]\n  [rn/view\n   {:style {:width            size\n            :height           size\n            :margin-left      margin-left\n            :border-radius    border-radius\n            :justify-content  :center\n            :align-items      :center\n            :background-color (get-overflow-color\n                               transparent?\n                               colors/white-opa-10\n                               colors/neutral-20\n                               colors/neutral-70\n                               override-theme)}}\n   (if (= size 16)\n     [quo2.icons/icon :i/more\n      {:size  12\n       :color (get-overflow-color\n               transparent?\n               colors/white-opa-70\n               colors/neutral-50\n               colors/neutral-40\n               override-theme)}]\n     [quo2.text/text\n      {:size   (if (= size 32) :paragraph-2 :label)\n       :weight :medium\n       :style  {:color       (get-overflow-color\n                              transparent?\n                              colors/white-opa-70\n                              colors/neutral-60\n                              colors/neutral-40\n                              override-theme)\n                :margin-left -2}}\n      ;; If overflow label is below 100, show label as +label (ex. +30), else just show 99+\n      (if (< label 100)\n        (str \"+\" label)\n        more-than-99-label)])])\n\n(defn border-type\n  [type]\n  (case type\n    (:account :collectible :photo) :rounded\n    :circular))\n\n(defn preview-list\n  \"[preview-list opts items]\n   opts\n   {:type          :user/:community/:account/:token/:collectible/:dapp\n    :size          32/24/16\n    :list-size     override items count in overflow label (optional)\n    :transparent?  overflow-label transparent?}\n   items           preview list items (only 4 items is required for preview)\n  \"\n  [{:keys [type size list-size transparent? override-theme more-than-99-label]} items]\n  (let [items-arr     (into [] items)\n        list-size     (or list-size (count items))\n        margin-left   (get-in params [size :margin-left])\n        hole-size     (get-in params [size :hole-size])\n        border-radius (get-in params [size :border-radius (border-type type)])\n        hole-radius   (get-in params [size :hole-radius (border-type type)])\n        hole-x        (get-in params [size :hole-x])\n        hole-y        (get-in params [size :hole-y])]\n    [rn/view {:style {:flex-direction :row}}\n     (for [index (range (if (> list-size 4) 3 list-size))]\n       ^{:key (str index list-size)}\n       [list-item index type size (get items-arr index) list-size\n        margin-left hole-size hole-radius hole-x hole-y border-radius])\n     (when (> list-size 4)\n       [overflow-label (- list-size 3) size transparent? border-radius margin-left override-theme\n        more-than-99-label])]))\n"]}