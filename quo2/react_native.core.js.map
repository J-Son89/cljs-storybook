{"version":3,"sources":["react_native/core.cljs"],"mappings":"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","names":["react-native.core/app-state","js/shadow.js.shim.module$react_native","react-native.core/animated-view","reagent.core/adapt-react-class","js/shadow.js.shim.module$react_native.Animated.View","react-native.core/view","react-native.core/scroll-view","react-native.core/image","react-native.core/image-get-size","uri","callback","react-native.core/text","react-native.core/text-input","react-native.core/touchable-opacity","react-native.core/touchable-highlight","react-native.core/touchable-without-feedback","react-native.core/flat-list","react-native.flat-list/flat-list","react-native.core/section-list","react-native.section-list/section-list","react-native.core/activity-indicator","react-native.core/modal","react-native.core/keyboard","react-native.core/dismiss-keyboard!","react-native.core/device-event-emitter","react-native.core/hide-splash-screen","react-native.core/alert","title","message","buttons","options","cljs.core/clj->js","react-native.core/appearance","react-native.core/get-color-scheme","react-native.core/appearance-add-change-listener","handler","react-native.core/get-window","cljs.core/memoize","cljs.core/js->clj","react-native.core/get-screen","react-native.core/hw-back-add-listener","react-native.core/hw-back-remove-listener","react-native.core/keyboard-avoiding-view-class","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","react-native.core/keyboard-avoiding-view","seq16521","G__16522","cljs.core/first","cljs.core/next","self__4723__auto__","props","children","cljs.core/into","cljs.core/merge","react-native.platform/ios?","react-native.core/memo","js/shadow.js.shim.module$react.memo","react-native.core/create-ref","js/shadow.js.shim.module$react.createRef","react-native.core/use-ref","js/shadow.js.shim.module$react.useRef","react-native.core/current-ref","ref","target-obj-16523","*runtime-state*-orig-val__16525","oops.state/*runtime-state*","*runtime-state*-temp-val__16526","oops.state/prepare-state","js/Error","next-obj-16524","oops.core/validate-object-access-dynamically","react-native.core/create-context","js/shadow.js.shim.module$react.createContext","react-native.core/use-context","js/shadow.js.shim.module$react.useContext","G__16528","react-native.core/use-effect","effect-fn","deps","js/shadow.js.shim.module$react.useEffect","ret","cljs.core/fn?","js/undefined","cljs-bean.core/->js","react-native.core/use-callback","js/shadow.js.shim.module$react.useCallback","react-native.core/use-effect-once","react-native.core/use-unmount","f","fn-ref","target-obj-16529","*runtime-state*-orig-val__16531","*runtime-state*-temp-val__16532","parent-obj-16530","target-obj-16533","*runtime-state*-orig-val__16537","*runtime-state*-temp-val__16538","call-info-16535","next-obj-16536","fn-16534","oops.core/validate-fn-call-dynamically","oops.state/get-last-access-modifier","react-native.core/layout-animation","react-native.core/configure-next","react-native.core/layout-animation-presets","react-native.core/find-node-handle","react-native.core/selectable-text-input-manager","js/react-native","js/react-native.core","js/react-native.core.selectable-text-input","react-native.core/selectable-text-input","react-native.platform/android?"],"sourcesContent":["(ns react-native.core\n  (:require [\"react\" :as react]\n            [\"react-native\" :as react-native]\n            [cljs-bean.core :as bean]\n            [oops.core :as oops]\n            [react-native.flat-list :as flat-list]\n            [react-native.platform :as platform]\n            [react-native.section-list :as section-list]\n            [reagent.core :as reagent]))\n\n(def app-state ^js (.-AppState ^js react-native))\n\n;; Only use this component for exceptional cases, otherwise use Reanimated, e.g.\n;; when using interpolated values exposed by RN Gesture Handler > Swipeable.\n(def animated-view (reagent/adapt-react-class react-native/Animated.View))\n\n(def view (reagent/adapt-react-class (.-View ^js react-native)))\n(def scroll-view (reagent/adapt-react-class (.-ScrollView ^js react-native)))\n(def image (reagent/adapt-react-class (.-Image ^js react-native)))\n(defn image-get-size [uri callback] (.getSize ^js (.-Image ^js react-native) uri callback))\n(def text (reagent/adapt-react-class (.-Text ^js react-native)))\n(def text-input (reagent/adapt-react-class (.-TextInput ^js react-native)))\n\n(def touchable-opacity (reagent/adapt-react-class (.-TouchableOpacity ^js react-native)))\n(def touchable-highlight (reagent/adapt-react-class (.-TouchableHighlight ^js react-native)))\n(def touchable-without-feedback\n  (reagent/adapt-react-class (.-TouchableWithoutFeedback ^js react-native)))\n\n(def flat-list flat-list/flat-list)\n\n(def section-list section-list/section-list)\n\n(def activity-indicator (reagent/adapt-react-class (.-ActivityIndicator ^js react-native)))\n\n(def modal (reagent/adapt-react-class (.-Modal ^js react-native)))\n\n(def keyboard ^js (.-Keyboard ^js react-native))\n\n(def dismiss-keyboard! #(.dismiss keyboard))\n\n(def device-event-emitter (.-DeviceEventEmitter ^js react-native))\n\n(defn hide-splash-screen\n  []\n  (.hide ^js (-> react-native .-NativeModules .-SplashScreen)))\n\n(defn alert\n  [title message buttons options]\n  (.alert (.-Alert ^js react-native) title message (clj->js buttons) (clj->js options)))\n\n(def appearance ^js (.-Appearance ^js react-native))\n\n(defn get-color-scheme\n  []\n  (.getColorScheme appearance))\n\n(defn appearance-add-change-listener\n  [handler]\n  (.addChangeListener appearance handler))\n\n(def get-window\n  (memoize\n   (fn []\n     (js->clj (.get (.-Dimensions ^js react-native) \"window\") :keywordize-keys true))))\n\n(def get-screen\n  (memoize\n   (fn []\n     (js->clj (.get (.-Dimensions ^js react-native) \"screen\") :keywordize-keys true))))\n\n(defn hw-back-add-listener\n  [callback]\n  (.addEventListener (.-BackHandler ^js react-native) \"hardwareBackPress\" callback))\n\n(defn hw-back-remove-listener\n  [callback]\n  (.removeEventListener (.-BackHandler ^js react-native) \"hardwareBackPress\" callback))\n\n(def keyboard-avoiding-view-class (reagent/adapt-react-class (.-KeyboardAvoidingView react-native)))\n\n(defn keyboard-avoiding-view\n  [props & children]\n  (into [keyboard-avoiding-view-class\n         (merge (when platform/ios? {:behavior :padding})\n                props)]\n        children))\n\n(def memo react/memo)\n\n(def create-ref react/createRef)\n\n(def use-ref react/useRef)\n\n(defn current-ref\n  [ref]\n  (oops/oget ref \"current\"))\n\n(def create-context react/createContext)\n\n(def use-context react/useContext)\n\n(defn use-effect\n  ([effect-fn]\n   (use-effect effect-fn []))\n  ([effect-fn deps]\n   (react/useEffect\n    #(let [ret (effect-fn)]\n       (if (fn? ret) ret js/undefined))\n    (bean/->js deps))))\n\n(def use-callback react/useCallback)\n\n(defn use-effect-once\n  [effect-fn]\n  (use-effect effect-fn))\n\n(defn use-unmount\n  [f]\n  (let [fn-ref (use-ref f)]\n    (oops/oset! fn-ref \"current\" f)\n    (use-effect-once (fn [] (fn [] (oops/ocall! fn-ref \"current\"))))))\n\n(def layout-animation (.-LayoutAnimation ^js react-native))\n(def configure-next (.-configureNext ^js layout-animation))\n\n(def layout-animation-presets\n  {:ease-in-ease-out (-> ^js layout-animation .-Presets .-easeInEaseOut)\n   :linear           (-> ^js layout-animation .-Presets .-linear)\n   :spring           (-> ^js layout-animation .-Presets .-spring)})\n\n(def find-node-handle (.-findNodeHandle ^js react-native))\n\n(defn selectable-text-input-manager\n  []\n  (when (exists? (.-NativeModules ^js react-native))\n    (.-RNSelectableTextInputManager ^js (.-NativeModules ^js react-native))))\n\n;; TODO: iOS native implementation https://github.com/status-im/status-mobile/issues/14137\n(defonce selectable-text-input\n  (if platform/android?\n    (reagent/adapt-react-class\n     (.requireNativeComponent ^js react-native \"RNSelectableTextInput\"))\n    view))\n"]}