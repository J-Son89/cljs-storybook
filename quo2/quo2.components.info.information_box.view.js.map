{"version":3,"sources":["quo2/components/info/information_box/view.cljs"],"mappings":"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","names":["quo2.components.info.information-box.view/info-type->button-type","type","cljs.core/=","p__17032","map__17034","cljs.core/PROTOCOL_SENTINEL","cljs.core/apply","cljs.core/hash-map","cljs.core/get","quo2.components.info.information-box.view/close-button","theme","on-close","react-native.core/touchable-opacity","quo2.components.icon/icon","quo2.components.info.information-box.style/get-color","quo2.components.info.information-box.style/close-button","p__17037","map__17038","quo2.components.info.information-box.view/content","button-label","on-button-press","message","react-native.core/view","quo2.components.markdown.text/text","quo2.components.info.information-box.style/content-text","clojure.string/blank?","quo2.components.buttons.button/button","quo2.components.info.information-box.style/content-button","p__17045","map__17049","quo2.components.info.information-box.view/view","closed?","icon","style","no-icon-color?","icon-size","quo2.theme/get-theme","include-button?","cljs.core/merge","quo2.components.info.information-box.style/container","quo2.components.info.information-box.style/get-color-by-type","or__4126__auto__","quo2.components.info.information-box.style/icon"],"sourcesContent":["(ns quo2.components.info.information-box.view\n  (:require [clojure.string :as string]\n            [quo2.components.buttons.button :as button]\n            [quo2.components.icon :as icons]\n            [quo2.components.info.information-box.style :as style]\n            [quo2.components.markdown.text :as text]\n            [quo2.theme :as theme]\n            [react-native.core :as rn]))\n\n(defn- info-type->button-type\n  [type]\n  (if (= type :error)\n    :danger\n    :primary))\n\n(defn- close-button\n  [{:keys [theme on-close]}]\n  [rn/touchable-opacity\n   {:on-press            on-close\n    :hit-slop            {:top 3 :right 3 :bottom 3 :left 3}\n    :accessibility-label :information-box-close-button}\n   [icons/icon :i/close\n    {:size            12\n     :color           (style/get-color theme :close-button)\n     :container-style style/close-button}]])\n\n(defn- content\n  [{:keys [theme type button-label on-button-press message]}]\n  [rn/view {:style {:flex 1}}\n   [text/text\n    {:size  :paragraph-2\n     :style (style/content-text theme type)}\n    message]\n   (when (not (string/blank? button-label))\n     [button/button\n      {:type                (info-type->button-type type)\n       :accessibility-label :information-box-action-button\n       :size                24\n       :on-press            on-button-press\n       :style               style/content-button}\n      button-label])])\n\n(defn view\n  \"[view opts \\\"message\\\"]\n   opts\n   {:type            :default/:informative/:error\n    :closed?         bool (false)  ;; Information box's state\n    :icon            keyword, required (:i/info)\n    :icon-size       int (16)\n    :no-icon-color?  bool (false)\n    :style           map\n    :button-label    string\n    :on-button-press function\n    :on-close        function\"\n  [{:keys [type closed? icon style button-label\n           on-button-press on-close no-icon-color? icon-size]}\n   message]\n  (when-not closed?\n    (let [theme           (theme/get-theme)\n          include-button? (not (string/blank? button-label))]\n      [rn/view\n       {:accessibility-label :information-box\n        :style               (merge (style/container {:theme           theme\n                                                      :type            type\n                                                      :include-button? include-button?})\n                                    style)}\n       [icons/icon icon\n        {:color           (style/get-color-by-type theme type :icon)\n         :no-color        no-icon-color?\n         :size            (or icon-size 16)\n         :container-style style/icon}]\n       [content\n        {:theme           theme\n         :type            type\n         :button-label    button-label\n         :on-button-press on-button-press\n         :message         message}]\n       (when on-close\n         [close-button {:theme theme :on-close on-close}])])))\n"]}